/**
 */
package Workflow.provider;

import Workflow.util.WorkflowAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class WorkflowItemProviderAdapterFactory extends WorkflowAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WorkflowItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.Workflow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowItemProvider workflowItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.Workflow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowAdapter() {
		if (workflowItemProvider == null) {
			workflowItemProvider = new WorkflowItemProvider(this);
		}

		return workflowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.Map} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MapItemProvider mapItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.Map}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMapAdapter() {
		if (mapItemProvider == null) {
			mapItemProvider = new MapItemProvider(this);
		}

		return mapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.Primitive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveItemProvider primitiveItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.Primitive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveAdapter() {
		if (primitiveItemProvider == null) {
			primitiveItemProvider = new PrimitiveItemProvider(this);
		}

		return primitiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.DerivedField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DerivedFieldItemProvider derivedFieldItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.DerivedField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDerivedFieldAdapter() {
		if (derivedFieldItemProvider == null) {
			derivedFieldItemProvider = new DerivedFieldItemProvider(this);
		}

		return derivedFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.FilterValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilterValueItemProvider filterValueItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.FilterValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilterValueAdapter() {
		if (filterValueItemProvider == null) {
			filterValueItemProvider = new FilterValueItemProvider(this);
		}

		return filterValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.Range} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RangeItemProvider rangeItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.Range}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRangeAdapter() {
		if (rangeItemProvider == null) {
			rangeItemProvider = new RangeItemProvider(this);
		}

		return rangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.SpecialValues} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecialValuesItemProvider specialValuesItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.SpecialValues}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpecialValuesAdapter() {
		if (specialValuesItemProvider == null) {
			specialValuesItemProvider = new SpecialValuesItemProvider(this);
		}

		return specialValuesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.DiscretizeBin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiscretizeBinItemProvider discretizeBinItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.DiscretizeBin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiscretizeBinAdapter() {
		if (discretizeBinItemProvider == null) {
			discretizeBinItemProvider = new DiscretizeBinItemProvider(this);
		}

		return discretizeBinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.DataDictionary} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataDictionaryItemProvider dataDictionaryItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.DataDictionary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataDictionaryAdapter() {
		if (dataDictionaryItemProvider == null) {
			dataDictionaryItemProvider = new DataDictionaryItemProvider(this);
		}

		return dataDictionaryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.Categorical} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoricalItemProvider categoricalItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.Categorical}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoricalAdapter() {
		if (categoricalItemProvider == null) {
			categoricalItemProvider = new CategoricalItemProvider(this);
		}

		return categoricalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.Continuous} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContinuousItemProvider continuousItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.Continuous}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContinuousAdapter() {
		if (continuousItemProvider == null) {
			continuousItemProvider = new ContinuousItemProvider(this);
		}

		return continuousItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.Interval} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntervalItemProvider intervalItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.Interval}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntervalAdapter() {
		if (intervalItemProvider == null) {
			intervalItemProvider = new IntervalItemProvider(this);
		}

		return intervalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.CastType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CastTypeItemProvider castTypeItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.CastType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCastTypeAdapter() {
		if (castTypeItemProvider == null) {
			castTypeItemProvider = new CastTypeItemProvider(this);
		}

		return castTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.DerivedValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DerivedValueItemProvider derivedValueItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.DerivedValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDerivedValueAdapter() {
		if (derivedValueItemProvider == null) {
			derivedValueItemProvider = new DerivedValueItemProvider(this);
		}

		return derivedValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.NumOp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumOpItemProvider numOpItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.NumOp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumOpAdapter() {
		if (numOpItemProvider == null) {
			numOpItemProvider = new NumOpItemProvider(this);
		}

		return numOpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.FixValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FixValueItemProvider fixValueItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.FixValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFixValueAdapter() {
		if (fixValueItemProvider == null) {
			fixValueItemProvider = new FixValueItemProvider(this);
		}

		return fixValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.ValueField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueFieldItemProvider valueFieldItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.ValueField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueFieldAdapter() {
		if (valueFieldItemProvider == null) {
			valueFieldItemProvider = new ValueFieldItemProvider(this);
		}

		return valueFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.FieldRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldRangeItemProvider fieldRangeItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.FieldRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldRangeAdapter() {
		if (fieldRangeItemProvider == null) {
			fieldRangeItemProvider = new FieldRangeItemProvider(this);
		}

		return fieldRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.PMMLModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PMMLModelItemProvider pmmlModelItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.PMMLModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPMMLModelAdapter() {
		if (pmmlModelItemProvider == null) {
			pmmlModelItemProvider = new PMMLModelItemProvider(this);
		}

		return pmmlModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.DataProcessing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataProcessingItemProvider dataProcessingItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.DataProcessing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataProcessingAdapter() {
		if (dataProcessingItemProvider == null) {
			dataProcessingItemProvider = new DataProcessingItemProvider(this);
		}

		return dataProcessingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.Test} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestItemProvider testItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.Test}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestAdapter() {
		if (testItemProvider == null) {
			testItemProvider = new TestItemProvider(this);
		}

		return testItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.MathOp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MathOpItemProvider mathOpItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.MathOp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMathOpAdapter() {
		if (mathOpItemProvider == null) {
			mathOpItemProvider = new MathOpItemProvider(this);
		}

		return mathOpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.Field} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldItemProvider fieldItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.Field}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldAdapter() {
		if (fieldItemProvider == null) {
			fieldItemProvider = new FieldItemProvider(this);
		}

		return fieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.Join} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinItemProvider joinItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.Join}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinAdapter() {
		if (joinItemProvider == null) {
			joinItemProvider = new JoinItemProvider(this);
		}

		return joinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.DateRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateRangeItemProvider dateRangeItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.DateRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateRangeAdapter() {
		if (dateRangeItemProvider == null) {
			dateRangeItemProvider = new DateRangeItemProvider(this);
		}

		return dateRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.Date} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateItemProvider dateItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.Date}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateAdapter() {
		if (dateItemProvider == null) {
			dateItemProvider = new DateItemProvider(this);
		}

		return dateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Workflow.IntervalDate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntervalDateItemProvider intervalDateItemProvider;

	/**
	 * This creates an adapter for a {@link Workflow.IntervalDate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntervalDateAdapter() {
		if (intervalDateItemProvider == null) {
			intervalDateItemProvider = new IntervalDateItemProvider(this);
		}

		return intervalDateItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (workflowItemProvider != null) workflowItemProvider.dispose();
		if (linkItemProvider != null) linkItemProvider.dispose();
		if (mapItemProvider != null) mapItemProvider.dispose();
		if (primitiveItemProvider != null) primitiveItemProvider.dispose();
		if (derivedFieldItemProvider != null) derivedFieldItemProvider.dispose();
		if (filterValueItemProvider != null) filterValueItemProvider.dispose();
		if (rangeItemProvider != null) rangeItemProvider.dispose();
		if (specialValuesItemProvider != null) specialValuesItemProvider.dispose();
		if (discretizeBinItemProvider != null) discretizeBinItemProvider.dispose();
		if (dataDictionaryItemProvider != null) dataDictionaryItemProvider.dispose();
		if (categoricalItemProvider != null) categoricalItemProvider.dispose();
		if (continuousItemProvider != null) continuousItemProvider.dispose();
		if (intervalItemProvider != null) intervalItemProvider.dispose();
		if (castTypeItemProvider != null) castTypeItemProvider.dispose();
		if (derivedValueItemProvider != null) derivedValueItemProvider.dispose();
		if (numOpItemProvider != null) numOpItemProvider.dispose();
		if (fixValueItemProvider != null) fixValueItemProvider.dispose();
		if (valueFieldItemProvider != null) valueFieldItemProvider.dispose();
		if (fieldRangeItemProvider != null) fieldRangeItemProvider.dispose();
		if (pmmlModelItemProvider != null) pmmlModelItemProvider.dispose();
		if (dataProcessingItemProvider != null) dataProcessingItemProvider.dispose();
		if (testItemProvider != null) testItemProvider.dispose();
		if (mathOpItemProvider != null) mathOpItemProvider.dispose();
		if (fieldItemProvider != null) fieldItemProvider.dispose();
		if (joinItemProvider != null) joinItemProvider.dispose();
		if (dateRangeItemProvider != null) dateRangeItemProvider.dispose();
		if (dateItemProvider != null) dateItemProvider.dispose();
		if (intervalDateItemProvider != null) intervalDateItemProvider.dispose();
	}

}
