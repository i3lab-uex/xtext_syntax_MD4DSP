// Simplified Xtext grammar for MM_M4DS (self-contained)
grammar xtext.Workflow with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate workflow "https://www.example.org/workflow"

//-------------------------------------------------------------
// Metamodelo Workflow - Reglas para la Instanciaci칩n de Flujos de Trabajo
//-------------------------------------------------------------

Workflow:
    'workflow' name=ID '{'
        ('environment' environment=Environment)?
        'dataprocessing' '{' dataprocessing+=ProcessingStep+ '}'
        ('links' '{' link+=Link* '}')?
    '}'
;

ProcessingStep:
    DataProcessing | PMMLModel
;

DataProcessing:
    'dataProcessing' name=ID '{'
        'definition' dataProcessingDefinition=ID
        'origin' origin_function=STRING
        'inputPort' '{' inputPort+=DataDictionary+ '}'
        'outputPort' '{' outputPort+=DataDictionary+ '}'
        ('in' '{' in+=[Argument|ID]+ '}')?
        ('out' '{' out+=[Argument|ID]+ '}')?
        ('parameters' '{' parameter+=Parameter* '}')?
        ('contracts' '{' contract+=Contract* '}')?
        ('initial_accumulated_processing' initial_accumulated_processing=[DataProcessing|ID])?
    '}'
;

PMMLModel:
    'pmmlModel' name=ID '{'
        'definition' dataProcessingDefinition=ID
        'origin' origin_function=STRING
        'inputPort' '{' inputPort+=DataDictionary+ '}'
        'outputPort' '{' outputPort+=DataDictionary+ '}'
        ('in' '{' in+=[Argument|ID]+ '}')?
        ('out' '{' out+=[Argument|ID]+ '}')?
        'filePath' filePath=STRING
        ('onlyPredictions' onlyPredictions?='true')?
        ('test' test=Test)?
    '}'
;

Test:
    'test' '{'
        'path' path=STRING
        ('trainSize' trainSize=EFloat)?
        ('testSize' testSize=EFloat)?
    '}'
;

Link:
    'link' name=ID '{'
        'source' source=[ProcessingStep|ID]
        'target' target=[ProcessingStep|ID]
    '}'
;

//-------------------------------------------------------------
// Argumentos y Par치metros
//-------------------------------------------------------------

Argument:
    DataDictionary | DataField
;

Parameter:
    Map | Primitive | DerivedField | FilterValue | DiscretizeBin | ImputeType | 
    CastType | FieldRange | MathOp | Join
;

Map:
    'map' name=ID '{'
        'mapDefinition' mapDefinition=ID
        'inValue' inValue=STRING
        'outvalue' outvalue=STRING
        'mapOperation' mapOperation=MapOperation
    '}'
;

Primitive:
    'primitive' name=ID '{'
        'primitiveDef' primitiveDef=ID
        'value' value=STRING
        'dataType' dataType=LibDataType
    '}'
;

DerivedField:
    'derivedField' name=ID '{'
        'derivedFieldDef' derivedFieldDef=ID
        'der_dataField' der_dataField=[DataField|ID]
    '}'
;

FilterValue:
    'filterValue' name=ID '{'
        'filterValueDef' filterValueDef=ID
        ('primitives' '{' primitive+=Primitive* '}')?
        ('matchingValues' '{' matchingvalue+=MatchingValue* '}')?
        ('filterType' filterType=FilterType)?
    '}'
;

DiscretizeBin:
    'discretizeBin' name=ID '{'
        'discretizeBinDef' discretizeBinDef=ID
        'binValue' binValue=STRING
        'intervals' '{' interval+=Interval+ '}'
    '}'
;

FieldRange:
    'fieldRange' name=ID '{'
        'fieldDef' fieldDef=ID
        'dataFields' '{' dataField+=[DataField|ID]+ '}'
        'operator' operator=Operator
    '}'
;

MathOp:
    'mathOp' name=ID '{'
        'mathOpDef' mathOpDef=ID
        'operator' operator=MathOperator
        'operands' '{' operand+=Operand operand+=Operand '}'
    '}'
;

Join:
    'join' name=ID '{'
        'joinDef' joinDef=ID
        'operands' '{' operand+=Operand+ '}'
    '}'
;

//-------------------------------------------------------------
// Operandos
//-------------------------------------------------------------

Operand:
    FixValue | Field
;

Field:
    'field' name=ID '{'
        'fieldDef' fieldDef=ID
        'datafield' datafield=[DataField|ID]
    '}'
;

FixValue:
    'fixValue' name=ID '{'
        'fixValueDef' fixValueDef=ID
        'value' value=Primitive
    '}'
;

//-------------------------------------------------------------
// Matching Values
//-------------------------------------------------------------

MatchingValue:
    Range | SpecialValues | DateRange
;

Range:
    'range' name=ID '{'
        'rangeDef' rangeDef=ID
        'min' min=EFloat
        'max' max=EFloat
        ('clousure' clousure=ClosureType)?
        ('minInfinity' minInfinity?='true')?
        ('maxInfinity' maxInfinity?='true')?
    '}'
;

DateRange:
    'dateRange' name=ID '{'
        'rangeDef' rangeDef=ID
        'min' min=STRING
        'max' max=STRING
        ('clousure' clousure=ClosureType)?
    '}'
;

SpecialValues:
    'specialValues' name=ID '{'
        'specialValuesDef' specialValuesDef=ID
        'specialType' specialType=SpecialValue
    '}'
;

//-------------------------------------------------------------
// Tipos de Imputaci칩n
//-------------------------------------------------------------

ImputeType:
    DerivedValue | NumOp | FixValue
;

DerivedValue:
    'derivedValue' imp_name=ID '{'
        'derivedValueDef' derivedValueDef=ID
        'type' type=DerivedType
        ('imputeValue' imputeValue=SpecialValue)?
    '}'
;

NumOp:
    'numOp' imp_name=ID '{'
        'numOpDef' numOpDef=ID
        'operation' operation=Operation
        ('imputeValue' imputeValue=SpecialValue)?
    '}'
;

CastType:
    'castType' imp_name=ID '{'
        'castTypeDef' castTypeDef=ID
        'type' type=DataType
    '}'
;

//-------------------------------------------------------------
// DataDictionary y DataField
//-------------------------------------------------------------

DataDictionary:
    'dataDictionary' name=ID '{'
        'dataDictionaryDefinition' dataDictionaryDefinition=ID
        ('fileName' fileName=STRING)?
        ('datafields' '{' datafield+=DataField* '}')?
    '}'
;

DataField:
    Categorical | Continuous | Date
;

Categorical:
    'categorical' name=ID '{'
        'categoricalDef' categoricalDef=ID
        ('id' id?='true')?
        'dataType' dataType=DataType
        ('target' target?='true')?
        ('displayName' displayName=STRING)?
        ('ordinal' ordinal?='true')?
        ('validValues' '{' validValues+=ValueField* '}')?
        ('invalidValues' '{' invalidValues+=ValueField* '}')?
        ('missingValues' '{' missingValues+=ValueField* '}')?
    '}'
;

Continuous:
    'continuous' name=ID '{'
        'continuousDef' continuousDef=ID
        ('id' id?='true')?
        'dataType' dataType=DataType
        ('target' target?='true')?
        ('displayName' displayName=STRING)?
        ('numDecimals' numDecimals=EInt)?
        'intervals' '{' interval+=Interval+ '}'
        ('validValues' '{' validValues+=ValueField* '}')?
        ('invalidValues' '{' invalidValues+=ValueField* '}')?
        ('missingValues' '{' missingValues+=ValueField* '}')?
    '}'
;

Date:
    'date' name=ID '{'
        'dateDef' dateDef=ID
        ('id' id?='true')?
        'dataType' dataType=DataType
        ('target' target?='true')?
        ('displayName' displayName=STRING)?
        ('format' format=STRING)?
        'intervaldate' '{' intervaldate+=IntervalDate+ '}'
        ('validValues' '{' validValues+=ValueField* '}')?
        ('invalidValues' '{' invalidValues+=ValueField* '}')?
        ('missingValues' '{' missingValues+=ValueField* '}')?
    '}'
;

Interval:
    'interval' '{'
        'leftMargin' leftMargin=EFloat
        'rightMargin' rightMargin=EFloat
        ('clousure' clousure=ClosureType)?
    '}'
;

IntervalDate:
    'intervalDate' '{'
        'leftMargin' leftMargin=STRING
        'rightMargin' rightMargin=STRING
        ('clousure' clousure=ClosureType)?
    '}'
;

ValueField:
    'value' value=STRING ('count' count=EInt)?
;

//-------------------------------------------------------------
// Contratos
//-------------------------------------------------------------

Contract:
    'contract' name=ID '{'
        'contractDefinition' contractDefinition=ID
        'contract' contract=ContractElement
    '}'
;

ContractElement:
    'contractElement' '{'
        // Placeholder simplificado
    '}'
;

//-------------------------------------------------------------
// Enumeraciones
//-------------------------------------------------------------

enum LibDataType:
    String='String' | Time='Time' | Integer='Integer' | DateTime='DateTime' | 
    Boolean='Boolean' | Double='Double' | Float='Float' | Date='Date'
;

enum DataType:
    String='String' | Time='Time' | Integer='Integer' | DateTime='DateTime' | 
    Boolean='Boolean' | Double='Double' | Float='Float' | Date='Date'
;

enum ClosureType:
    openOpen='openOpen' | openClosed='openClosed' | 
    closedOpen='closedOpen' | closedClosed='closedClosed'
;

enum Operation:
    Interpolation='Interpolation' | Mean='Mean' | Median='Median' | Closest='Closest'
;

enum DerivedType:
    MostFrequent='MostFrequent' | Previous='Previous' | Next='Next'
;

enum SpecialValue:
    Missing='Missing' | Invalid='Invalid' | Outlier='Outlier'
;

enum Operator:
    BELONG='BELONG' | NOTBELONG='NOTBELONG'
;

enum FilterType:
    EXCLUDE='EXCLUDE' | INCLUDE='INCLUDE'
;

enum MapOperation:
    VALUE_MAPPING='VALUE_MAPPING' | SUBSTRING='SUBSTRING'
;

enum MathOperator:
    SUM='SUM' | SUBSTRACT='SUBSTRACT' | MULTIPLY='MULTIPLY' | DIVIDE='DIVIDE'
;

//-------------------------------------------------------------
// Metamodelo Environment - Reglas para la Instanciaci칩n de Entornos
//-------------------------------------------------------------

Environment:
    Local | AzureCI | AmazonECS
;

Local:
    'local' name=ID '{'
        'path' path=STRING
        'storage' '{' storage+=Storage+ '}'
        'containerName' containerName=STRING
        'developmentTool' developmentTool=DevelopmentTool
        'imageName' imageName=STRING
        'imageTag' imageTag=STRING
    '}'
;

AzureCI:
    'azureCI' name=ID '{'
        'path' path=STRING
        'storage' '{' storage+=Storage+ '}'
        'containerName' containerName=STRING
        'developmentTool' developmentTool=DevelopmentTool
        'imageName' imageName=STRING
        'imageTag' imageTag=STRING
        'acrName' acrName=STRING
        'keyVaultName' keyVaultName=STRING
        'secretName' secretName=STRING
        'blobName' blobName=STRING
    '}'
;

AmazonECS:
    'amazonECS' name=ID '{'
        'path' path=STRING
        'storage' '{' storage+=Storage+ '}'
        'containerName' containerName=STRING
        'developmentTool' developmentTool=DevelopmentTool
        'imageName' imageName=STRING
        'imageTag' imageTag=STRING
        'secretId' secretId=STRING
        'region' region=STRING
        'key' key=STRING
    '}'
;

DevelopmentTool:
    'developmentTool' '{'
        'version' version=STRING
        'tool' tool=TOOL
    '}'
;

enum TOOL:
    PYTHON='PYTHON' | R='R' | KNIME='KNIME'
;

Storage:
    (Database | LocalFolder | AmazonS3 | AzureBlob)
;

enum DBTYPE:
    MYSQL='MYSQL' | POSTGRESQL='POSTGRESQL' | SQLSERVER='SQLSERVER' | 
    ORACLE='ORACLE' | MONGODB='MONGODB' | DYNAMODB='DYNAMODB'
;

Database:
    'database' storageName=ID '{'
        'host' host=STRING
        'port' port=STRING
        'type' type=DBTYPE
        'auth' auth=Authentication
        'dbName' dbName=STRING
        'tables' '{' table+=Table+ '}'
    '}'
;

Authentication:
    (Credentials | SSL | OAuth2 | AWS)
;

Credentials:
    'credentials' '{'
        'username' username=STRING
        'passwd' passwd=STRING
    '}'
;

SSL:
    'ssl' '{'
        'path_sslcert' path_sslcert=STRING
        'path_sslkey' path_sslkey=STRING
        'path_sslrootcert' path_sslrootcert=STRING
    '}'
;

OAuth2:
    'oauth2' '{'
        'clientId' clientId=STRING
        'clientSecret' clientSecret=STRING
        'tokenUrl' tokenUrl=STRING
        'accessToken' accessToken=STRING
        'scope' scope=STRING
    '}'
;

AWS:
    'aws' '{'
        'region' region=STRING
        'accessKey' accessKey=STRING
        'endpointURL' endpointURL=STRING
        'secretId' secretId=STRING
    '}'
;

enum FileType:
    CSV='CSV' | EXCEL='EXCEL' | JSON='JSON' | PARQUET='PARQUET' | 
    FEATHER='FEATHER' | HDF5='HDF5'
;

Source:
    (File | Table)
;

File:
    'file' '{'
        'type' type=FileType
        'dataDictionary' dataDictionary=[DataDictionary|ID]
        ('csv_sep' csv_sep=STRING)?
        ('hdf5_key' hdf5_key=STRING)?
        ('csv_thousandsSep' csv_thousandsSep=STRING)?
        ('csv_decimalSep' csv_decimalSep=STRING)?
    '}'
;

Table:
    'table' '{'
        'dataDictionary' dataDictionary=[DataDictionary|ID]
    '}'
;

Folder:
    (LocalFolder | AmazonS3 | AzureBlob)
;

LocalFolder:
    'localFolder' storageName=ID '{'
        'folderPath' folderPath=STRING
        'files' '{' file+=File+ '}'
    '}'
;

AmazonS3:
    'amazonS3' storageName=ID '{'
        'folderPath' folderPath=STRING
        'files' '{' file+=File+ '}'
        'bucket' bucket=STRING
        'region' region=STRING
        'secretId' secretId=STRING
    '}'
;

AzureBlob:
    'azureBlob' storageName=ID '{'
        'folderPath' folderPath=STRING
        'files' '{' file+=File+ '}'
        'container' container=STRING
        'keyVaultName' keyVaultName=STRING
        'secretName' secretName=STRING
    '}'
;

//-------------------------------------------------------------
// Terminal Rules
//-------------------------------------------------------------

terminal EInt returns ecore::EInt: INT;
terminal EFloat returns ecore::EFloat: INT ('.' INT)? (('E'|'e') ('+'|'-')? INT)?;
