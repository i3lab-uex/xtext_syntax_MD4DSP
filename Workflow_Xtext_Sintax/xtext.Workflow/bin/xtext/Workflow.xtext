// automatically generated by Xtext
grammar xtext.Workflow with org.eclipse.xtext.common.Terminals

import "https://www.example.org/workflow"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Workflow returns Workflow:
	'Workflow'
	name=EString
	'{'
		'dataprocessing' '{' dataprocessing+=ProcessingStep ( "," dataprocessing+=ProcessingStep)* '}' 
		('link' '{' link+=Link ( "," link+=Link)* '}' )?
	'}';

ProcessingStep returns ProcessingStep:
	PMMLModel | DataProcessing;


DataField returns DataField:
	Categorical | Continuous | Date;


Argument returns Argument:
	DataDictionary | Categorical | Continuous | Date;


Parameter returns Parameter:
	Map | Primitive | DerivedField | FilterValue | Range | SpecialValues | DiscretizeBin | CastType | DerivedValue | NumOp | FixValue | FieldRange | MathOp | Field | Join | DateRange;






MatchingValue returns MatchingValue:
	Range | SpecialValues | DateRange;

Operand returns Operand:
	FixValue | Field;

EString returns ecore::EString:
	STRING | ID;

Link returns Link:
	'Link'
	name=EString
	'{'
		'source' source=[ProcessingStep|EString]
		'target' target=[ProcessingStep|EString]
	'}';

DataDictionary returns DataDictionary:
	{DataDictionary}
	'DataDictionary'
	name=EString
	'{'
		('fileName' fileName=EString)?
		('in' in=[DataDictionary|EString])?
		('out' out=[DataDictionary|EString])?
		('datafield' '{' datafield+=DataField ( "," datafield+=DataField)* '}' )?
	'}';

PMMLModel returns PMMLModel:
	(onlyPredictions?='onlyPredictions')?
	'PMMLModel'
	name=EString
	'{'
		('origin_function' origin_function=EString)?
		('filePath' filePath=EString)?
		('outgoing' outgoing=[Link|EString])?
		('incoming' incoming=[Link|EString])?
		'in' '(' in+=[Argument|EString] ( "," in+=[Argument|EString])* ')' 
		'out' '(' out+=[Argument|EString] ( "," out+=[Argument|EString])* ')' 
		'inputPort' '{' inputPort+=DataDictionary ( "," inputPort+=DataDictionary)* '}' 
		'outputPort' '{' outputPort+=DataDictionary ( "," outputPort+=DataDictionary)* '}' 
		('test' test=Test)?
	'}';

DataProcessing returns DataProcessing:
	'DataProcessing'
	name=EString
	'{'
		('origin_function' origin_function=EString)?
		('outgoing' outgoing=[Link|EString])?
		('incoming' incoming=[Link|EString])?
		'in' '(' in+=[Argument|EString] ( "," in+=[Argument|EString])* ')' 
		'out' '(' out+=[Argument|EString] ( "," out+=[Argument|EString])* ')' 
		('initial_accumulated_processing' initial_accumulated_processing=[DataProcessing|EString])?
		'inputPort' '{' inputPort+=DataDictionary ( "," inputPort+=DataDictionary)* '}' 
		'outputPort' '{' outputPort+=DataDictionary ( "," outputPort+=DataDictionary)* '}' 
		('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum DataType returns DataType:
				String = 'String' | Time = 'Time' | Integer = 'Integer' | DateTime = 'DateTime' | Boolean = 'Boolean' | Double = 'Double' | Float = 'Float' | Date = 'Date';

ValueField returns ValueField:
	{ValueField}
	'ValueField'
	'{'
		('value' value=EString)?
		('count' count=EInt)?
	'}';

Categorical returns Categorical:
	{Categorical}
	(id?='id')?
	(target?='target')?
	(ordinal?='ordinal')?
	'Categorical'
	name=EString
	'{'
		('dataType' dataType=DataType)?
		('displayName' displayName=EString)?
		('in' '(' in+=[DataField|EString] ( "," in+=[DataField|EString])* ')' )?
		('out' out=[DataField|EString])?
		('validValues' '{' validValues+=ValueField ( "," validValues+=ValueField)* '}' )?
		('invalidValues' '{' invalidValues+=ValueField ( "," invalidValues+=ValueField)* '}' )?
		('missingValues' '{' missingValues+=ValueField ( "," missingValues+=ValueField)* '}' )?
	'}';

Continuous returns Continuous:
	(id?='id')?
	(target?='target')?
	'Continuous'
	name=EString
	'{'
		('dataType' dataType=DataType)?
		('displayName' displayName=EString)?
		('numDecimals' numDecimals=EIntegerObject)?
		('in' '(' in+=[DataField|EString] ( "," in+=[DataField|EString])* ')' )?
		('out' out=[DataField|EString])?
		('validValues' '{' validValues+=ValueField ( "," validValues+=ValueField)* '}' )?
		('invalidValues' '{' invalidValues+=ValueField ( "," invalidValues+=ValueField)* '}' )?
		('missingValues' '{' missingValues+=ValueField ( "," missingValues+=ValueField)* '}' )?
		'interval' '{' interval+=Interval ( "," interval+=Interval)* '}' 
	'}';

Date returns Date:
	(id?='id')?
	(target?='target')?
	'Date'
	name=EString
	'{'
		('dataType' dataType=DataType)?
		('displayName' displayName=EString)?
		('format' format=EString)?
		('in' '(' in+=[DataField|EString] ( "," in+=[DataField|EString])* ')' )?
		('out' out=[DataField|EString])?
		('validValues' '{' validValues+=ValueField ( "," validValues+=ValueField)* '}' )?
		('invalidValues' '{' invalidValues+=ValueField ( "," invalidValues+=ValueField)* '}' )?
		('missingValues' '{' missingValues+=ValueField ( "," missingValues+=ValueField)* '}' )?
		'intervaldate' '{' intervaldate+=IntervalDate ( "," intervaldate+=IntervalDate)* '}' 
	'}';

EInt returns ecore::EInt:
	'-'? INT;

Interval returns Interval:
	{Interval}
	'Interval'
	'{'
		('leftMargin' leftMargin=EFloat)?
		('rightMargin' rightMargin=EFloat)?
		('clousure' clousure=ClosureType)?
	'}';

EIntegerObject returns ecore::EIntegerObject:
	'-'? INT;

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

enum ClosureType returns ClosureType:
				openOpen = 'openOpen' | openClosed = 'openClosed' | closedOpen = 'closedOpen' | closedClosed = 'closedClosed';

IntervalDate returns IntervalDate:
	{IntervalDate}
	'IntervalDate'
	'{'
		('rightMargin' rightMargin=EString)?
		('clousure' clousure=ClosureType)?
		('leftMargin' leftMargin=EString)?
	'}';

Test returns Test:
	{Test}
	'Test'
	'{'
		('path' path=EString)?
		('trainSize' trainSize=EFloat)?
		('testSize' testSize=EFloat)?
	'}';

Map returns Map:
	{Map}
	'Map'
	name=EString
	'{'
		('inValue' inValue=EString)?
		('outvalue' outvalue=EString)?
		('mapOperation' mapOperation=MapOperation)?
	'}';

Primitive returns Primitive:
	{Primitive}
	'Primitive'
	name=EString
	'{'
		('value' value=EString)?
		('dataType' dataType=DataType)?
	'}';

DerivedField returns DerivedField:
	'DerivedField'
	name=EString
	'{'
		'der_dataField' der_dataField=[DataField|EString]
	'}';

FilterValue returns FilterValue:
	{FilterValue}
	'FilterValue'
	name=EString
	'{'
		('filterType' filterType=FilterType)?
		('primitive' '{' primitive+=Primitive ( "," primitive+=Primitive)* '}' )?
		('matchingvalue' '{' matchingvalue+=MatchingValue ( "," matchingvalue+=MatchingValue)* '}' )?
	'}';

Range returns Range:
	{Range}
	(minInfinity?='minInfinity')?
	(maxInfinity?='maxInfinity')?
	'Range'
	name=EString
	'{'
		('min' min=EFloat)?
		('max' max=EFloat)?
		('clousure' clousure=ClosureType)?
	'}';

SpecialValues returns SpecialValues:
	{SpecialValues}
	'SpecialValues'
	name=EString
	'{'
		('specialType' specialType=SpecialValue)?
	'}';

DiscretizeBin returns DiscretizeBin:
	'DiscretizeBin'
	name=EString
	'{'
		('binValue' binValue=EString)?
		'interval' '{' interval+=Interval ( "," interval+=Interval)* '}' 
	'}';

CastType returns CastType:
	{CastType}
	'CastType'
	name=EString
	'{'
		('type' type=DataType)?
	'}';

DerivedValue returns DerivedValue:
	{DerivedValue}
	'DerivedValue'
	name=EString
	'{'
		('imputeValue' imputeValue=SpecialValue)?
		('type' type=DerivedType)?
	'}';

NumOp returns NumOp:
	{NumOp}
	'NumOp'
	name=EString
	'{'
		('imputeValue' imputeValue=SpecialValue)?
		('operation' operation=Operation)?
	'}';

FixValue returns FixValue:
	'FixValue'
	name=EString
	'{'
		('imputeValue' imputeValue=SpecialValue)?
		('next_operand' next_operand=[Operand|EString])?
		('previous_operand' previous_operand=[Operand|EString])?
		'value' value=Primitive
	'}';

FieldRange returns FieldRange:
	'FieldRange'
	name=EString
	'{'
		('operator' operator=Operator)?
		'dataField' '(' dataField+=[DataField|EString] ( "," dataField+=[DataField|EString])* ')' 
	'}';

MathOp returns MathOp:
	'MathOp'
	name=EString
	'{'
		('operator' operator=MathOperator)?
		'operand' '{' operand+=Operand ( "," operand+=Operand)* '}' 
	'}';

Field returns Field:
	'Field'
	name=EString
	'{'
		('next_operand' next_operand=[Operand|EString])?
		('previous_operand' previous_operand=[Operand|EString])?
		'datafield' datafield=[DataField|EString]
	'}';

Join returns Join:
	'Join'
	name=EString
	'{'
		'operand' '{' operand+=Operand ( "," operand+=Operand)* '}' 
	'}';

DateRange returns DateRange:
	{DateRange}
	'DateRange'
	name=EString
	'{'
		('clousure' clousure=ClosureType)?
		('max' max=EString)?
		('min' min=EString)?
	'}';

enum MapOperation returns MapOperation:
				VALUE_MAPPING = 'VALUE_MAPPING' | SUBSTRING = 'SUBSTRING';

enum FilterType returns FilterType:
				EXCLUDE = 'EXCLUDE' | INCLUDE = 'INCLUDE';

enum SpecialValue returns SpecialValue:
				Missing = 'Missing' | Invalid = 'Invalid' | Outlier = 'Outlier';

enum DerivedType returns DerivedType:
				MostFrequent = 'MostFrequent' | Previous = 'Previous' | Next = 'Next';

enum Operation returns Operation:
				Interpolation = 'Interpolation' | Mean = 'Mean' | Median = 'Median' | Closest = 'Closest';

enum Operator returns Operator:
				BELONG = 'BELONG' | NOTBELONG = 'NOTBELONG';

enum MathOperator returns MathOperator:
				SUM = 'SUM' | SUBSTRACT = 'SUBSTRACT' | MULTIPLY = 'MULTIPLY' | DIVIDE = 'DIVIDE';
