/**
 * generated by Xtext 2.40.0
 */
package xtext.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;
import xtext.services.WorkflowGrammarAccess;
import xtext.workflow.Contract;
import xtext.workflow.DataDictionary;
import xtext.workflow.DataProcessing;
import xtext.workflow.Environment;
import xtext.workflow.Link;
import xtext.workflow.Parameter;
import xtext.workflow.ProcessingStep;
import xtext.workflow.Workflow;

@SuppressWarnings("all")
public class WorkflowFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private WorkflowGrammarAccess _workflowGrammarAccess;

  protected void _format(final Workflow workflow, @Extension final IFormattableDocument document) {
    document.<Environment>format(workflow.getEnvironment());
    EList<ProcessingStep> _dataprocessing = workflow.getDataprocessing();
    for (final ProcessingStep processingStep : _dataprocessing) {
      document.<ProcessingStep>format(processingStep);
    }
    EList<Link> _link = workflow.getLink();
    for (final Link link : _link) {
      document.<Link>format(link);
    }
  }

  protected void _format(final DataProcessing dataProcessing, @Extension final IFormattableDocument document) {
    EList<DataDictionary> _inputPort = dataProcessing.getInputPort();
    for (final DataDictionary dataDictionary : _inputPort) {
      document.<DataDictionary>format(dataDictionary);
    }
    EList<DataDictionary> _outputPort = dataProcessing.getOutputPort();
    for (final DataDictionary dataDictionary_1 : _outputPort) {
      document.<DataDictionary>format(dataDictionary_1);
    }
    EList<Parameter> _parameter = dataProcessing.getParameter();
    for (final Parameter parameter : _parameter) {
      document.<Parameter>format(parameter);
    }
    EList<Contract> _contract = dataProcessing.getContract();
    for (final Contract contract : _contract) {
      document.<Contract>format(contract);
    }
  }

  @XbaseGenerated
  public void format(final Object dataProcessing, final IFormattableDocument document) {
    if (dataProcessing instanceof XtextResource) {
      _format((XtextResource)dataProcessing, document);
      return;
    } else if (dataProcessing instanceof DataProcessing) {
      _format((DataProcessing)dataProcessing, document);
      return;
    } else if (dataProcessing instanceof Workflow) {
      _format((Workflow)dataProcessing, document);
      return;
    } else if (dataProcessing instanceof EObject) {
      _format((EObject)dataProcessing, document);
      return;
    } else if (dataProcessing == null) {
      _format((Void)null, document);
      return;
    } else if (dataProcessing != null) {
      _format(dataProcessing, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(dataProcessing, document).toString());
    }
  }
}
