/**
 * generated by Xtext 2.39.0
 */
package xtext.workflow.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import xtext.workflow.DataField;
import xtext.workflow.FieldRange;
import xtext.workflow.Operator;
import xtext.workflow.WorkflowPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Field Range</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.workflow.impl.FieldRangeImpl#getName <em>Name</em>}</li>
 *   <li>{@link xtext.workflow.impl.FieldRangeImpl#getFieldDef <em>Field Def</em>}</li>
 *   <li>{@link xtext.workflow.impl.FieldRangeImpl#getDataField <em>Data Field</em>}</li>
 *   <li>{@link xtext.workflow.impl.FieldRangeImpl#getOperator <em>Operator</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FieldRangeImpl extends ParameterImpl implements FieldRange
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getFieldDef() <em>Field Def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFieldDef()
   * @generated
   * @ordered
   */
  protected static final String FIELD_DEF_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFieldDef() <em>Field Def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFieldDef()
   * @generated
   * @ordered
   */
  protected String fieldDef = FIELD_DEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getDataField() <em>Data Field</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataField()
   * @generated
   * @ordered
   */
  protected EList<DataField> dataField;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final Operator OPERATOR_EDEFAULT = Operator.BELONG;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected Operator operator = OPERATOR_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FieldRangeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.FIELD_RANGE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.FIELD_RANGE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFieldDef()
  {
    return fieldDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFieldDef(String newFieldDef)
  {
    String oldFieldDef = fieldDef;
    fieldDef = newFieldDef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.FIELD_RANGE__FIELD_DEF, oldFieldDef, fieldDef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DataField> getDataField()
  {
    if (dataField == null)
    {
      dataField = new EObjectResolvingEList<DataField>(DataField.class, this, WorkflowPackage.FIELD_RANGE__DATA_FIELD);
    }
    return dataField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operator getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(Operator newOperator)
  {
    Operator oldOperator = operator;
    operator = newOperator == null ? OPERATOR_EDEFAULT : newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.FIELD_RANGE__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.FIELD_RANGE__NAME:
        return getName();
      case WorkflowPackage.FIELD_RANGE__FIELD_DEF:
        return getFieldDef();
      case WorkflowPackage.FIELD_RANGE__DATA_FIELD:
        return getDataField();
      case WorkflowPackage.FIELD_RANGE__OPERATOR:
        return getOperator();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.FIELD_RANGE__NAME:
        setName((String)newValue);
        return;
      case WorkflowPackage.FIELD_RANGE__FIELD_DEF:
        setFieldDef((String)newValue);
        return;
      case WorkflowPackage.FIELD_RANGE__DATA_FIELD:
        getDataField().clear();
        getDataField().addAll((Collection<? extends DataField>)newValue);
        return;
      case WorkflowPackage.FIELD_RANGE__OPERATOR:
        setOperator((Operator)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.FIELD_RANGE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case WorkflowPackage.FIELD_RANGE__FIELD_DEF:
        setFieldDef(FIELD_DEF_EDEFAULT);
        return;
      case WorkflowPackage.FIELD_RANGE__DATA_FIELD:
        getDataField().clear();
        return;
      case WorkflowPackage.FIELD_RANGE__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.FIELD_RANGE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case WorkflowPackage.FIELD_RANGE__FIELD_DEF:
        return FIELD_DEF_EDEFAULT == null ? fieldDef != null : !FIELD_DEF_EDEFAULT.equals(fieldDef);
      case WorkflowPackage.FIELD_RANGE__DATA_FIELD:
        return dataField != null && !dataField.isEmpty();
      case WorkflowPackage.FIELD_RANGE__OPERATOR:
        return operator != OPERATOR_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", fieldDef: ");
    result.append(fieldDef);
    result.append(", operator: ");
    result.append(operator);
    result.append(')');
    return result.toString();
  }

} //FieldRangeImpl
