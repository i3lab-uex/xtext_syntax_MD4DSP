/**
 * generated by Xtext 2.39.0
 */
package xtext.workflow.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.workflow.Continuous;
import xtext.workflow.Interval;
import xtext.workflow.WorkflowPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Continuous</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.workflow.impl.ContinuousImpl#getContinuousDef <em>Continuous Def</em>}</li>
 *   <li>{@link xtext.workflow.impl.ContinuousImpl#getNumDecimals <em>Num Decimals</em>}</li>
 *   <li>{@link xtext.workflow.impl.ContinuousImpl#getInterval <em>Interval</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ContinuousImpl extends DataFieldImpl implements Continuous
{
  /**
   * The default value of the '{@link #getContinuousDef() <em>Continuous Def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContinuousDef()
   * @generated
   * @ordered
   */
  protected static final String CONTINUOUS_DEF_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getContinuousDef() <em>Continuous Def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContinuousDef()
   * @generated
   * @ordered
   */
  protected String continuousDef = CONTINUOUS_DEF_EDEFAULT;

  /**
   * The default value of the '{@link #getNumDecimals() <em>Num Decimals</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumDecimals()
   * @generated
   * @ordered
   */
  protected static final int NUM_DECIMALS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getNumDecimals() <em>Num Decimals</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumDecimals()
   * @generated
   * @ordered
   */
  protected int numDecimals = NUM_DECIMALS_EDEFAULT;

  /**
   * The cached value of the '{@link #getInterval() <em>Interval</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInterval()
   * @generated
   * @ordered
   */
  protected EList<Interval> interval;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContinuousImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.CONTINUOUS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getContinuousDef()
  {
    return continuousDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContinuousDef(String newContinuousDef)
  {
    String oldContinuousDef = continuousDef;
    continuousDef = newContinuousDef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.CONTINUOUS__CONTINUOUS_DEF, oldContinuousDef, continuousDef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getNumDecimals()
  {
    return numDecimals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNumDecimals(int newNumDecimals)
  {
    int oldNumDecimals = numDecimals;
    numDecimals = newNumDecimals;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.CONTINUOUS__NUM_DECIMALS, oldNumDecimals, numDecimals));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Interval> getInterval()
  {
    if (interval == null)
    {
      interval = new EObjectContainmentEList<Interval>(Interval.class, this, WorkflowPackage.CONTINUOUS__INTERVAL);
    }
    return interval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WorkflowPackage.CONTINUOUS__INTERVAL:
        return ((InternalEList<?>)getInterval()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.CONTINUOUS__CONTINUOUS_DEF:
        return getContinuousDef();
      case WorkflowPackage.CONTINUOUS__NUM_DECIMALS:
        return getNumDecimals();
      case WorkflowPackage.CONTINUOUS__INTERVAL:
        return getInterval();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.CONTINUOUS__CONTINUOUS_DEF:
        setContinuousDef((String)newValue);
        return;
      case WorkflowPackage.CONTINUOUS__NUM_DECIMALS:
        setNumDecimals((Integer)newValue);
        return;
      case WorkflowPackage.CONTINUOUS__INTERVAL:
        getInterval().clear();
        getInterval().addAll((Collection<? extends Interval>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.CONTINUOUS__CONTINUOUS_DEF:
        setContinuousDef(CONTINUOUS_DEF_EDEFAULT);
        return;
      case WorkflowPackage.CONTINUOUS__NUM_DECIMALS:
        setNumDecimals(NUM_DECIMALS_EDEFAULT);
        return;
      case WorkflowPackage.CONTINUOUS__INTERVAL:
        getInterval().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.CONTINUOUS__CONTINUOUS_DEF:
        return CONTINUOUS_DEF_EDEFAULT == null ? continuousDef != null : !CONTINUOUS_DEF_EDEFAULT.equals(continuousDef);
      case WorkflowPackage.CONTINUOUS__NUM_DECIMALS:
        return numDecimals != NUM_DECIMALS_EDEFAULT;
      case WorkflowPackage.CONTINUOUS__INTERVAL:
        return interval != null && !interval.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (continuousDef: ");
    result.append(continuousDef);
    result.append(", numDecimals: ");
    result.append(numDecimals);
    result.append(')');
    return result.toString();
  }

} //ContinuousImpl
