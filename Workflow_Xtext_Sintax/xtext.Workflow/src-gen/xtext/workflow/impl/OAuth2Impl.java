/**
 * generated by Xtext 2.39.0
 */
package xtext.workflow.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xtext.workflow.OAuth2;
import xtext.workflow.WorkflowPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>OAuth2</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.workflow.impl.OAuth2Impl#getClientId <em>Client Id</em>}</li>
 *   <li>{@link xtext.workflow.impl.OAuth2Impl#getClientSecret <em>Client Secret</em>}</li>
 *   <li>{@link xtext.workflow.impl.OAuth2Impl#getTokenUrl <em>Token Url</em>}</li>
 *   <li>{@link xtext.workflow.impl.OAuth2Impl#getAccessToken <em>Access Token</em>}</li>
 *   <li>{@link xtext.workflow.impl.OAuth2Impl#getScope <em>Scope</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OAuth2Impl extends AuthenticationImpl implements OAuth2
{
  /**
   * The default value of the '{@link #getClientId() <em>Client Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClientId()
   * @generated
   * @ordered
   */
  protected static final String CLIENT_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getClientId() <em>Client Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClientId()
   * @generated
   * @ordered
   */
  protected String clientId = CLIENT_ID_EDEFAULT;

  /**
   * The default value of the '{@link #getClientSecret() <em>Client Secret</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClientSecret()
   * @generated
   * @ordered
   */
  protected static final String CLIENT_SECRET_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getClientSecret() <em>Client Secret</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClientSecret()
   * @generated
   * @ordered
   */
  protected String clientSecret = CLIENT_SECRET_EDEFAULT;

  /**
   * The default value of the '{@link #getTokenUrl() <em>Token Url</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTokenUrl()
   * @generated
   * @ordered
   */
  protected static final String TOKEN_URL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTokenUrl() <em>Token Url</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTokenUrl()
   * @generated
   * @ordered
   */
  protected String tokenUrl = TOKEN_URL_EDEFAULT;

  /**
   * The default value of the '{@link #getAccessToken() <em>Access Token</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAccessToken()
   * @generated
   * @ordered
   */
  protected static final String ACCESS_TOKEN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAccessToken() <em>Access Token</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAccessToken()
   * @generated
   * @ordered
   */
  protected String accessToken = ACCESS_TOKEN_EDEFAULT;

  /**
   * The default value of the '{@link #getScope() <em>Scope</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScope()
   * @generated
   * @ordered
   */
  protected static final String SCOPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getScope() <em>Scope</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScope()
   * @generated
   * @ordered
   */
  protected String scope = SCOPE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OAuth2Impl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.OAUTH2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getClientId()
  {
    return clientId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setClientId(String newClientId)
  {
    String oldClientId = clientId;
    clientId = newClientId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.OAUTH2__CLIENT_ID, oldClientId, clientId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getClientSecret()
  {
    return clientSecret;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setClientSecret(String newClientSecret)
  {
    String oldClientSecret = clientSecret;
    clientSecret = newClientSecret;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.OAUTH2__CLIENT_SECRET, oldClientSecret, clientSecret));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTokenUrl()
  {
    return tokenUrl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTokenUrl(String newTokenUrl)
  {
    String oldTokenUrl = tokenUrl;
    tokenUrl = newTokenUrl;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.OAUTH2__TOKEN_URL, oldTokenUrl, tokenUrl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAccessToken()
  {
    return accessToken;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAccessToken(String newAccessToken)
  {
    String oldAccessToken = accessToken;
    accessToken = newAccessToken;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.OAUTH2__ACCESS_TOKEN, oldAccessToken, accessToken));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getScope()
  {
    return scope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setScope(String newScope)
  {
    String oldScope = scope;
    scope = newScope;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.OAUTH2__SCOPE, oldScope, scope));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.OAUTH2__CLIENT_ID:
        return getClientId();
      case WorkflowPackage.OAUTH2__CLIENT_SECRET:
        return getClientSecret();
      case WorkflowPackage.OAUTH2__TOKEN_URL:
        return getTokenUrl();
      case WorkflowPackage.OAUTH2__ACCESS_TOKEN:
        return getAccessToken();
      case WorkflowPackage.OAUTH2__SCOPE:
        return getScope();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.OAUTH2__CLIENT_ID:
        setClientId((String)newValue);
        return;
      case WorkflowPackage.OAUTH2__CLIENT_SECRET:
        setClientSecret((String)newValue);
        return;
      case WorkflowPackage.OAUTH2__TOKEN_URL:
        setTokenUrl((String)newValue);
        return;
      case WorkflowPackage.OAUTH2__ACCESS_TOKEN:
        setAccessToken((String)newValue);
        return;
      case WorkflowPackage.OAUTH2__SCOPE:
        setScope((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.OAUTH2__CLIENT_ID:
        setClientId(CLIENT_ID_EDEFAULT);
        return;
      case WorkflowPackage.OAUTH2__CLIENT_SECRET:
        setClientSecret(CLIENT_SECRET_EDEFAULT);
        return;
      case WorkflowPackage.OAUTH2__TOKEN_URL:
        setTokenUrl(TOKEN_URL_EDEFAULT);
        return;
      case WorkflowPackage.OAUTH2__ACCESS_TOKEN:
        setAccessToken(ACCESS_TOKEN_EDEFAULT);
        return;
      case WorkflowPackage.OAUTH2__SCOPE:
        setScope(SCOPE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.OAUTH2__CLIENT_ID:
        return CLIENT_ID_EDEFAULT == null ? clientId != null : !CLIENT_ID_EDEFAULT.equals(clientId);
      case WorkflowPackage.OAUTH2__CLIENT_SECRET:
        return CLIENT_SECRET_EDEFAULT == null ? clientSecret != null : !CLIENT_SECRET_EDEFAULT.equals(clientSecret);
      case WorkflowPackage.OAUTH2__TOKEN_URL:
        return TOKEN_URL_EDEFAULT == null ? tokenUrl != null : !TOKEN_URL_EDEFAULT.equals(tokenUrl);
      case WorkflowPackage.OAUTH2__ACCESS_TOKEN:
        return ACCESS_TOKEN_EDEFAULT == null ? accessToken != null : !ACCESS_TOKEN_EDEFAULT.equals(accessToken);
      case WorkflowPackage.OAUTH2__SCOPE:
        return SCOPE_EDEFAULT == null ? scope != null : !SCOPE_EDEFAULT.equals(scope);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (clientId: ");
    result.append(clientId);
    result.append(", clientSecret: ");
    result.append(clientSecret);
    result.append(", tokenUrl: ");
    result.append(tokenUrl);
    result.append(", accessToken: ");
    result.append(accessToken);
    result.append(", scope: ");
    result.append(scope);
    result.append(')');
    return result.toString();
  }

} //OAuth2Impl
