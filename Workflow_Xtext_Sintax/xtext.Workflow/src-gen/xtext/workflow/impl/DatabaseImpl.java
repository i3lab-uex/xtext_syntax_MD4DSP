/**
 * generated by Xtext 2.40.0
 */
package xtext.workflow.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.workflow.Authentication;
import xtext.workflow.DBTYPE;
import xtext.workflow.Database;
import xtext.workflow.Table;
import xtext.workflow.WorkflowPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Database</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.workflow.impl.DatabaseImpl#getHost <em>Host</em>}</li>
 *   <li>{@link xtext.workflow.impl.DatabaseImpl#getPort <em>Port</em>}</li>
 *   <li>{@link xtext.workflow.impl.DatabaseImpl#getType <em>Type</em>}</li>
 *   <li>{@link xtext.workflow.impl.DatabaseImpl#getAuth <em>Auth</em>}</li>
 *   <li>{@link xtext.workflow.impl.DatabaseImpl#getDbName <em>Db Name</em>}</li>
 *   <li>{@link xtext.workflow.impl.DatabaseImpl#getTable <em>Table</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DatabaseImpl extends StorageImpl implements Database
{
  /**
   * The default value of the '{@link #getHost() <em>Host</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHost()
   * @generated
   * @ordered
   */
  protected static final String HOST_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getHost() <em>Host</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHost()
   * @generated
   * @ordered
   */
  protected String host = HOST_EDEFAULT;

  /**
   * The default value of the '{@link #getPort() <em>Port</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPort()
   * @generated
   * @ordered
   */
  protected static final String PORT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPort() <em>Port</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPort()
   * @generated
   * @ordered
   */
  protected String port = PORT_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final DBTYPE TYPE_EDEFAULT = DBTYPE.MYSQL;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected DBTYPE type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getAuth() <em>Auth</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAuth()
   * @generated
   * @ordered
   */
  protected Authentication auth;

  /**
   * The default value of the '{@link #getDbName() <em>Db Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDbName()
   * @generated
   * @ordered
   */
  protected static final String DB_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDbName() <em>Db Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDbName()
   * @generated
   * @ordered
   */
  protected String dbName = DB_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getTable() <em>Table</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTable()
   * @generated
   * @ordered
   */
  protected EList<Table> table;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DatabaseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.DATABASE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getHost()
  {
    return host;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHost(String newHost)
  {
    String oldHost = host;
    host = newHost;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.DATABASE__HOST, oldHost, host));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPort()
  {
    return port;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPort(String newPort)
  {
    String oldPort = port;
    port = newPort;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.DATABASE__PORT, oldPort, port));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DBTYPE getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(DBTYPE newType)
  {
    DBTYPE oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.DATABASE__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Authentication getAuth()
  {
    return auth;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAuth(Authentication newAuth, NotificationChain msgs)
  {
    Authentication oldAuth = auth;
    auth = newAuth;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WorkflowPackage.DATABASE__AUTH, oldAuth, newAuth);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAuth(Authentication newAuth)
  {
    if (newAuth != auth)
    {
      NotificationChain msgs = null;
      if (auth != null)
        msgs = ((InternalEObject)auth).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WorkflowPackage.DATABASE__AUTH, null, msgs);
      if (newAuth != null)
        msgs = ((InternalEObject)newAuth).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WorkflowPackage.DATABASE__AUTH, null, msgs);
      msgs = basicSetAuth(newAuth, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.DATABASE__AUTH, newAuth, newAuth));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDbName()
  {
    return dbName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDbName(String newDbName)
  {
    String oldDbName = dbName;
    dbName = newDbName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.DATABASE__DB_NAME, oldDbName, dbName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Table> getTable()
  {
    if (table == null)
    {
      table = new EObjectContainmentEList<Table>(Table.class, this, WorkflowPackage.DATABASE__TABLE);
    }
    return table;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WorkflowPackage.DATABASE__AUTH:
        return basicSetAuth(null, msgs);
      case WorkflowPackage.DATABASE__TABLE:
        return ((InternalEList<?>)getTable()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.DATABASE__HOST:
        return getHost();
      case WorkflowPackage.DATABASE__PORT:
        return getPort();
      case WorkflowPackage.DATABASE__TYPE:
        return getType();
      case WorkflowPackage.DATABASE__AUTH:
        return getAuth();
      case WorkflowPackage.DATABASE__DB_NAME:
        return getDbName();
      case WorkflowPackage.DATABASE__TABLE:
        return getTable();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.DATABASE__HOST:
        setHost((String)newValue);
        return;
      case WorkflowPackage.DATABASE__PORT:
        setPort((String)newValue);
        return;
      case WorkflowPackage.DATABASE__TYPE:
        setType((DBTYPE)newValue);
        return;
      case WorkflowPackage.DATABASE__AUTH:
        setAuth((Authentication)newValue);
        return;
      case WorkflowPackage.DATABASE__DB_NAME:
        setDbName((String)newValue);
        return;
      case WorkflowPackage.DATABASE__TABLE:
        getTable().clear();
        getTable().addAll((Collection<? extends Table>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.DATABASE__HOST:
        setHost(HOST_EDEFAULT);
        return;
      case WorkflowPackage.DATABASE__PORT:
        setPort(PORT_EDEFAULT);
        return;
      case WorkflowPackage.DATABASE__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case WorkflowPackage.DATABASE__AUTH:
        setAuth((Authentication)null);
        return;
      case WorkflowPackage.DATABASE__DB_NAME:
        setDbName(DB_NAME_EDEFAULT);
        return;
      case WorkflowPackage.DATABASE__TABLE:
        getTable().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.DATABASE__HOST:
        return HOST_EDEFAULT == null ? host != null : !HOST_EDEFAULT.equals(host);
      case WorkflowPackage.DATABASE__PORT:
        return PORT_EDEFAULT == null ? port != null : !PORT_EDEFAULT.equals(port);
      case WorkflowPackage.DATABASE__TYPE:
        return type != TYPE_EDEFAULT;
      case WorkflowPackage.DATABASE__AUTH:
        return auth != null;
      case WorkflowPackage.DATABASE__DB_NAME:
        return DB_NAME_EDEFAULT == null ? dbName != null : !DB_NAME_EDEFAULT.equals(dbName);
      case WorkflowPackage.DATABASE__TABLE:
        return table != null && !table.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (host: ");
    result.append(host);
    result.append(", port: ");
    result.append(port);
    result.append(", type: ");
    result.append(type);
    result.append(", dbName: ");
    result.append(dbName);
    result.append(')');
    return result.toString();
  }

} //DatabaseImpl
