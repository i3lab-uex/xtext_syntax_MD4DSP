/**
 * generated by Xtext 2.40.0
 */
package xtext.workflow.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.workflow.DataField;
import xtext.workflow.DataType;
import xtext.workflow.ValueField;
import xtext.workflow.WorkflowPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Data Field</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.workflow.impl.DataFieldImpl#isId <em>Id</em>}</li>
 *   <li>{@link xtext.workflow.impl.DataFieldImpl#getDataType <em>Data Type</em>}</li>
 *   <li>{@link xtext.workflow.impl.DataFieldImpl#isTarget <em>Target</em>}</li>
 *   <li>{@link xtext.workflow.impl.DataFieldImpl#getDisplayName <em>Display Name</em>}</li>
 *   <li>{@link xtext.workflow.impl.DataFieldImpl#getValidValues <em>Valid Values</em>}</li>
 *   <li>{@link xtext.workflow.impl.DataFieldImpl#getInvalidValues <em>Invalid Values</em>}</li>
 *   <li>{@link xtext.workflow.impl.DataFieldImpl#getMissingValues <em>Missing Values</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DataFieldImpl extends ArgumentImpl implements DataField
{
  /**
   * The default value of the '{@link #isId() <em>Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isId()
   * @generated
   * @ordered
   */
  protected static final boolean ID_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isId() <em>Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isId()
   * @generated
   * @ordered
   */
  protected boolean id = ID_EDEFAULT;

  /**
   * The default value of the '{@link #getDataType() <em>Data Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataType()
   * @generated
   * @ordered
   */
  protected static final DataType DATA_TYPE_EDEFAULT = DataType.STRING;

  /**
   * The cached value of the '{@link #getDataType() <em>Data Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataType()
   * @generated
   * @ordered
   */
  protected DataType dataType = DATA_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #isTarget() <em>Target</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTarget()
   * @generated
   * @ordered
   */
  protected static final boolean TARGET_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isTarget() <em>Target</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTarget()
   * @generated
   * @ordered
   */
  protected boolean target = TARGET_EDEFAULT;

  /**
   * The default value of the '{@link #getDisplayName() <em>Display Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDisplayName()
   * @generated
   * @ordered
   */
  protected static final String DISPLAY_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDisplayName() <em>Display Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDisplayName()
   * @generated
   * @ordered
   */
  protected String displayName = DISPLAY_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getValidValues() <em>Valid Values</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValidValues()
   * @generated
   * @ordered
   */
  protected EList<ValueField> validValues;

  /**
   * The cached value of the '{@link #getInvalidValues() <em>Invalid Values</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInvalidValues()
   * @generated
   * @ordered
   */
  protected EList<ValueField> invalidValues;

  /**
   * The cached value of the '{@link #getMissingValues() <em>Missing Values</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMissingValues()
   * @generated
   * @ordered
   */
  protected EList<ValueField> missingValues;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DataFieldImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.DATA_FIELD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isId()
  {
    return id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setId(boolean newId)
  {
    boolean oldId = id;
    id = newId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.DATA_FIELD__ID, oldId, id));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataType getDataType()
  {
    return dataType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDataType(DataType newDataType)
  {
    DataType oldDataType = dataType;
    dataType = newDataType == null ? DATA_TYPE_EDEFAULT : newDataType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.DATA_FIELD__DATA_TYPE, oldDataType, dataType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTarget(boolean newTarget)
  {
    boolean oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.DATA_FIELD__TARGET, oldTarget, target));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDisplayName()
  {
    return displayName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDisplayName(String newDisplayName)
  {
    String oldDisplayName = displayName;
    displayName = newDisplayName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.DATA_FIELD__DISPLAY_NAME, oldDisplayName, displayName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ValueField> getValidValues()
  {
    if (validValues == null)
    {
      validValues = new EObjectContainmentEList<ValueField>(ValueField.class, this, WorkflowPackage.DATA_FIELD__VALID_VALUES);
    }
    return validValues;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ValueField> getInvalidValues()
  {
    if (invalidValues == null)
    {
      invalidValues = new EObjectContainmentEList<ValueField>(ValueField.class, this, WorkflowPackage.DATA_FIELD__INVALID_VALUES);
    }
    return invalidValues;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ValueField> getMissingValues()
  {
    if (missingValues == null)
    {
      missingValues = new EObjectContainmentEList<ValueField>(ValueField.class, this, WorkflowPackage.DATA_FIELD__MISSING_VALUES);
    }
    return missingValues;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WorkflowPackage.DATA_FIELD__VALID_VALUES:
        return ((InternalEList<?>)getValidValues()).basicRemove(otherEnd, msgs);
      case WorkflowPackage.DATA_FIELD__INVALID_VALUES:
        return ((InternalEList<?>)getInvalidValues()).basicRemove(otherEnd, msgs);
      case WorkflowPackage.DATA_FIELD__MISSING_VALUES:
        return ((InternalEList<?>)getMissingValues()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.DATA_FIELD__ID:
        return isId();
      case WorkflowPackage.DATA_FIELD__DATA_TYPE:
        return getDataType();
      case WorkflowPackage.DATA_FIELD__TARGET:
        return isTarget();
      case WorkflowPackage.DATA_FIELD__DISPLAY_NAME:
        return getDisplayName();
      case WorkflowPackage.DATA_FIELD__VALID_VALUES:
        return getValidValues();
      case WorkflowPackage.DATA_FIELD__INVALID_VALUES:
        return getInvalidValues();
      case WorkflowPackage.DATA_FIELD__MISSING_VALUES:
        return getMissingValues();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.DATA_FIELD__ID:
        setId((Boolean)newValue);
        return;
      case WorkflowPackage.DATA_FIELD__DATA_TYPE:
        setDataType((DataType)newValue);
        return;
      case WorkflowPackage.DATA_FIELD__TARGET:
        setTarget((Boolean)newValue);
        return;
      case WorkflowPackage.DATA_FIELD__DISPLAY_NAME:
        setDisplayName((String)newValue);
        return;
      case WorkflowPackage.DATA_FIELD__VALID_VALUES:
        getValidValues().clear();
        getValidValues().addAll((Collection<? extends ValueField>)newValue);
        return;
      case WorkflowPackage.DATA_FIELD__INVALID_VALUES:
        getInvalidValues().clear();
        getInvalidValues().addAll((Collection<? extends ValueField>)newValue);
        return;
      case WorkflowPackage.DATA_FIELD__MISSING_VALUES:
        getMissingValues().clear();
        getMissingValues().addAll((Collection<? extends ValueField>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.DATA_FIELD__ID:
        setId(ID_EDEFAULT);
        return;
      case WorkflowPackage.DATA_FIELD__DATA_TYPE:
        setDataType(DATA_TYPE_EDEFAULT);
        return;
      case WorkflowPackage.DATA_FIELD__TARGET:
        setTarget(TARGET_EDEFAULT);
        return;
      case WorkflowPackage.DATA_FIELD__DISPLAY_NAME:
        setDisplayName(DISPLAY_NAME_EDEFAULT);
        return;
      case WorkflowPackage.DATA_FIELD__VALID_VALUES:
        getValidValues().clear();
        return;
      case WorkflowPackage.DATA_FIELD__INVALID_VALUES:
        getInvalidValues().clear();
        return;
      case WorkflowPackage.DATA_FIELD__MISSING_VALUES:
        getMissingValues().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.DATA_FIELD__ID:
        return id != ID_EDEFAULT;
      case WorkflowPackage.DATA_FIELD__DATA_TYPE:
        return dataType != DATA_TYPE_EDEFAULT;
      case WorkflowPackage.DATA_FIELD__TARGET:
        return target != TARGET_EDEFAULT;
      case WorkflowPackage.DATA_FIELD__DISPLAY_NAME:
        return DISPLAY_NAME_EDEFAULT == null ? displayName != null : !DISPLAY_NAME_EDEFAULT.equals(displayName);
      case WorkflowPackage.DATA_FIELD__VALID_VALUES:
        return validValues != null && !validValues.isEmpty();
      case WorkflowPackage.DATA_FIELD__INVALID_VALUES:
        return invalidValues != null && !invalidValues.isEmpty();
      case WorkflowPackage.DATA_FIELD__MISSING_VALUES:
        return missingValues != null && !missingValues.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (id: ");
    result.append(id);
    result.append(", dataType: ");
    result.append(dataType);
    result.append(", target: ");
    result.append(target);
    result.append(", displayName: ");
    result.append(displayName);
    result.append(')');
    return result.toString();
  }

} //DataFieldImpl
