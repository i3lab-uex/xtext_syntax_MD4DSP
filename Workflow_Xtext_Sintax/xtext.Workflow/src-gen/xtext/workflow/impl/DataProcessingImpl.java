/**
 * generated by Xtext 2.40.0
 */
package xtext.workflow.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.workflow.Contract;
import xtext.workflow.DataProcessing;
import xtext.workflow.Parameter;
import xtext.workflow.WorkflowPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Data Processing</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.workflow.impl.DataProcessingImpl#getParameter <em>Parameter</em>}</li>
 *   <li>{@link xtext.workflow.impl.DataProcessingImpl#getContract <em>Contract</em>}</li>
 *   <li>{@link xtext.workflow.impl.DataProcessingImpl#getInitial_accumulated_processing <em>Initial accumulated processing</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DataProcessingImpl extends ProcessingStepImpl implements DataProcessing
{
  /**
   * The cached value of the '{@link #getParameter() <em>Parameter</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameter()
   * @generated
   * @ordered
   */
  protected EList<Parameter> parameter;

  /**
   * The cached value of the '{@link #getContract() <em>Contract</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContract()
   * @generated
   * @ordered
   */
  protected EList<Contract> contract;

  /**
   * The cached value of the '{@link #getInitial_accumulated_processing() <em>Initial accumulated processing</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitial_accumulated_processing()
   * @generated
   * @ordered
   */
  protected DataProcessing initial_accumulated_processing;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DataProcessingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.DATA_PROCESSING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Parameter> getParameter()
  {
    if (parameter == null)
    {
      parameter = new EObjectContainmentEList<Parameter>(Parameter.class, this, WorkflowPackage.DATA_PROCESSING__PARAMETER);
    }
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Contract> getContract()
  {
    if (contract == null)
    {
      contract = new EObjectContainmentEList<Contract>(Contract.class, this, WorkflowPackage.DATA_PROCESSING__CONTRACT);
    }
    return contract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataProcessing getInitial_accumulated_processing()
  {
    if (initial_accumulated_processing != null && initial_accumulated_processing.eIsProxy())
    {
      InternalEObject oldInitial_accumulated_processing = (InternalEObject)initial_accumulated_processing;
      initial_accumulated_processing = (DataProcessing)eResolveProxy(oldInitial_accumulated_processing);
      if (initial_accumulated_processing != oldInitial_accumulated_processing)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, WorkflowPackage.DATA_PROCESSING__INITIAL_ACCUMULATED_PROCESSING, oldInitial_accumulated_processing, initial_accumulated_processing));
      }
    }
    return initial_accumulated_processing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataProcessing basicGetInitial_accumulated_processing()
  {
    return initial_accumulated_processing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInitial_accumulated_processing(DataProcessing newInitial_accumulated_processing)
  {
    DataProcessing oldInitial_accumulated_processing = initial_accumulated_processing;
    initial_accumulated_processing = newInitial_accumulated_processing;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.DATA_PROCESSING__INITIAL_ACCUMULATED_PROCESSING, oldInitial_accumulated_processing, initial_accumulated_processing));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WorkflowPackage.DATA_PROCESSING__PARAMETER:
        return ((InternalEList<?>)getParameter()).basicRemove(otherEnd, msgs);
      case WorkflowPackage.DATA_PROCESSING__CONTRACT:
        return ((InternalEList<?>)getContract()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.DATA_PROCESSING__PARAMETER:
        return getParameter();
      case WorkflowPackage.DATA_PROCESSING__CONTRACT:
        return getContract();
      case WorkflowPackage.DATA_PROCESSING__INITIAL_ACCUMULATED_PROCESSING:
        if (resolve) return getInitial_accumulated_processing();
        return basicGetInitial_accumulated_processing();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.DATA_PROCESSING__PARAMETER:
        getParameter().clear();
        getParameter().addAll((Collection<? extends Parameter>)newValue);
        return;
      case WorkflowPackage.DATA_PROCESSING__CONTRACT:
        getContract().clear();
        getContract().addAll((Collection<? extends Contract>)newValue);
        return;
      case WorkflowPackage.DATA_PROCESSING__INITIAL_ACCUMULATED_PROCESSING:
        setInitial_accumulated_processing((DataProcessing)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.DATA_PROCESSING__PARAMETER:
        getParameter().clear();
        return;
      case WorkflowPackage.DATA_PROCESSING__CONTRACT:
        getContract().clear();
        return;
      case WorkflowPackage.DATA_PROCESSING__INITIAL_ACCUMULATED_PROCESSING:
        setInitial_accumulated_processing((DataProcessing)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.DATA_PROCESSING__PARAMETER:
        return parameter != null && !parameter.isEmpty();
      case WorkflowPackage.DATA_PROCESSING__CONTRACT:
        return contract != null && !contract.isEmpty();
      case WorkflowPackage.DATA_PROCESSING__INITIAL_ACCUMULATED_PROCESSING:
        return initial_accumulated_processing != null;
    }
    return super.eIsSet(featureID);
  }

} //DataProcessingImpl
