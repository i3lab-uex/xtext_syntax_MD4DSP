/**
 * generated by Xtext 2.40.0
 */
package xtext.workflow.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.workflow.FilterType;
import xtext.workflow.FilterValue;
import xtext.workflow.MatchingValue;
import xtext.workflow.Primitive;
import xtext.workflow.WorkflowPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Filter Value</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.workflow.impl.FilterValueImpl#getName <em>Name</em>}</li>
 *   <li>{@link xtext.workflow.impl.FilterValueImpl#getFilterValueDef <em>Filter Value Def</em>}</li>
 *   <li>{@link xtext.workflow.impl.FilterValueImpl#getPrimitive <em>Primitive</em>}</li>
 *   <li>{@link xtext.workflow.impl.FilterValueImpl#getMatchingvalue <em>Matchingvalue</em>}</li>
 *   <li>{@link xtext.workflow.impl.FilterValueImpl#getFilterType <em>Filter Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FilterValueImpl extends ParameterImpl implements FilterValue
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getFilterValueDef() <em>Filter Value Def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFilterValueDef()
   * @generated
   * @ordered
   */
  protected static final String FILTER_VALUE_DEF_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFilterValueDef() <em>Filter Value Def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFilterValueDef()
   * @generated
   * @ordered
   */
  protected String filterValueDef = FILTER_VALUE_DEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getPrimitive() <em>Primitive</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrimitive()
   * @generated
   * @ordered
   */
  protected EList<Primitive> primitive;

  /**
   * The cached value of the '{@link #getMatchingvalue() <em>Matchingvalue</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMatchingvalue()
   * @generated
   * @ordered
   */
  protected EList<MatchingValue> matchingvalue;

  /**
   * The default value of the '{@link #getFilterType() <em>Filter Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFilterType()
   * @generated
   * @ordered
   */
  protected static final FilterType FILTER_TYPE_EDEFAULT = FilterType.EXCLUDE;

  /**
   * The cached value of the '{@link #getFilterType() <em>Filter Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFilterType()
   * @generated
   * @ordered
   */
  protected FilterType filterType = FILTER_TYPE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FilterValueImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.FILTER_VALUE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.FILTER_VALUE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFilterValueDef()
  {
    return filterValueDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFilterValueDef(String newFilterValueDef)
  {
    String oldFilterValueDef = filterValueDef;
    filterValueDef = newFilterValueDef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.FILTER_VALUE__FILTER_VALUE_DEF, oldFilterValueDef, filterValueDef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Primitive> getPrimitive()
  {
    if (primitive == null)
    {
      primitive = new EObjectContainmentEList<Primitive>(Primitive.class, this, WorkflowPackage.FILTER_VALUE__PRIMITIVE);
    }
    return primitive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MatchingValue> getMatchingvalue()
  {
    if (matchingvalue == null)
    {
      matchingvalue = new EObjectContainmentEList<MatchingValue>(MatchingValue.class, this, WorkflowPackage.FILTER_VALUE__MATCHINGVALUE);
    }
    return matchingvalue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FilterType getFilterType()
  {
    return filterType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFilterType(FilterType newFilterType)
  {
    FilterType oldFilterType = filterType;
    filterType = newFilterType == null ? FILTER_TYPE_EDEFAULT : newFilterType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.FILTER_VALUE__FILTER_TYPE, oldFilterType, filterType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WorkflowPackage.FILTER_VALUE__PRIMITIVE:
        return ((InternalEList<?>)getPrimitive()).basicRemove(otherEnd, msgs);
      case WorkflowPackage.FILTER_VALUE__MATCHINGVALUE:
        return ((InternalEList<?>)getMatchingvalue()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.FILTER_VALUE__NAME:
        return getName();
      case WorkflowPackage.FILTER_VALUE__FILTER_VALUE_DEF:
        return getFilterValueDef();
      case WorkflowPackage.FILTER_VALUE__PRIMITIVE:
        return getPrimitive();
      case WorkflowPackage.FILTER_VALUE__MATCHINGVALUE:
        return getMatchingvalue();
      case WorkflowPackage.FILTER_VALUE__FILTER_TYPE:
        return getFilterType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.FILTER_VALUE__NAME:
        setName((String)newValue);
        return;
      case WorkflowPackage.FILTER_VALUE__FILTER_VALUE_DEF:
        setFilterValueDef((String)newValue);
        return;
      case WorkflowPackage.FILTER_VALUE__PRIMITIVE:
        getPrimitive().clear();
        getPrimitive().addAll((Collection<? extends Primitive>)newValue);
        return;
      case WorkflowPackage.FILTER_VALUE__MATCHINGVALUE:
        getMatchingvalue().clear();
        getMatchingvalue().addAll((Collection<? extends MatchingValue>)newValue);
        return;
      case WorkflowPackage.FILTER_VALUE__FILTER_TYPE:
        setFilterType((FilterType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.FILTER_VALUE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case WorkflowPackage.FILTER_VALUE__FILTER_VALUE_DEF:
        setFilterValueDef(FILTER_VALUE_DEF_EDEFAULT);
        return;
      case WorkflowPackage.FILTER_VALUE__PRIMITIVE:
        getPrimitive().clear();
        return;
      case WorkflowPackage.FILTER_VALUE__MATCHINGVALUE:
        getMatchingvalue().clear();
        return;
      case WorkflowPackage.FILTER_VALUE__FILTER_TYPE:
        setFilterType(FILTER_TYPE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.FILTER_VALUE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case WorkflowPackage.FILTER_VALUE__FILTER_VALUE_DEF:
        return FILTER_VALUE_DEF_EDEFAULT == null ? filterValueDef != null : !FILTER_VALUE_DEF_EDEFAULT.equals(filterValueDef);
      case WorkflowPackage.FILTER_VALUE__PRIMITIVE:
        return primitive != null && !primitive.isEmpty();
      case WorkflowPackage.FILTER_VALUE__MATCHINGVALUE:
        return matchingvalue != null && !matchingvalue.isEmpty();
      case WorkflowPackage.FILTER_VALUE__FILTER_TYPE:
        return filterType != FILTER_TYPE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", filterValueDef: ");
    result.append(filterValueDef);
    result.append(", filterType: ");
    result.append(filterType);
    result.append(')');
    return result.toString();
  }

} //FilterValueImpl
