/**
 * generated by Xtext 2.40.0
 */
package xtext.workflow.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xtext.workflow.SSL;
import xtext.workflow.WorkflowPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>SSL</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.workflow.impl.SSLImpl#getPath_sslcert <em>Path sslcert</em>}</li>
 *   <li>{@link xtext.workflow.impl.SSLImpl#getPath_sslkey <em>Path sslkey</em>}</li>
 *   <li>{@link xtext.workflow.impl.SSLImpl#getPath_sslrootcert <em>Path sslrootcert</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SSLImpl extends AuthenticationImpl implements SSL
{
  /**
   * The default value of the '{@link #getPath_sslcert() <em>Path sslcert</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPath_sslcert()
   * @generated
   * @ordered
   */
  protected static final String PATH_SSLCERT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPath_sslcert() <em>Path sslcert</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPath_sslcert()
   * @generated
   * @ordered
   */
  protected String path_sslcert = PATH_SSLCERT_EDEFAULT;

  /**
   * The default value of the '{@link #getPath_sslkey() <em>Path sslkey</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPath_sslkey()
   * @generated
   * @ordered
   */
  protected static final String PATH_SSLKEY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPath_sslkey() <em>Path sslkey</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPath_sslkey()
   * @generated
   * @ordered
   */
  protected String path_sslkey = PATH_SSLKEY_EDEFAULT;

  /**
   * The default value of the '{@link #getPath_sslrootcert() <em>Path sslrootcert</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPath_sslrootcert()
   * @generated
   * @ordered
   */
  protected static final String PATH_SSLROOTCERT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPath_sslrootcert() <em>Path sslrootcert</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPath_sslrootcert()
   * @generated
   * @ordered
   */
  protected String path_sslrootcert = PATH_SSLROOTCERT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SSLImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.SSL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPath_sslcert()
  {
    return path_sslcert;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPath_sslcert(String newPath_sslcert)
  {
    String oldPath_sslcert = path_sslcert;
    path_sslcert = newPath_sslcert;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.SSL__PATH_SSLCERT, oldPath_sslcert, path_sslcert));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPath_sslkey()
  {
    return path_sslkey;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPath_sslkey(String newPath_sslkey)
  {
    String oldPath_sslkey = path_sslkey;
    path_sslkey = newPath_sslkey;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.SSL__PATH_SSLKEY, oldPath_sslkey, path_sslkey));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPath_sslrootcert()
  {
    return path_sslrootcert;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPath_sslrootcert(String newPath_sslrootcert)
  {
    String oldPath_sslrootcert = path_sslrootcert;
    path_sslrootcert = newPath_sslrootcert;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.SSL__PATH_SSLROOTCERT, oldPath_sslrootcert, path_sslrootcert));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.SSL__PATH_SSLCERT:
        return getPath_sslcert();
      case WorkflowPackage.SSL__PATH_SSLKEY:
        return getPath_sslkey();
      case WorkflowPackage.SSL__PATH_SSLROOTCERT:
        return getPath_sslrootcert();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.SSL__PATH_SSLCERT:
        setPath_sslcert((String)newValue);
        return;
      case WorkflowPackage.SSL__PATH_SSLKEY:
        setPath_sslkey((String)newValue);
        return;
      case WorkflowPackage.SSL__PATH_SSLROOTCERT:
        setPath_sslrootcert((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.SSL__PATH_SSLCERT:
        setPath_sslcert(PATH_SSLCERT_EDEFAULT);
        return;
      case WorkflowPackage.SSL__PATH_SSLKEY:
        setPath_sslkey(PATH_SSLKEY_EDEFAULT);
        return;
      case WorkflowPackage.SSL__PATH_SSLROOTCERT:
        setPath_sslrootcert(PATH_SSLROOTCERT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.SSL__PATH_SSLCERT:
        return PATH_SSLCERT_EDEFAULT == null ? path_sslcert != null : !PATH_SSLCERT_EDEFAULT.equals(path_sslcert);
      case WorkflowPackage.SSL__PATH_SSLKEY:
        return PATH_SSLKEY_EDEFAULT == null ? path_sslkey != null : !PATH_SSLKEY_EDEFAULT.equals(path_sslkey);
      case WorkflowPackage.SSL__PATH_SSLROOTCERT:
        return PATH_SSLROOTCERT_EDEFAULT == null ? path_sslrootcert != null : !PATH_SSLROOTCERT_EDEFAULT.equals(path_sslrootcert);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (path_sslcert: ");
    result.append(path_sslcert);
    result.append(", path_sslkey: ");
    result.append(path_sslkey);
    result.append(", path_sslrootcert: ");
    result.append(path_sslrootcert);
    result.append(')');
    return result.toString();
  }

} //SSLImpl
