/**
 * generated by Xtext 2.39.0
 */
package xtext.workflow.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.workflow.MathOp;
import xtext.workflow.MathOperator;
import xtext.workflow.Operand;
import xtext.workflow.WorkflowPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Math Op</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.workflow.impl.MathOpImpl#getName <em>Name</em>}</li>
 *   <li>{@link xtext.workflow.impl.MathOpImpl#getMathOpDef <em>Math Op Def</em>}</li>
 *   <li>{@link xtext.workflow.impl.MathOpImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link xtext.workflow.impl.MathOpImpl#getOperand <em>Operand</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MathOpImpl extends ParameterImpl implements MathOp
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getMathOpDef() <em>Math Op Def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMathOpDef()
   * @generated
   * @ordered
   */
  protected static final String MATH_OP_DEF_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMathOpDef() <em>Math Op Def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMathOpDef()
   * @generated
   * @ordered
   */
  protected String mathOpDef = MATH_OP_DEF_EDEFAULT;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final MathOperator OPERATOR_EDEFAULT = MathOperator.SUM;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected MathOperator operator = OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getOperand() <em>Operand</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperand()
   * @generated
   * @ordered
   */
  protected EList<Operand> operand;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MathOpImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.MATH_OP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.MATH_OP__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMathOpDef()
  {
    return mathOpDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMathOpDef(String newMathOpDef)
  {
    String oldMathOpDef = mathOpDef;
    mathOpDef = newMathOpDef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.MATH_OP__MATH_OP_DEF, oldMathOpDef, mathOpDef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathOperator getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(MathOperator newOperator)
  {
    MathOperator oldOperator = operator;
    operator = newOperator == null ? OPERATOR_EDEFAULT : newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.MATH_OP__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Operand> getOperand()
  {
    if (operand == null)
    {
      operand = new EObjectContainmentEList<Operand>(Operand.class, this, WorkflowPackage.MATH_OP__OPERAND);
    }
    return operand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WorkflowPackage.MATH_OP__OPERAND:
        return ((InternalEList<?>)getOperand()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.MATH_OP__NAME:
        return getName();
      case WorkflowPackage.MATH_OP__MATH_OP_DEF:
        return getMathOpDef();
      case WorkflowPackage.MATH_OP__OPERATOR:
        return getOperator();
      case WorkflowPackage.MATH_OP__OPERAND:
        return getOperand();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.MATH_OP__NAME:
        setName((String)newValue);
        return;
      case WorkflowPackage.MATH_OP__MATH_OP_DEF:
        setMathOpDef((String)newValue);
        return;
      case WorkflowPackage.MATH_OP__OPERATOR:
        setOperator((MathOperator)newValue);
        return;
      case WorkflowPackage.MATH_OP__OPERAND:
        getOperand().clear();
        getOperand().addAll((Collection<? extends Operand>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.MATH_OP__NAME:
        setName(NAME_EDEFAULT);
        return;
      case WorkflowPackage.MATH_OP__MATH_OP_DEF:
        setMathOpDef(MATH_OP_DEF_EDEFAULT);
        return;
      case WorkflowPackage.MATH_OP__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
      case WorkflowPackage.MATH_OP__OPERAND:
        getOperand().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.MATH_OP__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case WorkflowPackage.MATH_OP__MATH_OP_DEF:
        return MATH_OP_DEF_EDEFAULT == null ? mathOpDef != null : !MATH_OP_DEF_EDEFAULT.equals(mathOpDef);
      case WorkflowPackage.MATH_OP__OPERATOR:
        return operator != OPERATOR_EDEFAULT;
      case WorkflowPackage.MATH_OP__OPERAND:
        return operand != null && !operand.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", mathOpDef: ");
    result.append(mathOpDef);
    result.append(", operator: ");
    result.append(operator);
    result.append(')');
    return result.toString();
  }

} //MathOpImpl
