/**
 * generated by Xtext 2.39.0
 */
package xtext.workflow.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xtext.workflow.AWS;
import xtext.workflow.WorkflowPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>AWS</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.workflow.impl.AWSImpl#getRegion <em>Region</em>}</li>
 *   <li>{@link xtext.workflow.impl.AWSImpl#getAccessKey <em>Access Key</em>}</li>
 *   <li>{@link xtext.workflow.impl.AWSImpl#getEndpointURL <em>Endpoint URL</em>}</li>
 *   <li>{@link xtext.workflow.impl.AWSImpl#getSecretId <em>Secret Id</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AWSImpl extends AuthenticationImpl implements AWS
{
  /**
   * The default value of the '{@link #getRegion() <em>Region</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRegion()
   * @generated
   * @ordered
   */
  protected static final String REGION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRegion() <em>Region</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRegion()
   * @generated
   * @ordered
   */
  protected String region = REGION_EDEFAULT;

  /**
   * The default value of the '{@link #getAccessKey() <em>Access Key</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAccessKey()
   * @generated
   * @ordered
   */
  protected static final String ACCESS_KEY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAccessKey() <em>Access Key</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAccessKey()
   * @generated
   * @ordered
   */
  protected String accessKey = ACCESS_KEY_EDEFAULT;

  /**
   * The default value of the '{@link #getEndpointURL() <em>Endpoint URL</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndpointURL()
   * @generated
   * @ordered
   */
  protected static final String ENDPOINT_URL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEndpointURL() <em>Endpoint URL</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndpointURL()
   * @generated
   * @ordered
   */
  protected String endpointURL = ENDPOINT_URL_EDEFAULT;

  /**
   * The default value of the '{@link #getSecretId() <em>Secret Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSecretId()
   * @generated
   * @ordered
   */
  protected static final String SECRET_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSecretId() <em>Secret Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSecretId()
   * @generated
   * @ordered
   */
  protected String secretId = SECRET_ID_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AWSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.AWS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRegion()
  {
    return region;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRegion(String newRegion)
  {
    String oldRegion = region;
    region = newRegion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.AWS__REGION, oldRegion, region));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAccessKey()
  {
    return accessKey;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAccessKey(String newAccessKey)
  {
    String oldAccessKey = accessKey;
    accessKey = newAccessKey;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.AWS__ACCESS_KEY, oldAccessKey, accessKey));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEndpointURL()
  {
    return endpointURL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEndpointURL(String newEndpointURL)
  {
    String oldEndpointURL = endpointURL;
    endpointURL = newEndpointURL;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.AWS__ENDPOINT_URL, oldEndpointURL, endpointURL));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSecretId()
  {
    return secretId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSecretId(String newSecretId)
  {
    String oldSecretId = secretId;
    secretId = newSecretId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.AWS__SECRET_ID, oldSecretId, secretId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.AWS__REGION:
        return getRegion();
      case WorkflowPackage.AWS__ACCESS_KEY:
        return getAccessKey();
      case WorkflowPackage.AWS__ENDPOINT_URL:
        return getEndpointURL();
      case WorkflowPackage.AWS__SECRET_ID:
        return getSecretId();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.AWS__REGION:
        setRegion((String)newValue);
        return;
      case WorkflowPackage.AWS__ACCESS_KEY:
        setAccessKey((String)newValue);
        return;
      case WorkflowPackage.AWS__ENDPOINT_URL:
        setEndpointURL((String)newValue);
        return;
      case WorkflowPackage.AWS__SECRET_ID:
        setSecretId((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.AWS__REGION:
        setRegion(REGION_EDEFAULT);
        return;
      case WorkflowPackage.AWS__ACCESS_KEY:
        setAccessKey(ACCESS_KEY_EDEFAULT);
        return;
      case WorkflowPackage.AWS__ENDPOINT_URL:
        setEndpointURL(ENDPOINT_URL_EDEFAULT);
        return;
      case WorkflowPackage.AWS__SECRET_ID:
        setSecretId(SECRET_ID_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.AWS__REGION:
        return REGION_EDEFAULT == null ? region != null : !REGION_EDEFAULT.equals(region);
      case WorkflowPackage.AWS__ACCESS_KEY:
        return ACCESS_KEY_EDEFAULT == null ? accessKey != null : !ACCESS_KEY_EDEFAULT.equals(accessKey);
      case WorkflowPackage.AWS__ENDPOINT_URL:
        return ENDPOINT_URL_EDEFAULT == null ? endpointURL != null : !ENDPOINT_URL_EDEFAULT.equals(endpointURL);
      case WorkflowPackage.AWS__SECRET_ID:
        return SECRET_ID_EDEFAULT == null ? secretId != null : !SECRET_ID_EDEFAULT.equals(secretId);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (region: ");
    result.append(region);
    result.append(", accessKey: ");
    result.append(accessKey);
    result.append(", endpointURL: ");
    result.append(endpointURL);
    result.append(", secretId: ");
    result.append(secretId);
    result.append(')');
    return result.toString();
  }

} //AWSImpl
