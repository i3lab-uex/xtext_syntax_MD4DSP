/**
 * generated by Xtext 2.39.0
 */
package xtext.workflow.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.workflow.AzureBlob;
import xtext.workflow.File;
import xtext.workflow.WorkflowPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Azure Blob</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.workflow.impl.AzureBlobImpl#getFolderPath <em>Folder Path</em>}</li>
 *   <li>{@link xtext.workflow.impl.AzureBlobImpl#getFile <em>File</em>}</li>
 *   <li>{@link xtext.workflow.impl.AzureBlobImpl#getContainer <em>Container</em>}</li>
 *   <li>{@link xtext.workflow.impl.AzureBlobImpl#getKeyVaultName <em>Key Vault Name</em>}</li>
 *   <li>{@link xtext.workflow.impl.AzureBlobImpl#getSecretName <em>Secret Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AzureBlobImpl extends StorageImpl implements AzureBlob
{
  /**
   * The default value of the '{@link #getFolderPath() <em>Folder Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFolderPath()
   * @generated
   * @ordered
   */
  protected static final String FOLDER_PATH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFolderPath() <em>Folder Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFolderPath()
   * @generated
   * @ordered
   */
  protected String folderPath = FOLDER_PATH_EDEFAULT;

  /**
   * The cached value of the '{@link #getFile() <em>File</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFile()
   * @generated
   * @ordered
   */
  protected EList<File> file;

  /**
   * The default value of the '{@link #getContainer() <em>Container</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContainer()
   * @generated
   * @ordered
   */
  protected static final String CONTAINER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getContainer() <em>Container</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContainer()
   * @generated
   * @ordered
   */
  protected String container = CONTAINER_EDEFAULT;

  /**
   * The default value of the '{@link #getKeyVaultName() <em>Key Vault Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyVaultName()
   * @generated
   * @ordered
   */
  protected static final String KEY_VAULT_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getKeyVaultName() <em>Key Vault Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyVaultName()
   * @generated
   * @ordered
   */
  protected String keyVaultName = KEY_VAULT_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getSecretName() <em>Secret Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSecretName()
   * @generated
   * @ordered
   */
  protected static final String SECRET_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSecretName() <em>Secret Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSecretName()
   * @generated
   * @ordered
   */
  protected String secretName = SECRET_NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AzureBlobImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.AZURE_BLOB;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFolderPath()
  {
    return folderPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFolderPath(String newFolderPath)
  {
    String oldFolderPath = folderPath;
    folderPath = newFolderPath;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.AZURE_BLOB__FOLDER_PATH, oldFolderPath, folderPath));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<File> getFile()
  {
    if (file == null)
    {
      file = new EObjectContainmentEList<File>(File.class, this, WorkflowPackage.AZURE_BLOB__FILE);
    }
    return file;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getContainer()
  {
    return container;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContainer(String newContainer)
  {
    String oldContainer = container;
    container = newContainer;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.AZURE_BLOB__CONTAINER, oldContainer, container));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getKeyVaultName()
  {
    return keyVaultName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setKeyVaultName(String newKeyVaultName)
  {
    String oldKeyVaultName = keyVaultName;
    keyVaultName = newKeyVaultName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.AZURE_BLOB__KEY_VAULT_NAME, oldKeyVaultName, keyVaultName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSecretName()
  {
    return secretName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSecretName(String newSecretName)
  {
    String oldSecretName = secretName;
    secretName = newSecretName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.AZURE_BLOB__SECRET_NAME, oldSecretName, secretName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WorkflowPackage.AZURE_BLOB__FILE:
        return ((InternalEList<?>)getFile()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.AZURE_BLOB__FOLDER_PATH:
        return getFolderPath();
      case WorkflowPackage.AZURE_BLOB__FILE:
        return getFile();
      case WorkflowPackage.AZURE_BLOB__CONTAINER:
        return getContainer();
      case WorkflowPackage.AZURE_BLOB__KEY_VAULT_NAME:
        return getKeyVaultName();
      case WorkflowPackage.AZURE_BLOB__SECRET_NAME:
        return getSecretName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.AZURE_BLOB__FOLDER_PATH:
        setFolderPath((String)newValue);
        return;
      case WorkflowPackage.AZURE_BLOB__FILE:
        getFile().clear();
        getFile().addAll((Collection<? extends File>)newValue);
        return;
      case WorkflowPackage.AZURE_BLOB__CONTAINER:
        setContainer((String)newValue);
        return;
      case WorkflowPackage.AZURE_BLOB__KEY_VAULT_NAME:
        setKeyVaultName((String)newValue);
        return;
      case WorkflowPackage.AZURE_BLOB__SECRET_NAME:
        setSecretName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.AZURE_BLOB__FOLDER_PATH:
        setFolderPath(FOLDER_PATH_EDEFAULT);
        return;
      case WorkflowPackage.AZURE_BLOB__FILE:
        getFile().clear();
        return;
      case WorkflowPackage.AZURE_BLOB__CONTAINER:
        setContainer(CONTAINER_EDEFAULT);
        return;
      case WorkflowPackage.AZURE_BLOB__KEY_VAULT_NAME:
        setKeyVaultName(KEY_VAULT_NAME_EDEFAULT);
        return;
      case WorkflowPackage.AZURE_BLOB__SECRET_NAME:
        setSecretName(SECRET_NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.AZURE_BLOB__FOLDER_PATH:
        return FOLDER_PATH_EDEFAULT == null ? folderPath != null : !FOLDER_PATH_EDEFAULT.equals(folderPath);
      case WorkflowPackage.AZURE_BLOB__FILE:
        return file != null && !file.isEmpty();
      case WorkflowPackage.AZURE_BLOB__CONTAINER:
        return CONTAINER_EDEFAULT == null ? container != null : !CONTAINER_EDEFAULT.equals(container);
      case WorkflowPackage.AZURE_BLOB__KEY_VAULT_NAME:
        return KEY_VAULT_NAME_EDEFAULT == null ? keyVaultName != null : !KEY_VAULT_NAME_EDEFAULT.equals(keyVaultName);
      case WorkflowPackage.AZURE_BLOB__SECRET_NAME:
        return SECRET_NAME_EDEFAULT == null ? secretName != null : !SECRET_NAME_EDEFAULT.equals(secretName);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (folderPath: ");
    result.append(folderPath);
    result.append(", container: ");
    result.append(container);
    result.append(", keyVaultName: ");
    result.append(keyVaultName);
    result.append(", secretName: ");
    result.append(secretName);
    result.append(')');
    return result.toString();
  }

} //AzureBlobImpl
