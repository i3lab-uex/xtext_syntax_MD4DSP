/**
 * generated by Xtext 2.39.0
 */
package xtext.workflow.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xtext.workflow.ClosureType;
import xtext.workflow.Range;
import xtext.workflow.WorkflowPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Range</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.workflow.impl.RangeImpl#getRangeDef <em>Range Def</em>}</li>
 *   <li>{@link xtext.workflow.impl.RangeImpl#getMin <em>Min</em>}</li>
 *   <li>{@link xtext.workflow.impl.RangeImpl#getMax <em>Max</em>}</li>
 *   <li>{@link xtext.workflow.impl.RangeImpl#getClousure <em>Clousure</em>}</li>
 *   <li>{@link xtext.workflow.impl.RangeImpl#isMinInfinity <em>Min Infinity</em>}</li>
 *   <li>{@link xtext.workflow.impl.RangeImpl#isMaxInfinity <em>Max Infinity</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RangeImpl extends MatchingValueImpl implements Range
{
  /**
   * The default value of the '{@link #getRangeDef() <em>Range Def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRangeDef()
   * @generated
   * @ordered
   */
  protected static final String RANGE_DEF_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRangeDef() <em>Range Def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRangeDef()
   * @generated
   * @ordered
   */
  protected String rangeDef = RANGE_DEF_EDEFAULT;

  /**
   * The default value of the '{@link #getMin() <em>Min</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMin()
   * @generated
   * @ordered
   */
  protected static final float MIN_EDEFAULT = 0.0F;

  /**
   * The cached value of the '{@link #getMin() <em>Min</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMin()
   * @generated
   * @ordered
   */
  protected float min = MIN_EDEFAULT;

  /**
   * The default value of the '{@link #getMax() <em>Max</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMax()
   * @generated
   * @ordered
   */
  protected static final float MAX_EDEFAULT = 0.0F;

  /**
   * The cached value of the '{@link #getMax() <em>Max</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMax()
   * @generated
   * @ordered
   */
  protected float max = MAX_EDEFAULT;

  /**
   * The default value of the '{@link #getClousure() <em>Clousure</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClousure()
   * @generated
   * @ordered
   */
  protected static final ClosureType CLOUSURE_EDEFAULT = ClosureType.OPEN_OPEN;

  /**
   * The cached value of the '{@link #getClousure() <em>Clousure</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClousure()
   * @generated
   * @ordered
   */
  protected ClosureType clousure = CLOUSURE_EDEFAULT;

  /**
   * The default value of the '{@link #isMinInfinity() <em>Min Infinity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMinInfinity()
   * @generated
   * @ordered
   */
  protected static final boolean MIN_INFINITY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isMinInfinity() <em>Min Infinity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMinInfinity()
   * @generated
   * @ordered
   */
  protected boolean minInfinity = MIN_INFINITY_EDEFAULT;

  /**
   * The default value of the '{@link #isMaxInfinity() <em>Max Infinity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMaxInfinity()
   * @generated
   * @ordered
   */
  protected static final boolean MAX_INFINITY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isMaxInfinity() <em>Max Infinity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMaxInfinity()
   * @generated
   * @ordered
   */
  protected boolean maxInfinity = MAX_INFINITY_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RangeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.RANGE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRangeDef()
  {
    return rangeDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRangeDef(String newRangeDef)
  {
    String oldRangeDef = rangeDef;
    rangeDef = newRangeDef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.RANGE__RANGE_DEF, oldRangeDef, rangeDef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public float getMin()
  {
    return min;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMin(float newMin)
  {
    float oldMin = min;
    min = newMin;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.RANGE__MIN, oldMin, min));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public float getMax()
  {
    return max;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMax(float newMax)
  {
    float oldMax = max;
    max = newMax;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.RANGE__MAX, oldMax, max));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClosureType getClousure()
  {
    return clousure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setClousure(ClosureType newClousure)
  {
    ClosureType oldClousure = clousure;
    clousure = newClousure == null ? CLOUSURE_EDEFAULT : newClousure;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.RANGE__CLOUSURE, oldClousure, clousure));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isMinInfinity()
  {
    return minInfinity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMinInfinity(boolean newMinInfinity)
  {
    boolean oldMinInfinity = minInfinity;
    minInfinity = newMinInfinity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.RANGE__MIN_INFINITY, oldMinInfinity, minInfinity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isMaxInfinity()
  {
    return maxInfinity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMaxInfinity(boolean newMaxInfinity)
  {
    boolean oldMaxInfinity = maxInfinity;
    maxInfinity = newMaxInfinity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.RANGE__MAX_INFINITY, oldMaxInfinity, maxInfinity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.RANGE__RANGE_DEF:
        return getRangeDef();
      case WorkflowPackage.RANGE__MIN:
        return getMin();
      case WorkflowPackage.RANGE__MAX:
        return getMax();
      case WorkflowPackage.RANGE__CLOUSURE:
        return getClousure();
      case WorkflowPackage.RANGE__MIN_INFINITY:
        return isMinInfinity();
      case WorkflowPackage.RANGE__MAX_INFINITY:
        return isMaxInfinity();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.RANGE__RANGE_DEF:
        setRangeDef((String)newValue);
        return;
      case WorkflowPackage.RANGE__MIN:
        setMin((Float)newValue);
        return;
      case WorkflowPackage.RANGE__MAX:
        setMax((Float)newValue);
        return;
      case WorkflowPackage.RANGE__CLOUSURE:
        setClousure((ClosureType)newValue);
        return;
      case WorkflowPackage.RANGE__MIN_INFINITY:
        setMinInfinity((Boolean)newValue);
        return;
      case WorkflowPackage.RANGE__MAX_INFINITY:
        setMaxInfinity((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.RANGE__RANGE_DEF:
        setRangeDef(RANGE_DEF_EDEFAULT);
        return;
      case WorkflowPackage.RANGE__MIN:
        setMin(MIN_EDEFAULT);
        return;
      case WorkflowPackage.RANGE__MAX:
        setMax(MAX_EDEFAULT);
        return;
      case WorkflowPackage.RANGE__CLOUSURE:
        setClousure(CLOUSURE_EDEFAULT);
        return;
      case WorkflowPackage.RANGE__MIN_INFINITY:
        setMinInfinity(MIN_INFINITY_EDEFAULT);
        return;
      case WorkflowPackage.RANGE__MAX_INFINITY:
        setMaxInfinity(MAX_INFINITY_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.RANGE__RANGE_DEF:
        return RANGE_DEF_EDEFAULT == null ? rangeDef != null : !RANGE_DEF_EDEFAULT.equals(rangeDef);
      case WorkflowPackage.RANGE__MIN:
        return min != MIN_EDEFAULT;
      case WorkflowPackage.RANGE__MAX:
        return max != MAX_EDEFAULT;
      case WorkflowPackage.RANGE__CLOUSURE:
        return clousure != CLOUSURE_EDEFAULT;
      case WorkflowPackage.RANGE__MIN_INFINITY:
        return minInfinity != MIN_INFINITY_EDEFAULT;
      case WorkflowPackage.RANGE__MAX_INFINITY:
        return maxInfinity != MAX_INFINITY_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (rangeDef: ");
    result.append(rangeDef);
    result.append(", min: ");
    result.append(min);
    result.append(", max: ");
    result.append(max);
    result.append(", clousure: ");
    result.append(clousure);
    result.append(", minInfinity: ");
    result.append(minInfinity);
    result.append(", maxInfinity: ");
    result.append(maxInfinity);
    result.append(')');
    return result.toString();
  }

} //RangeImpl
