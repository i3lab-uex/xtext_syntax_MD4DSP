/**
 * generated by Xtext 2.39.0
 */
package xtext.workflow.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.workflow.File;
import xtext.workflow.LocalFolder;
import xtext.workflow.WorkflowPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Local Folder</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.workflow.impl.LocalFolderImpl#getFolderPath <em>Folder Path</em>}</li>
 *   <li>{@link xtext.workflow.impl.LocalFolderImpl#getFile <em>File</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LocalFolderImpl extends StorageImpl implements LocalFolder
{
  /**
   * The default value of the '{@link #getFolderPath() <em>Folder Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFolderPath()
   * @generated
   * @ordered
   */
  protected static final String FOLDER_PATH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFolderPath() <em>Folder Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFolderPath()
   * @generated
   * @ordered
   */
  protected String folderPath = FOLDER_PATH_EDEFAULT;

  /**
   * The cached value of the '{@link #getFile() <em>File</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFile()
   * @generated
   * @ordered
   */
  protected EList<File> file;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LocalFolderImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.LOCAL_FOLDER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFolderPath()
  {
    return folderPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFolderPath(String newFolderPath)
  {
    String oldFolderPath = folderPath;
    folderPath = newFolderPath;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.LOCAL_FOLDER__FOLDER_PATH, oldFolderPath, folderPath));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<File> getFile()
  {
    if (file == null)
    {
      file = new EObjectContainmentEList<File>(File.class, this, WorkflowPackage.LOCAL_FOLDER__FILE);
    }
    return file;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WorkflowPackage.LOCAL_FOLDER__FILE:
        return ((InternalEList<?>)getFile()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.LOCAL_FOLDER__FOLDER_PATH:
        return getFolderPath();
      case WorkflowPackage.LOCAL_FOLDER__FILE:
        return getFile();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.LOCAL_FOLDER__FOLDER_PATH:
        setFolderPath((String)newValue);
        return;
      case WorkflowPackage.LOCAL_FOLDER__FILE:
        getFile().clear();
        getFile().addAll((Collection<? extends File>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.LOCAL_FOLDER__FOLDER_PATH:
        setFolderPath(FOLDER_PATH_EDEFAULT);
        return;
      case WorkflowPackage.LOCAL_FOLDER__FILE:
        getFile().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.LOCAL_FOLDER__FOLDER_PATH:
        return FOLDER_PATH_EDEFAULT == null ? folderPath != null : !FOLDER_PATH_EDEFAULT.equals(folderPath);
      case WorkflowPackage.LOCAL_FOLDER__FILE:
        return file != null && !file.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (folderPath: ");
    result.append(folderPath);
    result.append(')');
    return result.toString();
  }

} //LocalFolderImpl
