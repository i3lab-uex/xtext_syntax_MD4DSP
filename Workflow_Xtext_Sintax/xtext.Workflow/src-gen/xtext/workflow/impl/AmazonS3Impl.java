/**
 * generated by Xtext 2.40.0
 */
package xtext.workflow.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.workflow.AmazonS3;
import xtext.workflow.File;
import xtext.workflow.WorkflowPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Amazon S3</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.workflow.impl.AmazonS3Impl#getFolderPath <em>Folder Path</em>}</li>
 *   <li>{@link xtext.workflow.impl.AmazonS3Impl#getFile <em>File</em>}</li>
 *   <li>{@link xtext.workflow.impl.AmazonS3Impl#getBucket <em>Bucket</em>}</li>
 *   <li>{@link xtext.workflow.impl.AmazonS3Impl#getRegion <em>Region</em>}</li>
 *   <li>{@link xtext.workflow.impl.AmazonS3Impl#getSecretId <em>Secret Id</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AmazonS3Impl extends StorageImpl implements AmazonS3
{
  /**
   * The default value of the '{@link #getFolderPath() <em>Folder Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFolderPath()
   * @generated
   * @ordered
   */
  protected static final String FOLDER_PATH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFolderPath() <em>Folder Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFolderPath()
   * @generated
   * @ordered
   */
  protected String folderPath = FOLDER_PATH_EDEFAULT;

  /**
   * The cached value of the '{@link #getFile() <em>File</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFile()
   * @generated
   * @ordered
   */
  protected EList<File> file;

  /**
   * The default value of the '{@link #getBucket() <em>Bucket</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBucket()
   * @generated
   * @ordered
   */
  protected static final String BUCKET_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBucket() <em>Bucket</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBucket()
   * @generated
   * @ordered
   */
  protected String bucket = BUCKET_EDEFAULT;

  /**
   * The default value of the '{@link #getRegion() <em>Region</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRegion()
   * @generated
   * @ordered
   */
  protected static final String REGION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRegion() <em>Region</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRegion()
   * @generated
   * @ordered
   */
  protected String region = REGION_EDEFAULT;

  /**
   * The default value of the '{@link #getSecretId() <em>Secret Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSecretId()
   * @generated
   * @ordered
   */
  protected static final String SECRET_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSecretId() <em>Secret Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSecretId()
   * @generated
   * @ordered
   */
  protected String secretId = SECRET_ID_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AmazonS3Impl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.AMAZON_S3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFolderPath()
  {
    return folderPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFolderPath(String newFolderPath)
  {
    String oldFolderPath = folderPath;
    folderPath = newFolderPath;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.AMAZON_S3__FOLDER_PATH, oldFolderPath, folderPath));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<File> getFile()
  {
    if (file == null)
    {
      file = new EObjectContainmentEList<File>(File.class, this, WorkflowPackage.AMAZON_S3__FILE);
    }
    return file;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBucket()
  {
    return bucket;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBucket(String newBucket)
  {
    String oldBucket = bucket;
    bucket = newBucket;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.AMAZON_S3__BUCKET, oldBucket, bucket));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRegion()
  {
    return region;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRegion(String newRegion)
  {
    String oldRegion = region;
    region = newRegion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.AMAZON_S3__REGION, oldRegion, region));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSecretId()
  {
    return secretId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSecretId(String newSecretId)
  {
    String oldSecretId = secretId;
    secretId = newSecretId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.AMAZON_S3__SECRET_ID, oldSecretId, secretId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WorkflowPackage.AMAZON_S3__FILE:
        return ((InternalEList<?>)getFile()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.AMAZON_S3__FOLDER_PATH:
        return getFolderPath();
      case WorkflowPackage.AMAZON_S3__FILE:
        return getFile();
      case WorkflowPackage.AMAZON_S3__BUCKET:
        return getBucket();
      case WorkflowPackage.AMAZON_S3__REGION:
        return getRegion();
      case WorkflowPackage.AMAZON_S3__SECRET_ID:
        return getSecretId();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.AMAZON_S3__FOLDER_PATH:
        setFolderPath((String)newValue);
        return;
      case WorkflowPackage.AMAZON_S3__FILE:
        getFile().clear();
        getFile().addAll((Collection<? extends File>)newValue);
        return;
      case WorkflowPackage.AMAZON_S3__BUCKET:
        setBucket((String)newValue);
        return;
      case WorkflowPackage.AMAZON_S3__REGION:
        setRegion((String)newValue);
        return;
      case WorkflowPackage.AMAZON_S3__SECRET_ID:
        setSecretId((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.AMAZON_S3__FOLDER_PATH:
        setFolderPath(FOLDER_PATH_EDEFAULT);
        return;
      case WorkflowPackage.AMAZON_S3__FILE:
        getFile().clear();
        return;
      case WorkflowPackage.AMAZON_S3__BUCKET:
        setBucket(BUCKET_EDEFAULT);
        return;
      case WorkflowPackage.AMAZON_S3__REGION:
        setRegion(REGION_EDEFAULT);
        return;
      case WorkflowPackage.AMAZON_S3__SECRET_ID:
        setSecretId(SECRET_ID_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.AMAZON_S3__FOLDER_PATH:
        return FOLDER_PATH_EDEFAULT == null ? folderPath != null : !FOLDER_PATH_EDEFAULT.equals(folderPath);
      case WorkflowPackage.AMAZON_S3__FILE:
        return file != null && !file.isEmpty();
      case WorkflowPackage.AMAZON_S3__BUCKET:
        return BUCKET_EDEFAULT == null ? bucket != null : !BUCKET_EDEFAULT.equals(bucket);
      case WorkflowPackage.AMAZON_S3__REGION:
        return REGION_EDEFAULT == null ? region != null : !REGION_EDEFAULT.equals(region);
      case WorkflowPackage.AMAZON_S3__SECRET_ID:
        return SECRET_ID_EDEFAULT == null ? secretId != null : !SECRET_ID_EDEFAULT.equals(secretId);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (folderPath: ");
    result.append(folderPath);
    result.append(", bucket: ");
    result.append(bucket);
    result.append(", region: ");
    result.append(region);
    result.append(", secretId: ");
    result.append(secretId);
    result.append(')');
    return result.toString();
  }

} //AmazonS3Impl
