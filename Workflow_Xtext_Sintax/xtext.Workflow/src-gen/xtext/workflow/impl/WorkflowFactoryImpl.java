/**
 * generated by Xtext 2.40.0
 */
package xtext.workflow.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import xtext.workflow.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class WorkflowFactoryImpl extends EFactoryImpl implements WorkflowFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static WorkflowFactory init()
  {
    try
    {
      WorkflowFactory theWorkflowFactory = (WorkflowFactory)EPackage.Registry.INSTANCE.getEFactory(WorkflowPackage.eNS_URI);
      if (theWorkflowFactory != null)
      {
        return theWorkflowFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new WorkflowFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WorkflowFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case WorkflowPackage.WORKFLOW: return createWorkflow();
      case WorkflowPackage.PROCESSING_STEP: return createProcessingStep();
      case WorkflowPackage.DATA_PROCESSING: return createDataProcessing();
      case WorkflowPackage.PMML_MODEL: return createPMMLModel();
      case WorkflowPackage.TEST: return createTest();
      case WorkflowPackage.LINK: return createLink();
      case WorkflowPackage.ARGUMENT: return createArgument();
      case WorkflowPackage.PARAMETER: return createParameter();
      case WorkflowPackage.MAP: return createMap();
      case WorkflowPackage.PRIMITIVE: return createPrimitive();
      case WorkflowPackage.DERIVED_FIELD: return createDerivedField();
      case WorkflowPackage.FILTER_VALUE: return createFilterValue();
      case WorkflowPackage.DISCRETIZE_BIN: return createDiscretizeBin();
      case WorkflowPackage.FIELD_RANGE: return createFieldRange();
      case WorkflowPackage.MATH_OP: return createMathOp();
      case WorkflowPackage.JOIN: return createJoin();
      case WorkflowPackage.OPERAND: return createOperand();
      case WorkflowPackage.FIELD: return createField();
      case WorkflowPackage.FIX_VALUE: return createFixValue();
      case WorkflowPackage.MATCHING_VALUE: return createMatchingValue();
      case WorkflowPackage.RANGE: return createRange();
      case WorkflowPackage.DATE_RANGE: return createDateRange();
      case WorkflowPackage.SPECIAL_VALUES: return createSpecialValues();
      case WorkflowPackage.IMPUTE_TYPE: return createImputeType();
      case WorkflowPackage.DERIVED_VALUE: return createDerivedValue();
      case WorkflowPackage.NUM_OP: return createNumOp();
      case WorkflowPackage.CAST_TYPE: return createCastType();
      case WorkflowPackage.DATA_DICTIONARY: return createDataDictionary();
      case WorkflowPackage.DATA_FIELD: return createDataField();
      case WorkflowPackage.CATEGORICAL: return createCategorical();
      case WorkflowPackage.CONTINUOUS: return createContinuous();
      case WorkflowPackage.DATE: return createDate();
      case WorkflowPackage.INTERVAL: return createInterval();
      case WorkflowPackage.INTERVAL_DATE: return createIntervalDate();
      case WorkflowPackage.VALUE_FIELD: return createValueField();
      case WorkflowPackage.CONTRACT: return createContract();
      case WorkflowPackage.ENVIRONMENT: return createEnvironment();
      case WorkflowPackage.LOCAL: return createLocal();
      case WorkflowPackage.AZURE_CI: return createAzureCI();
      case WorkflowPackage.AMAZON_ECS: return createAmazonECS();
      case WorkflowPackage.DEVELOPMENT_TOOL: return createDevelopmentTool();
      case WorkflowPackage.STORAGE: return createStorage();
      case WorkflowPackage.DATABASE: return createDatabase();
      case WorkflowPackage.AUTHENTICATION: return createAuthentication();
      case WorkflowPackage.CREDENTIALS: return createCredentials();
      case WorkflowPackage.SSL: return createSSL();
      case WorkflowPackage.OAUTH2: return createOAuth2();
      case WorkflowPackage.AWS: return createAWS();
      case WorkflowPackage.SOURCE: return createSource();
      case WorkflowPackage.FILE: return createFile();
      case WorkflowPackage.TABLE: return createTable();
      case WorkflowPackage.FOLDER: return createFolder();
      case WorkflowPackage.LOCAL_FOLDER: return createLocalFolder();
      case WorkflowPackage.AMAZON_S3: return createAmazonS3();
      case WorkflowPackage.AZURE_BLOB: return createAzureBlob();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case WorkflowPackage.LIB_DATA_TYPE:
        return createLibDataTypeFromString(eDataType, initialValue);
      case WorkflowPackage.DATA_TYPE:
        return createDataTypeFromString(eDataType, initialValue);
      case WorkflowPackage.CLOSURE_TYPE:
        return createClosureTypeFromString(eDataType, initialValue);
      case WorkflowPackage.OPERATION:
        return createOperationFromString(eDataType, initialValue);
      case WorkflowPackage.DERIVED_TYPE:
        return createDerivedTypeFromString(eDataType, initialValue);
      case WorkflowPackage.SPECIAL_VALUE:
        return createSpecialValueFromString(eDataType, initialValue);
      case WorkflowPackage.OPERATOR:
        return createOperatorFromString(eDataType, initialValue);
      case WorkflowPackage.FILTER_TYPE:
        return createFilterTypeFromString(eDataType, initialValue);
      case WorkflowPackage.MAP_OPERATION:
        return createMapOperationFromString(eDataType, initialValue);
      case WorkflowPackage.MATH_OPERATOR:
        return createMathOperatorFromString(eDataType, initialValue);
      case WorkflowPackage.TOOL:
        return createTOOLFromString(eDataType, initialValue);
      case WorkflowPackage.DBTYPE:
        return createDBTYPEFromString(eDataType, initialValue);
      case WorkflowPackage.FILE_TYPE:
        return createFileTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case WorkflowPackage.LIB_DATA_TYPE:
        return convertLibDataTypeToString(eDataType, instanceValue);
      case WorkflowPackage.DATA_TYPE:
        return convertDataTypeToString(eDataType, instanceValue);
      case WorkflowPackage.CLOSURE_TYPE:
        return convertClosureTypeToString(eDataType, instanceValue);
      case WorkflowPackage.OPERATION:
        return convertOperationToString(eDataType, instanceValue);
      case WorkflowPackage.DERIVED_TYPE:
        return convertDerivedTypeToString(eDataType, instanceValue);
      case WorkflowPackage.SPECIAL_VALUE:
        return convertSpecialValueToString(eDataType, instanceValue);
      case WorkflowPackage.OPERATOR:
        return convertOperatorToString(eDataType, instanceValue);
      case WorkflowPackage.FILTER_TYPE:
        return convertFilterTypeToString(eDataType, instanceValue);
      case WorkflowPackage.MAP_OPERATION:
        return convertMapOperationToString(eDataType, instanceValue);
      case WorkflowPackage.MATH_OPERATOR:
        return convertMathOperatorToString(eDataType, instanceValue);
      case WorkflowPackage.TOOL:
        return convertTOOLToString(eDataType, instanceValue);
      case WorkflowPackage.DBTYPE:
        return convertDBTYPEToString(eDataType, instanceValue);
      case WorkflowPackage.FILE_TYPE:
        return convertFileTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Workflow createWorkflow()
  {
    WorkflowImpl workflow = new WorkflowImpl();
    return workflow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessingStep createProcessingStep()
  {
    ProcessingStepImpl processingStep = new ProcessingStepImpl();
    return processingStep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataProcessing createDataProcessing()
  {
    DataProcessingImpl dataProcessing = new DataProcessingImpl();
    return dataProcessing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PMMLModel createPMMLModel()
  {
    PMMLModelImpl pmmlModel = new PMMLModelImpl();
    return pmmlModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Test createTest()
  {
    TestImpl test = new TestImpl();
    return test;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Link createLink()
  {
    LinkImpl link = new LinkImpl();
    return link;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Argument createArgument()
  {
    ArgumentImpl argument = new ArgumentImpl();
    return argument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Map createMap()
  {
    MapImpl map = new MapImpl();
    return map;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Primitive createPrimitive()
  {
    PrimitiveImpl primitive = new PrimitiveImpl();
    return primitive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DerivedField createDerivedField()
  {
    DerivedFieldImpl derivedField = new DerivedFieldImpl();
    return derivedField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FilterValue createFilterValue()
  {
    FilterValueImpl filterValue = new FilterValueImpl();
    return filterValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DiscretizeBin createDiscretizeBin()
  {
    DiscretizeBinImpl discretizeBin = new DiscretizeBinImpl();
    return discretizeBin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FieldRange createFieldRange()
  {
    FieldRangeImpl fieldRange = new FieldRangeImpl();
    return fieldRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathOp createMathOp()
  {
    MathOpImpl mathOp = new MathOpImpl();
    return mathOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Join createJoin()
  {
    JoinImpl join = new JoinImpl();
    return join;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operand createOperand()
  {
    OperandImpl operand = new OperandImpl();
    return operand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Field createField()
  {
    FieldImpl field = new FieldImpl();
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FixValue createFixValue()
  {
    FixValueImpl fixValue = new FixValueImpl();
    return fixValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MatchingValue createMatchingValue()
  {
    MatchingValueImpl matchingValue = new MatchingValueImpl();
    return matchingValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Range createRange()
  {
    RangeImpl range = new RangeImpl();
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DateRange createDateRange()
  {
    DateRangeImpl dateRange = new DateRangeImpl();
    return dateRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpecialValues createSpecialValues()
  {
    SpecialValuesImpl specialValues = new SpecialValuesImpl();
    return specialValues;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImputeType createImputeType()
  {
    ImputeTypeImpl imputeType = new ImputeTypeImpl();
    return imputeType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DerivedValue createDerivedValue()
  {
    DerivedValueImpl derivedValue = new DerivedValueImpl();
    return derivedValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumOp createNumOp()
  {
    NumOpImpl numOp = new NumOpImpl();
    return numOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CastType createCastType()
  {
    CastTypeImpl castType = new CastTypeImpl();
    return castType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataDictionary createDataDictionary()
  {
    DataDictionaryImpl dataDictionary = new DataDictionaryImpl();
    return dataDictionary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataField createDataField()
  {
    DataFieldImpl dataField = new DataFieldImpl();
    return dataField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Categorical createCategorical()
  {
    CategoricalImpl categorical = new CategoricalImpl();
    return categorical;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Continuous createContinuous()
  {
    ContinuousImpl continuous = new ContinuousImpl();
    return continuous;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Date createDate()
  {
    DateImpl date = new DateImpl();
    return date;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interval createInterval()
  {
    IntervalImpl interval = new IntervalImpl();
    return interval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntervalDate createIntervalDate()
  {
    IntervalDateImpl intervalDate = new IntervalDateImpl();
    return intervalDate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueField createValueField()
  {
    ValueFieldImpl valueField = new ValueFieldImpl();
    return valueField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Contract createContract()
  {
    ContractImpl contract = new ContractImpl();
    return contract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Environment createEnvironment()
  {
    EnvironmentImpl environment = new EnvironmentImpl();
    return environment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Local createLocal()
  {
    LocalImpl local = new LocalImpl();
    return local;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AzureCI createAzureCI()
  {
    AzureCIImpl azureCI = new AzureCIImpl();
    return azureCI;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AmazonECS createAmazonECS()
  {
    AmazonECSImpl amazonECS = new AmazonECSImpl();
    return amazonECS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DevelopmentTool createDevelopmentTool()
  {
    DevelopmentToolImpl developmentTool = new DevelopmentToolImpl();
    return developmentTool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Storage createStorage()
  {
    StorageImpl storage = new StorageImpl();
    return storage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Database createDatabase()
  {
    DatabaseImpl database = new DatabaseImpl();
    return database;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Authentication createAuthentication()
  {
    AuthenticationImpl authentication = new AuthenticationImpl();
    return authentication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Credentials createCredentials()
  {
    CredentialsImpl credentials = new CredentialsImpl();
    return credentials;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SSL createSSL()
  {
    SSLImpl ssl = new SSLImpl();
    return ssl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OAuth2 createOAuth2()
  {
    OAuth2Impl oAuth2 = new OAuth2Impl();
    return oAuth2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AWS createAWS()
  {
    AWSImpl aws = new AWSImpl();
    return aws;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Source createSource()
  {
    SourceImpl source = new SourceImpl();
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public File createFile()
  {
    FileImpl file = new FileImpl();
    return file;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Table createTable()
  {
    TableImpl table = new TableImpl();
    return table;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Folder createFolder()
  {
    FolderImpl folder = new FolderImpl();
    return folder;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocalFolder createLocalFolder()
  {
    LocalFolderImpl localFolder = new LocalFolderImpl();
    return localFolder;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AmazonS3 createAmazonS3()
  {
    AmazonS3Impl amazonS3 = new AmazonS3Impl();
    return amazonS3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AzureBlob createAzureBlob()
  {
    AzureBlobImpl azureBlob = new AzureBlobImpl();
    return azureBlob;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LibDataType createLibDataTypeFromString(EDataType eDataType, String initialValue)
  {
    LibDataType result = LibDataType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLibDataTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataType createDataTypeFromString(EDataType eDataType, String initialValue)
  {
    DataType result = DataType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDataTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClosureType createClosureTypeFromString(EDataType eDataType, String initialValue)
  {
    ClosureType result = ClosureType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertClosureTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Operation createOperationFromString(EDataType eDataType, String initialValue)
  {
    Operation result = Operation.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOperationToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DerivedType createDerivedTypeFromString(EDataType eDataType, String initialValue)
  {
    DerivedType result = DerivedType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDerivedTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpecialValue createSpecialValueFromString(EDataType eDataType, String initialValue)
  {
    SpecialValue result = SpecialValue.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSpecialValueToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Operator createOperatorFromString(EDataType eDataType, String initialValue)
  {
    Operator result = Operator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FilterType createFilterTypeFromString(EDataType eDataType, String initialValue)
  {
    FilterType result = FilterType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFilterTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MapOperation createMapOperationFromString(EDataType eDataType, String initialValue)
  {
    MapOperation result = MapOperation.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMapOperationToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MathOperator createMathOperatorFromString(EDataType eDataType, String initialValue)
  {
    MathOperator result = MathOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMathOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TOOL createTOOLFromString(EDataType eDataType, String initialValue)
  {
    TOOL result = TOOL.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTOOLToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DBTYPE createDBTYPEFromString(EDataType eDataType, String initialValue)
  {
    DBTYPE result = DBTYPE.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDBTYPEToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FileType createFileTypeFromString(EDataType eDataType, String initialValue)
  {
    FileType result = FileType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFileTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WorkflowPackage getWorkflowPackage()
  {
    return (WorkflowPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static WorkflowPackage getPackage()
  {
    return WorkflowPackage.eINSTANCE;
  }

} //WorkflowFactoryImpl
