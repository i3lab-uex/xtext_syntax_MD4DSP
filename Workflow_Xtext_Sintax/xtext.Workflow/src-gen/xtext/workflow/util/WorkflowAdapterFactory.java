/**
 * generated by Xtext 2.40.0
 */
package xtext.workflow.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import xtext.workflow.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see xtext.workflow.WorkflowPackage
 * @generated
 */
public class WorkflowAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static WorkflowPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WorkflowAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = WorkflowPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WorkflowSwitch<Adapter> modelSwitch =
    new WorkflowSwitch<Adapter>()
    {
      @Override
      public Adapter caseWorkflow(Workflow object)
      {
        return createWorkflowAdapter();
      }
      @Override
      public Adapter caseProcessingStep(ProcessingStep object)
      {
        return createProcessingStepAdapter();
      }
      @Override
      public Adapter caseDataProcessing(DataProcessing object)
      {
        return createDataProcessingAdapter();
      }
      @Override
      public Adapter casePMMLModel(PMMLModel object)
      {
        return createPMMLModelAdapter();
      }
      @Override
      public Adapter caseTest(Test object)
      {
        return createTestAdapter();
      }
      @Override
      public Adapter caseLink(Link object)
      {
        return createLinkAdapter();
      }
      @Override
      public Adapter caseArgument(Argument object)
      {
        return createArgumentAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseMap(Map object)
      {
        return createMapAdapter();
      }
      @Override
      public Adapter casePrimitive(Primitive object)
      {
        return createPrimitiveAdapter();
      }
      @Override
      public Adapter caseDerivedField(DerivedField object)
      {
        return createDerivedFieldAdapter();
      }
      @Override
      public Adapter caseFilterValue(FilterValue object)
      {
        return createFilterValueAdapter();
      }
      @Override
      public Adapter caseDiscretizeBin(DiscretizeBin object)
      {
        return createDiscretizeBinAdapter();
      }
      @Override
      public Adapter caseFieldRange(FieldRange object)
      {
        return createFieldRangeAdapter();
      }
      @Override
      public Adapter caseMathOp(MathOp object)
      {
        return createMathOpAdapter();
      }
      @Override
      public Adapter caseJoin(Join object)
      {
        return createJoinAdapter();
      }
      @Override
      public Adapter caseOperand(Operand object)
      {
        return createOperandAdapter();
      }
      @Override
      public Adapter caseField(Field object)
      {
        return createFieldAdapter();
      }
      @Override
      public Adapter caseFixValue(FixValue object)
      {
        return createFixValueAdapter();
      }
      @Override
      public Adapter caseMatchingValue(MatchingValue object)
      {
        return createMatchingValueAdapter();
      }
      @Override
      public Adapter caseRange(Range object)
      {
        return createRangeAdapter();
      }
      @Override
      public Adapter caseDateRange(DateRange object)
      {
        return createDateRangeAdapter();
      }
      @Override
      public Adapter caseSpecialValues(SpecialValues object)
      {
        return createSpecialValuesAdapter();
      }
      @Override
      public Adapter caseImputeType(ImputeType object)
      {
        return createImputeTypeAdapter();
      }
      @Override
      public Adapter caseDerivedValue(DerivedValue object)
      {
        return createDerivedValueAdapter();
      }
      @Override
      public Adapter caseNumOp(NumOp object)
      {
        return createNumOpAdapter();
      }
      @Override
      public Adapter caseCastType(CastType object)
      {
        return createCastTypeAdapter();
      }
      @Override
      public Adapter caseDataDictionary(DataDictionary object)
      {
        return createDataDictionaryAdapter();
      }
      @Override
      public Adapter caseDataField(DataField object)
      {
        return createDataFieldAdapter();
      }
      @Override
      public Adapter caseCategorical(Categorical object)
      {
        return createCategoricalAdapter();
      }
      @Override
      public Adapter caseContinuous(Continuous object)
      {
        return createContinuousAdapter();
      }
      @Override
      public Adapter caseDate(Date object)
      {
        return createDateAdapter();
      }
      @Override
      public Adapter caseInterval(Interval object)
      {
        return createIntervalAdapter();
      }
      @Override
      public Adapter caseIntervalDate(IntervalDate object)
      {
        return createIntervalDateAdapter();
      }
      @Override
      public Adapter caseValueField(ValueField object)
      {
        return createValueFieldAdapter();
      }
      @Override
      public Adapter caseContract(Contract object)
      {
        return createContractAdapter();
      }
      @Override
      public Adapter caseEnvironment(Environment object)
      {
        return createEnvironmentAdapter();
      }
      @Override
      public Adapter caseLocal(Local object)
      {
        return createLocalAdapter();
      }
      @Override
      public Adapter caseAzureCI(AzureCI object)
      {
        return createAzureCIAdapter();
      }
      @Override
      public Adapter caseAmazonECS(AmazonECS object)
      {
        return createAmazonECSAdapter();
      }
      @Override
      public Adapter caseDevelopmentTool(DevelopmentTool object)
      {
        return createDevelopmentToolAdapter();
      }
      @Override
      public Adapter caseStorage(Storage object)
      {
        return createStorageAdapter();
      }
      @Override
      public Adapter caseDatabase(Database object)
      {
        return createDatabaseAdapter();
      }
      @Override
      public Adapter caseAuthentication(Authentication object)
      {
        return createAuthenticationAdapter();
      }
      @Override
      public Adapter caseCredentials(Credentials object)
      {
        return createCredentialsAdapter();
      }
      @Override
      public Adapter caseSSL(SSL object)
      {
        return createSSLAdapter();
      }
      @Override
      public Adapter caseOAuth2(OAuth2 object)
      {
        return createOAuth2Adapter();
      }
      @Override
      public Adapter caseAWS(AWS object)
      {
        return createAWSAdapter();
      }
      @Override
      public Adapter caseSource(Source object)
      {
        return createSourceAdapter();
      }
      @Override
      public Adapter caseFile(File object)
      {
        return createFileAdapter();
      }
      @Override
      public Adapter caseTable(Table object)
      {
        return createTableAdapter();
      }
      @Override
      public Adapter caseFolder(Folder object)
      {
        return createFolderAdapter();
      }
      @Override
      public Adapter caseLocalFolder(LocalFolder object)
      {
        return createLocalFolderAdapter();
      }
      @Override
      public Adapter caseAmazonS3(AmazonS3 object)
      {
        return createAmazonS3Adapter();
      }
      @Override
      public Adapter caseAzureBlob(AzureBlob object)
      {
        return createAzureBlobAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Workflow <em>Workflow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Workflow
   * @generated
   */
  public Adapter createWorkflowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.ProcessingStep <em>Processing Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.ProcessingStep
   * @generated
   */
  public Adapter createProcessingStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.DataProcessing <em>Data Processing</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.DataProcessing
   * @generated
   */
  public Adapter createDataProcessingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.PMMLModel <em>PMML Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.PMMLModel
   * @generated
   */
  public Adapter createPMMLModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Test <em>Test</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Test
   * @generated
   */
  public Adapter createTestAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Link <em>Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Link
   * @generated
   */
  public Adapter createLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Argument <em>Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Argument
   * @generated
   */
  public Adapter createArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Map <em>Map</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Map
   * @generated
   */
  public Adapter createMapAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Primitive <em>Primitive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Primitive
   * @generated
   */
  public Adapter createPrimitiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.DerivedField <em>Derived Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.DerivedField
   * @generated
   */
  public Adapter createDerivedFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.FilterValue <em>Filter Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.FilterValue
   * @generated
   */
  public Adapter createFilterValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.DiscretizeBin <em>Discretize Bin</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.DiscretizeBin
   * @generated
   */
  public Adapter createDiscretizeBinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.FieldRange <em>Field Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.FieldRange
   * @generated
   */
  public Adapter createFieldRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.MathOp <em>Math Op</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.MathOp
   * @generated
   */
  public Adapter createMathOpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Join <em>Join</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Join
   * @generated
   */
  public Adapter createJoinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Operand <em>Operand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Operand
   * @generated
   */
  public Adapter createOperandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Field <em>Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Field
   * @generated
   */
  public Adapter createFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.FixValue <em>Fix Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.FixValue
   * @generated
   */
  public Adapter createFixValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.MatchingValue <em>Matching Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.MatchingValue
   * @generated
   */
  public Adapter createMatchingValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Range <em>Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Range
   * @generated
   */
  public Adapter createRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.DateRange <em>Date Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.DateRange
   * @generated
   */
  public Adapter createDateRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.SpecialValues <em>Special Values</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.SpecialValues
   * @generated
   */
  public Adapter createSpecialValuesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.ImputeType <em>Impute Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.ImputeType
   * @generated
   */
  public Adapter createImputeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.DerivedValue <em>Derived Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.DerivedValue
   * @generated
   */
  public Adapter createDerivedValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.NumOp <em>Num Op</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.NumOp
   * @generated
   */
  public Adapter createNumOpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.CastType <em>Cast Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.CastType
   * @generated
   */
  public Adapter createCastTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.DataDictionary <em>Data Dictionary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.DataDictionary
   * @generated
   */
  public Adapter createDataDictionaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.DataField <em>Data Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.DataField
   * @generated
   */
  public Adapter createDataFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Categorical <em>Categorical</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Categorical
   * @generated
   */
  public Adapter createCategoricalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Continuous <em>Continuous</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Continuous
   * @generated
   */
  public Adapter createContinuousAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Date <em>Date</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Date
   * @generated
   */
  public Adapter createDateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Interval <em>Interval</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Interval
   * @generated
   */
  public Adapter createIntervalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.IntervalDate <em>Interval Date</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.IntervalDate
   * @generated
   */
  public Adapter createIntervalDateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.ValueField <em>Value Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.ValueField
   * @generated
   */
  public Adapter createValueFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Contract <em>Contract</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Contract
   * @generated
   */
  public Adapter createContractAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Environment <em>Environment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Environment
   * @generated
   */
  public Adapter createEnvironmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Local <em>Local</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Local
   * @generated
   */
  public Adapter createLocalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.AzureCI <em>Azure CI</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.AzureCI
   * @generated
   */
  public Adapter createAzureCIAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.AmazonECS <em>Amazon ECS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.AmazonECS
   * @generated
   */
  public Adapter createAmazonECSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.DevelopmentTool <em>Development Tool</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.DevelopmentTool
   * @generated
   */
  public Adapter createDevelopmentToolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Storage <em>Storage</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Storage
   * @generated
   */
  public Adapter createStorageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Database <em>Database</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Database
   * @generated
   */
  public Adapter createDatabaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Authentication <em>Authentication</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Authentication
   * @generated
   */
  public Adapter createAuthenticationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Credentials <em>Credentials</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Credentials
   * @generated
   */
  public Adapter createCredentialsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.SSL <em>SSL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.SSL
   * @generated
   */
  public Adapter createSSLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.OAuth2 <em>OAuth2</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.OAuth2
   * @generated
   */
  public Adapter createOAuth2Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.AWS <em>AWS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.AWS
   * @generated
   */
  public Adapter createAWSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Source <em>Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Source
   * @generated
   */
  public Adapter createSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.File <em>File</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.File
   * @generated
   */
  public Adapter createFileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Table <em>Table</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Table
   * @generated
   */
  public Adapter createTableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.Folder <em>Folder</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.Folder
   * @generated
   */
  public Adapter createFolderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.LocalFolder <em>Local Folder</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.LocalFolder
   * @generated
   */
  public Adapter createLocalFolderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.AmazonS3 <em>Amazon S3</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.AmazonS3
   * @generated
   */
  public Adapter createAmazonS3Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.workflow.AzureBlob <em>Azure Blob</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.workflow.AzureBlob
   * @generated
   */
  public Adapter createAzureBlobAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //WorkflowAdapterFactory
