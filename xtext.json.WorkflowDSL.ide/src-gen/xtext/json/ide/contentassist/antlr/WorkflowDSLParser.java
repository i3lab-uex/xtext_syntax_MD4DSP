/*
 * generated by Xtext 2.40.0
 */
package xtext.json.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import xtext.json.ide.contentassist.antlr.internal.InternalWorkflowDSLParser;
import xtext.json.services.WorkflowDSLGrammarAccess;

public class WorkflowDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(WorkflowDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, WorkflowDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDataReaderAccess().getAlternatives(), "rule__DataReader__Alternatives");
			builder.put(grammarAccess.getDelimiterAccess().getAlternatives(), "rule__Delimiter__Alternatives");
			builder.put(grammarAccess.getContractAccess().getAlternatives(), "rule__Contract__Alternatives");
			builder.put(grammarAccess.getContractNameAccess().getAlternatives(), "rule__ContractName__Alternatives");
			builder.put(grammarAccess.getContractTypeAccess().getAlternatives(), "rule__ContractType__Alternatives");
			builder.put(grammarAccess.getContractFieldAccess().getAlternatives(), "rule__ContractField__Alternatives");
			builder.put(grammarAccess.getContractValueAccess().getAlternatives(), "rule__ContractValue__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getBelongOpAccess().getAlternatives(), "rule__BelongOp__Alternatives");
			builder.put(grammarAccess.getDataConditionAccess().getAlternatives(), "rule__DataCondition__Alternatives");
			builder.put(grammarAccess.getDataResultAccess().getAlternatives(), "rule__DataResult__Alternatives");
			builder.put(grammarAccess.getSpecialValueContractAccess().getAlternatives(), "rule__SpecialValueContract__Alternatives");
			builder.put(grammarAccess.getCastTypeContractAccess().getAlternatives(), "rule__CastTypeContract__Alternatives");
			builder.put(grammarAccess.getTransformationAccess().getAlternatives(), "rule__Transformation__Alternatives");
			builder.put(grammarAccess.getFilterConditionAccess().getAlternatives(), "rule__FilterCondition__Alternatives");
			builder.put(grammarAccess.getRangeBoundsAccess().getAlternatives(), "rule__RangeBounds__Alternatives");
			builder.put(grammarAccess.getBoundValueAccess().getAlternatives(), "rule__BoundValue__Alternatives");
			builder.put(grammarAccess.getStringFilterAccess().getAlternatives(), "rule__StringFilter__Alternatives");
			builder.put(grammarAccess.getPatternAccess().getAlternatives(), "rule__Pattern__Alternatives");
			builder.put(grammarAccess.getIncludeExcludeAccess().getAlternatives(), "rule__IncludeExclude__Alternatives");
			builder.put(grammarAccess.getColumnFilterAccess().getAlternatives(), "rule__ColumnFilter__Alternatives");
			builder.put(grammarAccess.getMappingAccess().getAlternatives(), "rule__Mapping__Alternatives");
			builder.put(grammarAccess.getMappingRuleAccess().getAlternatives(), "rule__MappingRule__Alternatives");
			builder.put(grammarAccess.getMappingModeAccess().getAlternatives(), "rule__MappingMode__Alternatives");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getFunctionAccess().getAlternatives(), "rule__Function__Alternatives");
			builder.put(grammarAccess.getOperandAccess().getAlternatives(), "rule__Operand__Alternatives");
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getIntervalAccess().getAlternatives(), "rule__Interval__Alternatives");
			builder.put(grammarAccess.getIntervalBoundAccess().getAlternatives(), "rule__IntervalBound__Alternatives");
			builder.put(grammarAccess.getBinModeAccess().getAlternatives(), "rule__BinMode__Alternatives");
			builder.put(grammarAccess.getTypeConversionAccess().getAlternatives(), "rule__TypeConversion__Alternatives");
			builder.put(grammarAccess.getDecimalSeparatorAccess().getAlternatives_2(), "rule__DecimalSeparator__Alternatives_2");
			builder.put(grammarAccess.getImputeMethodAccess().getAlternatives(), "rule__ImputeMethod__Alternatives");
			builder.put(grammarAccess.getValueListAccess().getAlternatives(), "rule__ValueList__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getStatisticalImputeAccess().getAlternatives(), "rule__StatisticalImpute__Alternatives");
			builder.put(grammarAccess.getSequentialImputeAccess().getAlternatives(), "rule__SequentialImpute__Alternatives");
			builder.put(grammarAccess.getAdvancedImputeAccess().getAlternatives(), "rule__AdvancedImpute__Alternatives");
			builder.put(grammarAccess.getInterpolationTypeAccess().getAlternatives(), "rule__InterpolationType__Alternatives");
			builder.put(grammarAccess.getReplacementStrategyAccess().getAlternatives(), "rule__ReplacementStrategy__Alternatives");
			builder.put(grammarAccess.getDetectionMethodAccess().getAlternatives(), "rule__DetectionMethod__Alternatives");
			builder.put(grammarAccess.getIQRParamsAccess().getAlternatives(), "rule__IQRParams__Alternatives");
			builder.put(grammarAccess.getEstimationTypeAccess().getAlternatives(), "rule__EstimationType__Alternatives");
			builder.put(grammarAccess.getOutlierScopeAccess().getAlternatives(), "rule__OutlierScope__Alternatives");
			builder.put(grammarAccess.getJoinTypeAccess().getAlternatives(), "rule__JoinType__Alternatives");
			builder.put(grammarAccess.getJoinConditionAccess().getAlternatives(), "rule__JoinCondition__Alternatives");
			builder.put(grammarAccess.getComparatorAccess().getAlternatives(), "rule__Comparator__Alternatives");
			builder.put(grammarAccess.getColumnAccess().getAlternatives(), "rule__Column__Alternatives");
			builder.put(grammarAccess.getColumnListAccess().getAlternatives(), "rule__ColumnList__Alternatives");
			builder.put(grammarAccess.getNumberAccess().getAlternatives(), "rule__Number__Alternatives");
			builder.put(grammarAccess.getFloatAccess().getAlternatives(), "rule__Float__Alternatives");
			builder.put(grammarAccess.getWorkflowAccess().getGroup(), "rule__Workflow__Group__0");
			builder.put(grammarAccess.getDataSourceAccess().getGroup(), "rule__DataSource__Group__0");
			builder.put(grammarAccess.getCSVReaderAccess().getGroup(), "rule__CSVReader__Group__0");
			builder.put(grammarAccess.getCSVReaderAccess().getGroup_3(), "rule__CSVReader__Group_3__0");
			builder.put(grammarAccess.getFileReaderAccess().getGroup(), "rule__FileReader__Group__0");
			builder.put(grammarAccess.getStepAccess().getGroup(), "rule__Step__Group__0");
			builder.put(grammarAccess.getStepAccess().getGroup_3(), "rule__Step__Group_3__0");
			builder.put(grammarAccess.getContractBlockAccess().getGroup(), "rule__ContractBlock__Group__0");
			builder.put(grammarAccess.getPreconditionAccess().getGroup(), "rule__Precondition__Group__0");
			builder.put(grammarAccess.getPostconditionAccess().getGroup(), "rule__Postcondition__Group__0");
			builder.put(grammarAccess.getInvariantAccess().getGroup(), "rule__Invariant__Group__0");
			builder.put(grammarAccess.getValueRangeContractAccess().getGroup(), "rule__ValueRangeContract__Group__0");
			builder.put(grammarAccess.getContractFieldAccess().getGroup_0(), "rule__ContractField__Group_0__0");
			builder.put(grammarAccess.getContractFieldAccess().getGroup_1(), "rule__ContractField__Group_1__0");
			builder.put(grammarAccess.getContractValueAccess().getGroup_0(), "rule__ContractValue__Group_0__0");
			builder.put(grammarAccess.getContractValueAccess().getGroup_1(), "rule__ContractValue__Group_1__0");
			builder.put(grammarAccess.getContractValueAccess().getGroup_2(), "rule__ContractValue__Group_2__0");
			builder.put(grammarAccess.getConditionContractAccess().getGroup(), "rule__ConditionContract__Group__0");
			builder.put(grammarAccess.getIfClauseAccess().getGroup(), "rule__IfClause__Group__0");
			builder.put(grammarAccess.getThenClauseAccess().getGroup(), "rule__ThenClause__Group__0");
			builder.put(grammarAccess.getCastTypeCheckAccess().getGroup(), "rule__CastTypeCheck__Group__0");
			builder.put(grammarAccess.getValueCheckAccess().getGroup(), "rule__ValueCheck__Group__0");
			builder.put(grammarAccess.getSpecialValueContractAccess().getGroup_0(), "rule__SpecialValueContract__Group_0__0");
			builder.put(grammarAccess.getSpecialValueContractAccess().getGroup_1(), "rule__SpecialValueContract__Group_1__0");
			builder.put(grammarAccess.getCastTypeContractAccess().getGroup_0(), "rule__CastTypeContract__Group_0__0");
			builder.put(grammarAccess.getCastTypeContractAccess().getGroup_1(), "rule__CastTypeContract__Group_1__0");
			builder.put(grammarAccess.getRowFilterAccess().getGroup(), "rule__RowFilter__Group__0");
			builder.put(grammarAccess.getMissingFilterAccess().getGroup(), "rule__MissingFilter__Group__0");
			builder.put(grammarAccess.getRangeFilterAccess().getGroup(), "rule__RangeFilter__Group__0");
			builder.put(grammarAccess.getRangeBoundsAccess().getGroup_0(), "rule__RangeBounds__Group_0__0");
			builder.put(grammarAccess.getRangeBoundsAccess().getGroup_1(), "rule__RangeBounds__Group_1__0");
			builder.put(grammarAccess.getRangeBoundsAccess().getGroup_2(), "rule__RangeBounds__Group_2__0");
			builder.put(grammarAccess.getRangeBoundsAccess().getGroup_3(), "rule__RangeBounds__Group_3__0");
			builder.put(grammarAccess.getStringFilterAccess().getGroup_0(), "rule__StringFilter__Group_0__0");
			builder.put(grammarAccess.getStringFilterAccess().getGroup_1(), "rule__StringFilter__Group_1__0");
			builder.put(grammarAccess.getColumnFilterAccess().getGroup_0(), "rule__ColumnFilter__Group_0__0");
			builder.put(grammarAccess.getColumnFilterAccess().getGroup_1(), "rule__ColumnFilter__Group_1__0");
			builder.put(grammarAccess.getColumnFilterAccess().getGroup_2(), "rule__ColumnFilter__Group_2__0");
			builder.put(grammarAccess.getColumnFilterAccess().getGroup_3(), "rule__ColumnFilter__Group_3__0");
			builder.put(grammarAccess.getValueMappingAccess().getGroup(), "rule__ValueMapping__Group__0");
			builder.put(grammarAccess.getMappingRulesAccess().getGroup(), "rule__MappingRules__Group__0");
			builder.put(grammarAccess.getMappingRulesAccess().getGroup_1(), "rule__MappingRules__Group_1__0");
			builder.put(grammarAccess.getMappingRuleAccess().getGroup_0(), "rule__MappingRule__Group_0__0");
			builder.put(grammarAccess.getMappingRuleAccess().getGroup_1(), "rule__MappingRule__Group_1__0");
			builder.put(grammarAccess.getSubstringMappingAccess().getGroup(), "rule__SubstringMapping__Group__0");
			builder.put(grammarAccess.getMappingModeAccess().getGroup_1(), "rule__MappingMode__Group_1__0");
			builder.put(grammarAccess.getMathOpAccess().getGroup(), "rule__MathOp__Group__0");
			builder.put(grammarAccess.getMathExpressionAccess().getGroup(), "rule__MathExpression__Group__0");
			builder.put(grammarAccess.getMathExpressionAccess().getGroup_1(), "rule__MathExpression__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_2(), "rule__FunctionCall__Group_2__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_2_1(), "rule__FunctionCall__Group_2_1__0");
			builder.put(grammarAccess.getBinnerAccess().getGroup(), "rule__Binner__Group__0");
			builder.put(grammarAccess.getBinDefinitionsAccess().getGroup(), "rule__BinDefinitions__Group__0");
			builder.put(grammarAccess.getBinDefinitionsAccess().getGroup_1(), "rule__BinDefinitions__Group_1__0");
			builder.put(grammarAccess.getBinDefAccess().getGroup(), "rule__BinDef__Group__0");
			builder.put(grammarAccess.getIntervalAccess().getGroup_0(), "rule__Interval__Group_0__0");
			builder.put(grammarAccess.getIntervalAccess().getGroup_1(), "rule__Interval__Group_1__0");
			builder.put(grammarAccess.getIntervalAccess().getGroup_2(), "rule__Interval__Group_2__0");
			builder.put(grammarAccess.getIntervalAccess().getGroup_3(), "rule__Interval__Group_3__0");
			builder.put(grammarAccess.getBinModeAccess().getGroup_1(), "rule__BinMode__Group_1__0");
			builder.put(grammarAccess.getTypeConversionAccess().getGroup_0(), "rule__TypeConversion__Group_0__0");
			builder.put(grammarAccess.getTypeConversionAccess().getGroup_1(), "rule__TypeConversion__Group_1__0");
			builder.put(grammarAccess.getTypeConversionAccess().getGroup_2(), "rule__TypeConversion__Group_2__0");
			builder.put(grammarAccess.getTypeConversionAccess().getGroup_3(), "rule__TypeConversion__Group_3__0");
			builder.put(grammarAccess.getTypeConversionAccess().getGroup_4(), "rule__TypeConversion__Group_4__0");
			builder.put(grammarAccess.getDecimalSeparatorAccess().getGroup(), "rule__DecimalSeparator__Group__0");
			builder.put(grammarAccess.getDateFormatAccess().getGroup(), "rule__DateFormat__Group__0");
			builder.put(grammarAccess.getImputationAccess().getGroup(), "rule__Imputation__Group__0");
			builder.put(grammarAccess.getFixedImputeAccess().getGroup(), "rule__FixedImpute__Group__0");
			builder.put(grammarAccess.getValueListAccess().getGroup_1(), "rule__ValueList__Group_1__0");
			builder.put(grammarAccess.getValueListAccess().getGroup_1_1(), "rule__ValueList__Group_1_1__0");
			builder.put(grammarAccess.getValueListAccess().getGroup_1_1_1(), "rule__ValueList__Group_1_1_1__0");
			builder.put(grammarAccess.getAdvancedImputeAccess().getGroup_0(), "rule__AdvancedImpute__Group_0__0");
			builder.put(grammarAccess.getAdvancedImputeAccess().getGroup_1(), "rule__AdvancedImpute__Group_1__0");
			builder.put(grammarAccess.getAdvancedImputeAccess().getGroup_1_1(), "rule__AdvancedImpute__Group_1_1__0");
			builder.put(grammarAccess.getAdvancedImputeAccess().getGroup_3(), "rule__AdvancedImpute__Group_3__0");
			builder.put(grammarAccess.getAdvancedImputeAccess().getGroup_3_1(), "rule__AdvancedImpute__Group_3_1__0");
			builder.put(grammarAccess.getOutlierTreatmentAccess().getGroup(), "rule__OutlierTreatment__Group__0");
			builder.put(grammarAccess.getOutlierStrategyAccess().getGroup(), "rule__OutlierStrategy__Group__0");
			builder.put(grammarAccess.getReplacementStrategyAccess().getGroup_3(), "rule__ReplacementStrategy__Group_3__0");
			builder.put(grammarAccess.getIQRMethodAccess().getGroup(), "rule__IQRMethod__Group__0");
			builder.put(grammarAccess.getIQRParamsAccess().getGroup_0(), "rule__IQRParams__Group_0__0");
			builder.put(grammarAccess.getIQRParamsAccess().getGroup_1(), "rule__IQRParams__Group_1__0");
			builder.put(grammarAccess.getZScoreMethodAccess().getGroup(), "rule__ZScoreMethod__Group__0");
			builder.put(grammarAccess.getZScoreMethodAccess().getGroup_1(), "rule__ZScoreMethod__Group_1__0");
			builder.put(grammarAccess.getPercentileMethodAccess().getGroup(), "rule__PercentileMethod__Group__0");
			builder.put(grammarAccess.getOutlierOptionsAccess().getGroup(), "rule__OutlierOptions__Group__0");
			builder.put(grammarAccess.getJoinAccess().getGroup(), "rule__Join__Group__0");
			builder.put(grammarAccess.getJoinSpecAccess().getGroup(), "rule__JoinSpec__Group__0");
			builder.put(grammarAccess.getJoinConditionsAccess().getGroup(), "rule__JoinConditions__Group__0");
			builder.put(grammarAccess.getJoinConditionsAccess().getGroup_1(), "rule__JoinConditions__Group_1__0");
			builder.put(grammarAccess.getJoinConditionAccess().getGroup_0(), "rule__JoinCondition__Group_0__0");
			builder.put(grammarAccess.getJoinConditionAccess().getGroup_1(), "rule__JoinCondition__Group_1__0");
			builder.put(grammarAccess.getJoinOptionsAccess().getGroup(), "rule__JoinOptions__Group__0");
			builder.put(grammarAccess.getColumnAccess().getGroup_1(), "rule__Column__Group_1__0");
			builder.put(grammarAccess.getColumnListAccess().getGroup_0(), "rule__ColumnList__Group_0__0");
			builder.put(grammarAccess.getColumnListAccess().getGroup_0_1(), "rule__ColumnList__Group_0_1__0");
			builder.put(grammarAccess.getNumberAccess().getGroup_0(), "rule__Number__Group_0__0");
			builder.put(grammarAccess.getNumberAccess().getGroup_0_1(), "rule__Number__Group_0_1__0");
			builder.put(grammarAccess.getNumberAccess().getGroup_1(), "rule__Number__Group_1__0");
			builder.put(grammarAccess.getFloatAccess().getGroup_0(), "rule__Float__Group_0__0");
			builder.put(grammarAccess.getFloatAccess().getGroup_1(), "rule__Float__Group_1__0");
			builder.put(grammarAccess.getFloatAccess().getGroup_2(), "rule__Float__Group_2__0");
			builder.put(grammarAccess.getRegexAccess().getGroup(), "rule__Regex__Group__0");
			builder.put(grammarAccess.getWorkflowAccess().getNameAssignment_1(), "rule__Workflow__NameAssignment_1");
			builder.put(grammarAccess.getWorkflowAccess().getSourceAssignment_3(), "rule__Workflow__SourceAssignment_3");
			builder.put(grammarAccess.getWorkflowAccess().getBodyAssignment_4(), "rule__Workflow__BodyAssignment_4");
			builder.put(grammarAccess.getDataSourceAccess().getNameAssignment_1(), "rule__DataSource__NameAssignment_1");
			builder.put(grammarAccess.getDataSourceAccess().getReaderAssignment_3(), "rule__DataSource__ReaderAssignment_3");
			builder.put(grammarAccess.getCSVReaderAccess().getFilePathAssignment_2(), "rule__CSVReader__FilePathAssignment_2");
			builder.put(grammarAccess.getCSVReaderAccess().getDelimiterAssignment_3_1(), "rule__CSVReader__DelimiterAssignment_3_1");
			builder.put(grammarAccess.getFileReaderAccess().getFilePathAssignment_2(), "rule__FileReader__FilePathAssignment_2");
			builder.put(grammarAccess.getFilePathAccess().getPathAssignment(), "rule__FilePath__PathAssignment");
			builder.put(grammarAccess.getDelimiterAccess().getValueAssignment_4(), "rule__Delimiter__ValueAssignment_4");
			builder.put(grammarAccess.getWorkflowBodyAccess().getStepsAssignment(), "rule__WorkflowBody__StepsAssignment");
			builder.put(grammarAccess.getStepAccess().getNameAssignment_0(), "rule__Step__NameAssignment_0");
			builder.put(grammarAccess.getStepAccess().getTransformationAssignment_2(), "rule__Step__TransformationAssignment_2");
			builder.put(grammarAccess.getStepAccess().getTargetAssignment_3_1(), "rule__Step__TargetAssignment_3_1");
			builder.put(grammarAccess.getStepAccess().getContractsAssignment_4(), "rule__Step__ContractsAssignment_4");
			builder.put(grammarAccess.getContractBlockAccess().getContractsAssignment_2(), "rule__ContractBlock__ContractsAssignment_2");
			builder.put(grammarAccess.getPreconditionAccess().getNameAssignment_1(), "rule__Precondition__NameAssignment_1");
			builder.put(grammarAccess.getPreconditionAccess().getBodyAssignment_3(), "rule__Precondition__BodyAssignment_3");
			builder.put(grammarAccess.getPostconditionAccess().getNameAssignment_1(), "rule__Postcondition__NameAssignment_1");
			builder.put(grammarAccess.getPostconditionAccess().getBodyAssignment_3(), "rule__Postcondition__BodyAssignment_3");
			builder.put(grammarAccess.getInvariantAccess().getNameAssignment_1(), "rule__Invariant__NameAssignment_1");
			builder.put(grammarAccess.getInvariantAccess().getBodyAssignment_3(), "rule__Invariant__BodyAssignment_3");
			builder.put(grammarAccess.getContractNameAccess().getNameAssignment_0(), "rule__ContractName__NameAssignment_0");
			builder.put(grammarAccess.getContractNameAccess().getNameAssignment_1(), "rule__ContractName__NameAssignment_1");
			builder.put(grammarAccess.getContractBodyAccess().getTypeAssignment(), "rule__ContractBody__TypeAssignment");
			builder.put(grammarAccess.getValueRangeContractAccess().getFieldAssignment_2(), "rule__ValueRangeContract__FieldAssignment_2");
			builder.put(grammarAccess.getValueRangeContractAccess().getValueAssignment_4(), "rule__ValueRangeContract__ValueAssignment_4");
			builder.put(grammarAccess.getContractFieldAccess().getColumnAssignment_0_2(), "rule__ContractField__ColumnAssignment_0_2");
			builder.put(grammarAccess.getContractFieldAccess().getColumnAssignment_1_2(), "rule__ContractField__ColumnAssignment_1_2");
			builder.put(grammarAccess.getContractValueAccess().getTypeAssignment_0_1(), "rule__ContractValue__TypeAssignment_0_1");
			builder.put(grammarAccess.getContractValueAccess().getBoundsAssignment_1_1(), "rule__ContractValue__BoundsAssignment_1_1");
			builder.put(grammarAccess.getContractValueAccess().getValueAssignment_2_1(), "rule__ContractValue__ValueAssignment_2_1");
			builder.put(grammarAccess.getConditionContractAccess().getIfClauseAssignment_2(), "rule__ConditionContract__IfClauseAssignment_2");
			builder.put(grammarAccess.getConditionContractAccess().getThenClauseAssignment_3(), "rule__ConditionContract__ThenClauseAssignment_3");
			builder.put(grammarAccess.getIfClauseAccess().getFieldAssignment_1(), "rule__IfClause__FieldAssignment_1");
			builder.put(grammarAccess.getIfClauseAccess().getOpAssignment_2(), "rule__IfClause__OpAssignment_2");
			builder.put(grammarAccess.getIfClauseAccess().getConditionAssignment_3(), "rule__IfClause__ConditionAssignment_3");
			builder.put(grammarAccess.getThenClauseAccess().getFieldAssignment_1(), "rule__ThenClause__FieldAssignment_1");
			builder.put(grammarAccess.getThenClauseAccess().getOpAssignment_2(), "rule__ThenClause__OpAssignment_2");
			builder.put(grammarAccess.getThenClauseAccess().getResultAssignment_3(), "rule__ThenClause__ResultAssignment_3");
			builder.put(grammarAccess.getCastTypeCheckAccess().getTypeAssignment_1(), "rule__CastTypeCheck__TypeAssignment_1");
			builder.put(grammarAccess.getValueCheckAccess().getValueAssignment_1(), "rule__ValueCheck__ValueAssignment_1");
			builder.put(grammarAccess.getSpecialValueContractAccess().getFieldAssignment_0_2(), "rule__SpecialValueContract__FieldAssignment_0_2");
			builder.put(grammarAccess.getSpecialValueContractAccess().getFieldAssignment_1_2(), "rule__SpecialValueContract__FieldAssignment_1_2");
			builder.put(grammarAccess.getCastTypeContractAccess().getTypeAssignment_0_1(), "rule__CastTypeContract__TypeAssignment_0_1");
			builder.put(grammarAccess.getCastTypeContractAccess().getFieldAssignment_0_3(), "rule__CastTypeContract__FieldAssignment_0_3");
			builder.put(grammarAccess.getCastTypeContractAccess().getTypeAssignment_1_1(), "rule__CastTypeContract__TypeAssignment_1_1");
			builder.put(grammarAccess.getCastTypeContractAccess().getFieldAssignment_1_3(), "rule__CastTypeContract__FieldAssignment_1_3");
			builder.put(grammarAccess.getRowFilterAccess().getConditionAssignment_2(), "rule__RowFilter__ConditionAssignment_2");
			builder.put(grammarAccess.getMissingFilterAccess().getColumnsAssignment_2(), "rule__MissingFilter__ColumnsAssignment_2");
			builder.put(grammarAccess.getMissingFilterAccess().getIncludeExcludeAssignment_4(), "rule__MissingFilter__IncludeExcludeAssignment_4");
			builder.put(grammarAccess.getRangeFilterAccess().getColumnAssignment_2(), "rule__RangeFilter__ColumnAssignment_2");
			builder.put(grammarAccess.getRangeFilterAccess().getBoundsAssignment_4(), "rule__RangeFilter__BoundsAssignment_4");
			builder.put(grammarAccess.getRangeFilterAccess().getIncludeExcludeAssignment_6(), "rule__RangeFilter__IncludeExcludeAssignment_6");
			builder.put(grammarAccess.getRangeBoundsAccess().getLowerAssignment_0_1(), "rule__RangeBounds__LowerAssignment_0_1");
			builder.put(grammarAccess.getRangeBoundsAccess().getUpperAssignment_0_3(), "rule__RangeBounds__UpperAssignment_0_3");
			builder.put(grammarAccess.getRangeBoundsAccess().getLowerAssignment_1_1(), "rule__RangeBounds__LowerAssignment_1_1");
			builder.put(grammarAccess.getRangeBoundsAccess().getUpperAssignment_1_3(), "rule__RangeBounds__UpperAssignment_1_3");
			builder.put(grammarAccess.getRangeBoundsAccess().getLowerAssignment_2_1(), "rule__RangeBounds__LowerAssignment_2_1");
			builder.put(grammarAccess.getRangeBoundsAccess().getUpperAssignment_2_3(), "rule__RangeBounds__UpperAssignment_2_3");
			builder.put(grammarAccess.getRangeBoundsAccess().getLowerAssignment_3_1(), "rule__RangeBounds__LowerAssignment_3_1");
			builder.put(grammarAccess.getRangeBoundsAccess().getUpperAssignment_3_3(), "rule__RangeBounds__UpperAssignment_3_3");
			builder.put(grammarAccess.getBoundValueAccess().getValueAssignment_0(), "rule__BoundValue__ValueAssignment_0");
			builder.put(grammarAccess.getStringFilterAccess().getColumnAssignment_0_2(), "rule__StringFilter__ColumnAssignment_0_2");
			builder.put(grammarAccess.getStringFilterAccess().getPatternAssignment_0_4(), "rule__StringFilter__PatternAssignment_0_4");
			builder.put(grammarAccess.getStringFilterAccess().getIncludeExcludeAssignment_0_6(), "rule__StringFilter__IncludeExcludeAssignment_0_6");
			builder.put(grammarAccess.getStringFilterAccess().getColumnAssignment_1_2(), "rule__StringFilter__ColumnAssignment_1_2");
			builder.put(grammarAccess.getStringFilterAccess().getPatternAssignment_1_4(), "rule__StringFilter__PatternAssignment_1_4");
			builder.put(grammarAccess.getStringFilterAccess().getIncludeExcludeAssignment_1_6(), "rule__StringFilter__IncludeExcludeAssignment_1_6");
			builder.put(grammarAccess.getPatternAccess().getValueAssignment_0(), "rule__Pattern__ValueAssignment_0");
			builder.put(grammarAccess.getPatternAccess().getRegexAssignment_1(), "rule__Pattern__RegexAssignment_1");
			builder.put(grammarAccess.getColumnFilterAccess().getColumnsAssignment_0_2(), "rule__ColumnFilter__ColumnsAssignment_0_2");
			builder.put(grammarAccess.getColumnFilterAccess().getColumnsAssignment_1_2(), "rule__ColumnFilter__ColumnsAssignment_1_2");
			builder.put(grammarAccess.getColumnFilterAccess().getColumnsAssignment_2_2(), "rule__ColumnFilter__ColumnsAssignment_2_2");
			builder.put(grammarAccess.getColumnFilterAccess().getColumnsAssignment_3_2(), "rule__ColumnFilter__ColumnsAssignment_3_2");
			builder.put(grammarAccess.getValueMappingAccess().getColumnAssignment_2(), "rule__ValueMapping__ColumnAssignment_2");
			builder.put(grammarAccess.getValueMappingAccess().getRulesAssignment_5(), "rule__ValueMapping__RulesAssignment_5");
			builder.put(grammarAccess.getValueMappingAccess().getModeAssignment_7(), "rule__ValueMapping__ModeAssignment_7");
			builder.put(grammarAccess.getMappingRulesAccess().getRulesAssignment_0(), "rule__MappingRules__RulesAssignment_0");
			builder.put(grammarAccess.getMappingRulesAccess().getRulesAssignment_1_1(), "rule__MappingRules__RulesAssignment_1_1");
			builder.put(grammarAccess.getMappingRuleAccess().getFromAssignment_0_0(), "rule__MappingRule__FromAssignment_0_0");
			builder.put(grammarAccess.getMappingRuleAccess().getToAssignment_0_2(), "rule__MappingRule__ToAssignment_0_2");
			builder.put(grammarAccess.getMappingRuleAccess().getPatternAssignment_1_0(), "rule__MappingRule__PatternAssignment_1_0");
			builder.put(grammarAccess.getMappingRuleAccess().getToAssignment_1_2(), "rule__MappingRule__ToAssignment_1_2");
			builder.put(grammarAccess.getSubstringMappingAccess().getColumnAssignment_2(), "rule__SubstringMapping__ColumnAssignment_2");
			builder.put(grammarAccess.getSubstringMappingAccess().getFromAssignment_4(), "rule__SubstringMapping__FromAssignment_4");
			builder.put(grammarAccess.getSubstringMappingAccess().getToAssignment_6(), "rule__SubstringMapping__ToAssignment_6");
			builder.put(grammarAccess.getSubstringMappingAccess().getModeAssignment_8(), "rule__SubstringMapping__ModeAssignment_8");
			builder.put(grammarAccess.getMappingModeAccess().getNewNameAssignment_1_1(), "rule__MappingMode__NewNameAssignment_1_1");
			builder.put(grammarAccess.getMathOpAccess().getExpressionAssignment_2(), "rule__MathOp__ExpressionAssignment_2");
			builder.put(grammarAccess.getMathOpAccess().getNewNameAssignment_5(), "rule__MathOp__NewNameAssignment_5");
			builder.put(grammarAccess.getMathExpressionAccess().getOperatorAssignment_1_0(), "rule__MathExpression__OperatorAssignment_1_0");
			builder.put(grammarAccess.getMathExpressionAccess().getRightAssignment_1_1(), "rule__MathExpression__RightAssignment_1_1");
			builder.put(grammarAccess.getPrimaryAccess().getOperandAssignment_0(), "rule__Primary__OperandAssignment_0");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_1(), "rule__Primary__ExpressionAssignment_1_1");
			builder.put(grammarAccess.getPrimaryAccess().getCallAssignment_2(), "rule__Primary__CallAssignment_2");
			builder.put(grammarAccess.getFunctionCallAccess().getFunctionAssignment_0(), "rule__FunctionCall__FunctionAssignment_0");
			builder.put(grammarAccess.getFunctionCallAccess().getOperandsAssignment_2_0(), "rule__FunctionCall__OperandsAssignment_2_0");
			builder.put(grammarAccess.getFunctionCallAccess().getOperandsAssignment_2_1_1(), "rule__FunctionCall__OperandsAssignment_2_1_1");
			builder.put(grammarAccess.getOperandAccess().getColumnAssignment_0(), "rule__Operand__ColumnAssignment_0");
			builder.put(grammarAccess.getOperandAccess().getNumberAssignment_1(), "rule__Operand__NumberAssignment_1");
			builder.put(grammarAccess.getOperandAccess().getStringAssignment_2(), "rule__Operand__StringAssignment_2");
			builder.put(grammarAccess.getBinnerAccess().getColumnAssignment_2(), "rule__Binner__ColumnAssignment_2");
			builder.put(grammarAccess.getBinnerAccess().getDefinitionsAssignment_5(), "rule__Binner__DefinitionsAssignment_5");
			builder.put(grammarAccess.getBinnerAccess().getModeAssignment_7(), "rule__Binner__ModeAssignment_7");
			builder.put(grammarAccess.getBinDefinitionsAccess().getDefinitionsAssignment_0(), "rule__BinDefinitions__DefinitionsAssignment_0");
			builder.put(grammarAccess.getBinDefinitionsAccess().getDefinitionsAssignment_1_1(), "rule__BinDefinitions__DefinitionsAssignment_1_1");
			builder.put(grammarAccess.getBinDefAccess().getNameAssignment_0(), "rule__BinDef__NameAssignment_0");
			builder.put(grammarAccess.getBinDefAccess().getIntervalAssignment_2(), "rule__BinDef__IntervalAssignment_2");
			builder.put(grammarAccess.getBinNameAccess().getNameAssignment(), "rule__BinName__NameAssignment");
			builder.put(grammarAccess.getIntervalAccess().getLowerAssignment_0_1(), "rule__Interval__LowerAssignment_0_1");
			builder.put(grammarAccess.getIntervalAccess().getUpperAssignment_0_3(), "rule__Interval__UpperAssignment_0_3");
			builder.put(grammarAccess.getIntervalAccess().getLowerAssignment_1_1(), "rule__Interval__LowerAssignment_1_1");
			builder.put(grammarAccess.getIntervalAccess().getUpperAssignment_1_3(), "rule__Interval__UpperAssignment_1_3");
			builder.put(grammarAccess.getIntervalAccess().getLowerAssignment_2_1(), "rule__Interval__LowerAssignment_2_1");
			builder.put(grammarAccess.getIntervalAccess().getUpperAssignment_2_3(), "rule__Interval__UpperAssignment_2_3");
			builder.put(grammarAccess.getIntervalAccess().getLowerAssignment_3_1(), "rule__Interval__LowerAssignment_3_1");
			builder.put(grammarAccess.getIntervalAccess().getUpperAssignment_3_3(), "rule__Interval__UpperAssignment_3_3");
			builder.put(grammarAccess.getIntervalBoundAccess().getValueAssignment_0(), "rule__IntervalBound__ValueAssignment_0");
			builder.put(grammarAccess.getBinModeAccess().getNewNameAssignment_1_1(), "rule__BinMode__NewNameAssignment_1_1");
			builder.put(grammarAccess.getTypeConversionAccess().getColumnsAssignment_0_2(), "rule__TypeConversion__ColumnsAssignment_0_2");
			builder.put(grammarAccess.getTypeConversionAccess().getSeparatorAssignment_0_4(), "rule__TypeConversion__SeparatorAssignment_0_4");
			builder.put(grammarAccess.getTypeConversionAccess().getColumnsAssignment_1_2(), "rule__TypeConversion__ColumnsAssignment_1_2");
			builder.put(grammarAccess.getTypeConversionAccess().getColumnsAssignment_2_2(), "rule__TypeConversion__ColumnsAssignment_2_2");
			builder.put(grammarAccess.getTypeConversionAccess().getColumnsAssignment_3_2(), "rule__TypeConversion__ColumnsAssignment_3_2");
			builder.put(grammarAccess.getTypeConversionAccess().getColumnsAssignment_4_2(), "rule__TypeConversion__ColumnsAssignment_4_2");
			builder.put(grammarAccess.getTypeConversionAccess().getFormatAssignment_4_4(), "rule__TypeConversion__FormatAssignment_4_4");
			builder.put(grammarAccess.getDateFormatAccess().getFormatAssignment_2(), "rule__DateFormat__FormatAssignment_2");
			builder.put(grammarAccess.getImputationAccess().getColumnsAssignment_2(), "rule__Imputation__ColumnsAssignment_2");
			builder.put(grammarAccess.getImputationAccess().getMethodAssignment_5(), "rule__Imputation__MethodAssignment_5");
			builder.put(grammarAccess.getFixedImputeAccess().getValuesAssignment_2(), "rule__FixedImpute__ValuesAssignment_2");
			builder.put(grammarAccess.getValueListAccess().getValueAssignment_0(), "rule__ValueList__ValueAssignment_0");
			builder.put(grammarAccess.getValueListAccess().getValuesAssignment_1_1_0(), "rule__ValueList__ValuesAssignment_1_1_0");
			builder.put(grammarAccess.getValueListAccess().getValuesAssignment_1_1_1_1(), "rule__ValueList__ValuesAssignment_1_1_1_1");
			builder.put(grammarAccess.getValueAccess().getNumberAssignment_0(), "rule__Value__NumberAssignment_0");
			builder.put(grammarAccess.getValueAccess().getStringAssignment_1(), "rule__Value__StringAssignment_1");
			builder.put(grammarAccess.getAdvancedImputeAccess().getTypeAssignment_0_1(), "rule__AdvancedImpute__TypeAssignment_0_1");
			builder.put(grammarAccess.getAdvancedImputeAccess().getWindowSizeAssignment_1_1_2(), "rule__AdvancedImpute__WindowSizeAssignment_1_1_2");
			builder.put(grammarAccess.getAdvancedImputeAccess().getDegreeAssignment_3_1_2(), "rule__AdvancedImpute__DegreeAssignment_3_1_2");
			builder.put(grammarAccess.getOutlierTreatmentAccess().getColumnsAssignment_2(), "rule__OutlierTreatment__ColumnsAssignment_2");
			builder.put(grammarAccess.getOutlierTreatmentAccess().getStrategyAssignment_5(), "rule__OutlierTreatment__StrategyAssignment_5");
			builder.put(grammarAccess.getOutlierStrategyAccess().getReplacementAssignment_0(), "rule__OutlierStrategy__ReplacementAssignment_0");
			builder.put(grammarAccess.getOutlierStrategyAccess().getMethodAssignment_1(), "rule__OutlierStrategy__MethodAssignment_1");
			builder.put(grammarAccess.getOutlierStrategyAccess().getOptionsAssignment_2(), "rule__OutlierStrategy__OptionsAssignment_2");
			builder.put(grammarAccess.getReplacementStrategyAccess().getValueAssignment_3_2(), "rule__ReplacementStrategy__ValueAssignment_3_2");
			builder.put(grammarAccess.getIQRMethodAccess().getParamsAssignment_1(), "rule__IQRMethod__ParamsAssignment_1");
			builder.put(grammarAccess.getIQRParamsAccess().getScalarAssignment_0_2(), "rule__IQRParams__ScalarAssignment_0_2");
			builder.put(grammarAccess.getIQRParamsAccess().getEstimationAssignment_1_2(), "rule__IQRParams__EstimationAssignment_1_2");
			builder.put(grammarAccess.getZScoreMethodAccess().getThresholdAssignment_1_2(), "rule__ZScoreMethod__ThresholdAssignment_1_2");
			builder.put(grammarAccess.getPercentileMethodAccess().getLowerAssignment_3(), "rule__PercentileMethod__LowerAssignment_3");
			builder.put(grammarAccess.getPercentileMethodAccess().getUpperAssignment_6(), "rule__PercentileMethod__UpperAssignment_6");
			builder.put(grammarAccess.getOutlierOptionsAccess().getScopeAssignment_2(), "rule__OutlierOptions__ScopeAssignment_2");
			builder.put(grammarAccess.getJoinAccess().getLeftAssignment_2(), "rule__Join__LeftAssignment_2");
			builder.put(grammarAccess.getJoinAccess().getRightAssignment_4(), "rule__Join__RightAssignment_4");
			builder.put(grammarAccess.getJoinAccess().getSpecAssignment_7(), "rule__Join__SpecAssignment_7");
			builder.put(grammarAccess.getJoinSpecAccess().getTypeAssignment_0(), "rule__JoinSpec__TypeAssignment_0");
			builder.put(grammarAccess.getJoinSpecAccess().getConditionsAssignment_2(), "rule__JoinSpec__ConditionsAssignment_2");
			builder.put(grammarAccess.getJoinSpecAccess().getOptionsAssignment_3(), "rule__JoinSpec__OptionsAssignment_3");
			builder.put(grammarAccess.getJoinConditionsAccess().getConditionsAssignment_0(), "rule__JoinConditions__ConditionsAssignment_0");
			builder.put(grammarAccess.getJoinConditionsAccess().getConditionsAssignment_1_1(), "rule__JoinConditions__ConditionsAssignment_1_1");
			builder.put(grammarAccess.getJoinConditionAccess().getLeftAssignment_0_0(), "rule__JoinCondition__LeftAssignment_0_0");
			builder.put(grammarAccess.getJoinConditionAccess().getRightAssignment_0_2(), "rule__JoinCondition__RightAssignment_0_2");
			builder.put(grammarAccess.getJoinConditionAccess().getLeftAssignment_1_0(), "rule__JoinCondition__LeftAssignment_1_0");
			builder.put(grammarAccess.getJoinConditionAccess().getComparatorAssignment_1_1(), "rule__JoinCondition__ComparatorAssignment_1_1");
			builder.put(grammarAccess.getJoinConditionAccess().getRightAssignment_1_2(), "rule__JoinCondition__RightAssignment_1_2");
			builder.put(grammarAccess.getJoinOptionsAccess().getLeftSuffixAssignment_3(), "rule__JoinOptions__LeftSuffixAssignment_3");
			builder.put(grammarAccess.getJoinOptionsAccess().getRightSuffixAssignment_5(), "rule__JoinOptions__RightSuffixAssignment_5");
			builder.put(grammarAccess.getColumnAccess().getNameAssignment_0(), "rule__Column__NameAssignment_0");
			builder.put(grammarAccess.getColumnAccess().getTableAssignment_1_0(), "rule__Column__TableAssignment_1_0");
			builder.put(grammarAccess.getColumnAccess().getColumnAssignment_1_2(), "rule__Column__ColumnAssignment_1_2");
			builder.put(grammarAccess.getColumnListAccess().getColumnsAssignment_0_0(), "rule__ColumnList__ColumnsAssignment_0_0");
			builder.put(grammarAccess.getColumnListAccess().getColumnsAssignment_0_1_1(), "rule__ColumnList__ColumnsAssignment_0_1_1");
			builder.put(grammarAccess.getRegexAccess().getPatternAssignment_1(), "rule__Regex__PatternAssignment_1");
			builder.put(grammarAccess.getRegexAccess().getFlagsAssignment_3(), "rule__Regex__FlagsAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private WorkflowDSLGrammarAccess grammarAccess;

	@Override
	protected InternalWorkflowDSLParser createParser() {
		InternalWorkflowDSLParser result = new InternalWorkflowDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public WorkflowDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(WorkflowDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
