/**
 * generated by Xtext 2.40.0
 */
package xtext.mm_M4DS.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import xtext.mm_M4DS.Categorical;
import xtext.mm_M4DS.DataType;
import xtext.mm_M4DS.Mm_M4DSPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Categorical</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.mm_M4DS.impl.CategoricalImpl#getDataType <em>Data Type</em>}</li>
 *   <li>{@link xtext.mm_M4DS.impl.CategoricalImpl#getValidValues <em>Valid Values</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CategoricalImpl extends DataFieldImpl implements Categorical
{
  /**
   * The default value of the '{@link #getDataType() <em>Data Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataType()
   * @generated
   * @ordered
   */
  protected static final DataType DATA_TYPE_EDEFAULT = DataType.STRING;

  /**
   * The cached value of the '{@link #getDataType() <em>Data Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataType()
   * @generated
   * @ordered
   */
  protected DataType dataType = DATA_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getValidValues() <em>Valid Values</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValidValues()
   * @generated
   * @ordered
   */
  protected EList<String> validValues;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CategoricalImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Mm_M4DSPackage.Literals.CATEGORICAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataType getDataType()
  {
    return dataType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDataType(DataType newDataType)
  {
    DataType oldDataType = dataType;
    dataType = newDataType == null ? DATA_TYPE_EDEFAULT : newDataType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Mm_M4DSPackage.CATEGORICAL__DATA_TYPE, oldDataType, dataType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getValidValues()
  {
    if (validValues == null)
    {
      validValues = new EDataTypeEList<String>(String.class, this, Mm_M4DSPackage.CATEGORICAL__VALID_VALUES);
    }
    return validValues;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Mm_M4DSPackage.CATEGORICAL__DATA_TYPE:
        return getDataType();
      case Mm_M4DSPackage.CATEGORICAL__VALID_VALUES:
        return getValidValues();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Mm_M4DSPackage.CATEGORICAL__DATA_TYPE:
        setDataType((DataType)newValue);
        return;
      case Mm_M4DSPackage.CATEGORICAL__VALID_VALUES:
        getValidValues().clear();
        getValidValues().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Mm_M4DSPackage.CATEGORICAL__DATA_TYPE:
        setDataType(DATA_TYPE_EDEFAULT);
        return;
      case Mm_M4DSPackage.CATEGORICAL__VALID_VALUES:
        getValidValues().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Mm_M4DSPackage.CATEGORICAL__DATA_TYPE:
        return dataType != DATA_TYPE_EDEFAULT;
      case Mm_M4DSPackage.CATEGORICAL__VALID_VALUES:
        return validValues != null && !validValues.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (dataType: ");
    result.append(dataType);
    result.append(", validValues: ");
    result.append(validValues);
    result.append(')');
    return result.toString();
  }

} //CategoricalImpl
