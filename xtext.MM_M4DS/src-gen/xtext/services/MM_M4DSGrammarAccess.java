/*
 * generated by Xtext 2.40.0
 */
package xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MM_M4DSGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//// Root rule
		//Model:
		//    elements+=Element*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Element*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_0() { return cElementsElementParserRuleCall_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLibraryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWorkflowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cContractParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Element:
		//    Library | Workflow | Contract;
		@Override public ParserRule getRule() { return rule; }
		
		//Library | Workflow | Contract
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Library
		public RuleCall getLibraryParserRuleCall_0() { return cLibraryParserRuleCall_0; }
		
		//Workflow
		public RuleCall getWorkflowParserRuleCall_1() { return cWorkflowParserRuleCall_1; }
		
		//Contract
		public RuleCall getContractParserRuleCall_2() { return cContractParserRuleCall_2; }
	}
	public class LibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.Library");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLibraryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cJobsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cJobsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cJobsJobParserRuleCall_3_2_0 = (RuleCall)cJobsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cJobsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cJobsJobParserRuleCall_3_3_1_0 = (RuleCall)cJobsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTransformationsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cTransformationsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cTransformationsTransformationParserRuleCall_4_2_0 = (RuleCall)cTransformationsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cTransformationsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cTransformationsTransformationParserRuleCall_4_3_1_0 = (RuleCall)cTransformationsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Basic Library elements
		//Library:
		//    'Library' name=ID '{'
		//        ('jobs' '{' jobs+=Job ( "," jobs+=Job)* '}' )?
		//        ('transformations' '{' transformations+=Transformation ( "," transformations+=Transformation)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Library' name=ID '{'
		//    ('jobs' '{' jobs+=Job ( "," jobs+=Job)* '}' )?
		//    ('transformations' '{' transformations+=Transformation ( "," transformations+=Transformation)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Library'
		public Keyword getLibraryKeyword_0() { return cLibraryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('jobs' '{' jobs+=Job ( "," jobs+=Job)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'jobs'
		public Keyword getJobsKeyword_3_0() { return cJobsKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//jobs+=Job
		public Assignment getJobsAssignment_3_2() { return cJobsAssignment_3_2; }
		
		//Job
		public RuleCall getJobsJobParserRuleCall_3_2_0() { return cJobsJobParserRuleCall_3_2_0; }
		
		//( "," jobs+=Job)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//jobs+=Job
		public Assignment getJobsAssignment_3_3_1() { return cJobsAssignment_3_3_1; }
		
		//Job
		public RuleCall getJobsJobParserRuleCall_3_3_1_0() { return cJobsJobParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//('transformations' '{' transformations+=Transformation ( "," transformations+=Transformation)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'transformations'
		public Keyword getTransformationsKeyword_4_0() { return cTransformationsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//transformations+=Transformation
		public Assignment getTransformationsAssignment_4_2() { return cTransformationsAssignment_4_2; }
		
		//Transformation
		public RuleCall getTransformationsTransformationParserRuleCall_4_2_0() { return cTransformationsTransformationParserRuleCall_4_2_0; }
		
		//( "," transformations+=Transformation)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//transformations+=Transformation
		public Assignment getTransformationsAssignment_4_3_1() { return cTransformationsAssignment_4_3_1; }
		
		//Transformation
		public RuleCall getTransformationsTransformationParserRuleCall_4_3_1_0() { return cTransformationsTransformationParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class JobElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.Job");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJobKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInputKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputDataFieldParserRuleCall_4_0 = (RuleCall)cInputAssignment_4.eContents().get(0);
		private final Keyword cOutputKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOutputAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutputDataFieldParserRuleCall_6_0 = (RuleCall)cOutputAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cParametersKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cParametersAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_7_2_0 = (RuleCall)cParametersAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cParametersAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_7_3_1_0 = (RuleCall)cParametersAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Job:
		//    'Job' name=ID '{'
		//        'input' input=DataField
		//        'output' output=DataField
		//        ('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Job' name=ID '{'
		//    'input' input=DataField
		//    'output' output=DataField
		//    ('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Job'
		public Keyword getJobKeyword_0() { return cJobKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'input'
		public Keyword getInputKeyword_3() { return cInputKeyword_3; }
		
		//input=DataField
		public Assignment getInputAssignment_4() { return cInputAssignment_4; }
		
		//DataField
		public RuleCall getInputDataFieldParserRuleCall_4_0() { return cInputDataFieldParserRuleCall_4_0; }
		
		//'output'
		public Keyword getOutputKeyword_5() { return cOutputKeyword_5; }
		
		//output=DataField
		public Assignment getOutputAssignment_6() { return cOutputAssignment_6; }
		
		//DataField
		public RuleCall getOutputDataFieldParserRuleCall_6_0() { return cOutputDataFieldParserRuleCall_6_0; }
		
		//('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		public Group getGroup_7() { return cGroup_7; }
		
		//'parameters'
		public Keyword getParametersKeyword_7_0() { return cParametersKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_7_2() { return cParametersAssignment_7_2; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_7_2_0() { return cParametersParameterParserRuleCall_7_2_0; }
		
		//( "," parameters+=Parameter)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_7_3_1() { return cParametersAssignment_7_3_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_7_3_1_0() { return cParametersParameterParserRuleCall_7_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class TransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.Transformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransformationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInputKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputDataFieldParserRuleCall_4_0 = (RuleCall)cInputAssignment_4.eContents().get(0);
		private final Keyword cOutputKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOutputAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutputDataFieldParserRuleCall_6_0 = (RuleCall)cOutputAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cParametersKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cParametersAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_7_2_0 = (RuleCall)cParametersAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cParametersAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_7_3_1_0 = (RuleCall)cParametersAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Transformation:
		//    'Transformation' name=ID '{'
		//        'input' input=DataField
		//        'output' output=DataField
		//        ('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Transformation' name=ID '{'
		//    'input' input=DataField
		//    'output' output=DataField
		//    ('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Transformation'
		public Keyword getTransformationKeyword_0() { return cTransformationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'input'
		public Keyword getInputKeyword_3() { return cInputKeyword_3; }
		
		//input=DataField
		public Assignment getInputAssignment_4() { return cInputAssignment_4; }
		
		//DataField
		public RuleCall getInputDataFieldParserRuleCall_4_0() { return cInputDataFieldParserRuleCall_4_0; }
		
		//'output'
		public Keyword getOutputKeyword_5() { return cOutputKeyword_5; }
		
		//output=DataField
		public Assignment getOutputAssignment_6() { return cOutputAssignment_6; }
		
		//DataField
		public RuleCall getOutputDataFieldParserRuleCall_6_0() { return cOutputDataFieldParserRuleCall_6_0; }
		
		//('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		public Group getGroup_7() { return cGroup_7; }
		
		//'parameters'
		public Keyword getParametersKeyword_7_0() { return cParametersKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_7_2() { return cParametersAssignment_7_2; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_7_2_0() { return cParametersParameterParserRuleCall_7_2_0; }
		
		//( "," parameters+=Parameter)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_7_3_1() { return cParametersAssignment_7_3_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_7_3_1_0() { return cParametersParameterParserRuleCall_7_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class WorkflowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.Workflow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cStepsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cStepsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cStepsProcessingStepParserRuleCall_3_2_0 = (RuleCall)cStepsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cStepsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cStepsProcessingStepParserRuleCall_3_3_1_0 = (RuleCall)cStepsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDataFieldsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cDataFieldsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDataFieldsDataFieldParserRuleCall_4_2_0 = (RuleCall)cDataFieldsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cDataFieldsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cDataFieldsDataFieldParserRuleCall_4_3_1_0 = (RuleCall)cDataFieldsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cContractsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cContractsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cContractsContractParserRuleCall_5_2_0 = (RuleCall)cContractsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cContractsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cContractsContractParserRuleCall_5_3_1_0 = (RuleCall)cContractsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Basic Workflow elements
		//Workflow:
		//     'Workflow' name=ID '{'
		//      ('steps' '{' steps+=ProcessingStep ( "," steps+=ProcessingStep)* '}' )?
		//      ('dataFields' '{' dataFields+=DataField ( "," dataFields+=DataField)* '}' )?
		//      ('contracts' '{' contracts+=Contract ( "," contracts+=Contract)* '}' )?
		//     '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Workflow' name=ID '{'
		// ('steps' '{' steps+=ProcessingStep ( "," steps+=ProcessingStep)* '}' )?
		// ('dataFields' '{' dataFields+=DataField ( "," dataFields+=DataField)* '}' )?
		// ('contracts' '{' contracts+=Contract ( "," contracts+=Contract)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Workflow'
		public Keyword getWorkflowKeyword_0() { return cWorkflowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('steps' '{' steps+=ProcessingStep ( "," steps+=ProcessingStep)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'steps'
		public Keyword getStepsKeyword_3_0() { return cStepsKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//steps+=ProcessingStep
		public Assignment getStepsAssignment_3_2() { return cStepsAssignment_3_2; }
		
		//ProcessingStep
		public RuleCall getStepsProcessingStepParserRuleCall_3_2_0() { return cStepsProcessingStepParserRuleCall_3_2_0; }
		
		//( "," steps+=ProcessingStep)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//steps+=ProcessingStep
		public Assignment getStepsAssignment_3_3_1() { return cStepsAssignment_3_3_1; }
		
		//ProcessingStep
		public RuleCall getStepsProcessingStepParserRuleCall_3_3_1_0() { return cStepsProcessingStepParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//('dataFields' '{' dataFields+=DataField ( "," dataFields+=DataField)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'dataFields'
		public Keyword getDataFieldsKeyword_4_0() { return cDataFieldsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//dataFields+=DataField
		public Assignment getDataFieldsAssignment_4_2() { return cDataFieldsAssignment_4_2; }
		
		//DataField
		public RuleCall getDataFieldsDataFieldParserRuleCall_4_2_0() { return cDataFieldsDataFieldParserRuleCall_4_2_0; }
		
		//( "," dataFields+=DataField)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//dataFields+=DataField
		public Assignment getDataFieldsAssignment_4_3_1() { return cDataFieldsAssignment_4_3_1; }
		
		//DataField
		public RuleCall getDataFieldsDataFieldParserRuleCall_4_3_1_0() { return cDataFieldsDataFieldParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//('contracts' '{' contracts+=Contract ( "," contracts+=Contract)* '}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'contracts'
		public Keyword getContractsKeyword_5_0() { return cContractsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//contracts+=Contract
		public Assignment getContractsAssignment_5_2() { return cContractsAssignment_5_2; }
		
		//Contract
		public RuleCall getContractsContractParserRuleCall_5_2_0() { return cContractsContractParserRuleCall_5_2_0; }
		
		//( "," contracts+=Contract)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//contracts+=Contract
		public Assignment getContractsAssignment_5_3_1() { return cContractsAssignment_5_3_1; }
		
		//Contract
		public RuleCall getContractsContractParserRuleCall_5_3_1_0() { return cContractsContractParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ProcessingStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.ProcessingStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPMMLModelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataProcessingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ProcessingStep:
		//    PMMLModel | DataProcessing;
		@Override public ParserRule getRule() { return rule; }
		
		//PMMLModel | DataProcessing
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PMMLModel
		public RuleCall getPMMLModelParserRuleCall_0() { return cPMMLModelParserRuleCall_0; }
		
		//DataProcessing
		public RuleCall getDataProcessingParserRuleCall_1() { return cDataProcessingParserRuleCall_1; }
	}
	public class PMMLModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.PMMLModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPMMLModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFilePathKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFilePathAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFilePathSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cFilePathAssignment_3_1.eContents().get(0);
		private final Keyword cInputKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInputAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInputDataFieldParserRuleCall_5_0 = (RuleCall)cInputAssignment_5.eContents().get(0);
		private final Keyword cOutputKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOutputAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOutputDataFieldParserRuleCall_7_0 = (RuleCall)cOutputAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//PMMLModel:
		//    'PMMLModel' name=ID '{'
		//        ('filePath' filePath=STRING)?
		//        'input' input=DataField
		//        'output' output=DataField
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'PMMLModel' name=ID '{'
		//    ('filePath' filePath=STRING)?
		//    'input' input=DataField
		//    'output' output=DataField
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'PMMLModel'
		public Keyword getPMMLModelKeyword_0() { return cPMMLModelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('filePath' filePath=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'filePath'
		public Keyword getFilePathKeyword_3_0() { return cFilePathKeyword_3_0; }
		
		//filePath=STRING
		public Assignment getFilePathAssignment_3_1() { return cFilePathAssignment_3_1; }
		
		//STRING
		public RuleCall getFilePathSTRINGTerminalRuleCall_3_1_0() { return cFilePathSTRINGTerminalRuleCall_3_1_0; }
		
		//'input'
		public Keyword getInputKeyword_4() { return cInputKeyword_4; }
		
		//input=DataField
		public Assignment getInputAssignment_5() { return cInputAssignment_5; }
		
		//DataField
		public RuleCall getInputDataFieldParserRuleCall_5_0() { return cInputDataFieldParserRuleCall_5_0; }
		
		//'output'
		public Keyword getOutputKeyword_6() { return cOutputKeyword_6; }
		
		//output=DataField
		public Assignment getOutputAssignment_7() { return cOutputAssignment_7; }
		
		//DataField
		public RuleCall getOutputDataFieldParserRuleCall_7_0() { return cOutputDataFieldParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class DataProcessingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.DataProcessing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataProcessingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInputKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputDataFieldParserRuleCall_4_0 = (RuleCall)cInputAssignment_4.eContents().get(0);
		private final Keyword cOutputKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOutputAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutputDataFieldParserRuleCall_6_0 = (RuleCall)cOutputAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cOperationKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cOperationAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cOperationOperationEnumRuleCall_7_1_0 = (RuleCall)cOperationAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DataProcessing:
		//    'DataProcessing' name=ID '{'
		//        'input' input=DataField
		//        'output' output=DataField
		//        ('operation' operation=Operation)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DataProcessing' name=ID '{'
		//    'input' input=DataField
		//    'output' output=DataField
		//    ('operation' operation=Operation)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'DataProcessing'
		public Keyword getDataProcessingKeyword_0() { return cDataProcessingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'input'
		public Keyword getInputKeyword_3() { return cInputKeyword_3; }
		
		//input=DataField
		public Assignment getInputAssignment_4() { return cInputAssignment_4; }
		
		//DataField
		public RuleCall getInputDataFieldParserRuleCall_4_0() { return cInputDataFieldParserRuleCall_4_0; }
		
		//'output'
		public Keyword getOutputKeyword_5() { return cOutputKeyword_5; }
		
		//output=DataField
		public Assignment getOutputAssignment_6() { return cOutputAssignment_6; }
		
		//DataField
		public RuleCall getOutputDataFieldParserRuleCall_6_0() { return cOutputDataFieldParserRuleCall_6_0; }
		
		//('operation' operation=Operation)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'operation'
		public Keyword getOperationKeyword_7_0() { return cOperationKeyword_7_0; }
		
		//operation=Operation
		public Assignment getOperationAssignment_7_1() { return cOperationAssignment_7_1; }
		
		//Operation
		public RuleCall getOperationOperationEnumRuleCall_7_1_0() { return cOperationOperationEnumRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.Contract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConditionsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cConditionsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConditionsConditionParserRuleCall_3_2_0 = (RuleCall)cConditionsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cConditionsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_3_3_1_0 = (RuleCall)cConditionsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Basic Contract elements
		//Contract:
		//    'Contract' name=ID '{'
		//        ('conditions' '{' conditions+=Condition ( "," conditions+=Condition)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Contract' name=ID '{'
		//    ('conditions' '{' conditions+=Condition ( "," conditions+=Condition)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Contract'
		public Keyword getContractKeyword_0() { return cContractKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('conditions' '{' conditions+=Condition ( "," conditions+=Condition)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'conditions'
		public Keyword getConditionsKeyword_3_0() { return cConditionsKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_3_2() { return cConditionsAssignment_3_2; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_3_2_0() { return cConditionsConditionParserRuleCall_3_2_0; }
		
		//( "," conditions+=Condition)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_3_3_1() { return cConditionsAssignment_3_3_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_3_3_1_0() { return cConditionsConditionParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFieldKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFieldAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cFieldDataFieldCrossReference_4_0 = (CrossReference)cFieldAssignment_4.eContents().get(0);
		private final RuleCall cFieldDataFieldIDTerminalRuleCall_4_0_1 = (RuleCall)cFieldDataFieldCrossReference_4_0.eContents().get(1);
		private final Keyword cOperatorKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorComparisonOperatorEnumRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		private final Keyword cValueKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cValueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValueValueParserRuleCall_8_0 = (RuleCall)cValueAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Condition:
		//    'Condition' name=ID '{'
		//        'field' field=[DataField]
		//        'operator' operator=ComparisonOperator
		//        'value' value=Value
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Condition' name=ID '{'
		//    'field' field=[DataField]
		//    'operator' operator=ComparisonOperator
		//    'value' value=Value
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Condition'
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'field'
		public Keyword getFieldKeyword_3() { return cFieldKeyword_3; }
		
		//field=[DataField]
		public Assignment getFieldAssignment_4() { return cFieldAssignment_4; }
		
		//[DataField]
		public CrossReference getFieldDataFieldCrossReference_4_0() { return cFieldDataFieldCrossReference_4_0; }
		
		//ID
		public RuleCall getFieldDataFieldIDTerminalRuleCall_4_0_1() { return cFieldDataFieldIDTerminalRuleCall_4_0_1; }
		
		//'operator'
		public Keyword getOperatorKeyword_5() { return cOperatorKeyword_5; }
		
		//operator=ComparisonOperator
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//ComparisonOperator
		public RuleCall getOperatorComparisonOperatorEnumRuleCall_6_0() { return cOperatorComparisonOperatorEnumRuleCall_6_0; }
		
		//'value'
		public Keyword getValueKeyword_7() { return cValueKeyword_7; }
		
		//value=Value
		public Assignment getValueAssignment_8() { return cValueAssignment_8; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_8_0() { return cValueValueParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class DataFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.DataField");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCategoricalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContinuousParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDateFieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Common elements
		//DataField:
		//    Categorical | Continuous | DateField;
		@Override public ParserRule getRule() { return rule; }
		
		//Categorical | Continuous | DateField
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Categorical
		public RuleCall getCategoricalParserRuleCall_0() { return cCategoricalParserRuleCall_0; }
		
		//Continuous
		public RuleCall getContinuousParserRuleCall_1() { return cContinuousParserRuleCall_1; }
		
		//DateField
		public RuleCall getDateFieldParserRuleCall_2() { return cDateFieldParserRuleCall_2; }
	}
	public class CategoricalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.Categorical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCategoricalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDataTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDataTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDataTypeDataTypeEnumRuleCall_3_1_0 = (RuleCall)cDataTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cValidValuesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cValidValuesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cValidValuesSTRINGTerminalRuleCall_4_2_0 = (RuleCall)cValidValuesAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cValidValuesAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cValidValuesSTRINGTerminalRuleCall_4_3_1_0 = (RuleCall)cValidValuesAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Categorical:
		//    'Categorical' name=ID '{'
		//        ('dataType' dataType=DataType)?
		//        ('validValues' '{' validValues+=STRING ( "," validValues+=STRING)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Categorical' name=ID '{'
		//    ('dataType' dataType=DataType)?
		//    ('validValues' '{' validValues+=STRING ( "," validValues+=STRING)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Categorical'
		public Keyword getCategoricalKeyword_0() { return cCategoricalKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('dataType' dataType=DataType)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'dataType'
		public Keyword getDataTypeKeyword_3_0() { return cDataTypeKeyword_3_0; }
		
		//dataType=DataType
		public Assignment getDataTypeAssignment_3_1() { return cDataTypeAssignment_3_1; }
		
		//DataType
		public RuleCall getDataTypeDataTypeEnumRuleCall_3_1_0() { return cDataTypeDataTypeEnumRuleCall_3_1_0; }
		
		//('validValues' '{' validValues+=STRING ( "," validValues+=STRING)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'validValues'
		public Keyword getValidValuesKeyword_4_0() { return cValidValuesKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//validValues+=STRING
		public Assignment getValidValuesAssignment_4_2() { return cValidValuesAssignment_4_2; }
		
		//STRING
		public RuleCall getValidValuesSTRINGTerminalRuleCall_4_2_0() { return cValidValuesSTRINGTerminalRuleCall_4_2_0; }
		
		//( "," validValues+=STRING)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//validValues+=STRING
		public Assignment getValidValuesAssignment_4_3_1() { return cValidValuesAssignment_4_3_1; }
		
		//STRING
		public RuleCall getValidValuesSTRINGTerminalRuleCall_4_3_1_0() { return cValidValuesSTRINGTerminalRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ContinuousElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.Continuous");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContinuousKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDataTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDataTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDataTypeDataTypeEnumRuleCall_3_1_0 = (RuleCall)cDataTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMinKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMinAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMinNUMBERTerminalRuleCall_4_1_0 = (RuleCall)cMinAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cMaxKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMaxAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMaxNUMBERTerminalRuleCall_5_1_0 = (RuleCall)cMaxAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Continuous:
		//    'Continuous' name=ID '{'
		//        ('dataType' dataType=DataType)?
		//        ('min' min=NUMBER)?
		//        ('max' max=NUMBER)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Continuous' name=ID '{'
		//    ('dataType' dataType=DataType)?
		//    ('min' min=NUMBER)?
		//    ('max' max=NUMBER)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Continuous'
		public Keyword getContinuousKeyword_0() { return cContinuousKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('dataType' dataType=DataType)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'dataType'
		public Keyword getDataTypeKeyword_3_0() { return cDataTypeKeyword_3_0; }
		
		//dataType=DataType
		public Assignment getDataTypeAssignment_3_1() { return cDataTypeAssignment_3_1; }
		
		//DataType
		public RuleCall getDataTypeDataTypeEnumRuleCall_3_1_0() { return cDataTypeDataTypeEnumRuleCall_3_1_0; }
		
		//('min' min=NUMBER)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'min'
		public Keyword getMinKeyword_4_0() { return cMinKeyword_4_0; }
		
		//min=NUMBER
		public Assignment getMinAssignment_4_1() { return cMinAssignment_4_1; }
		
		//NUMBER
		public RuleCall getMinNUMBERTerminalRuleCall_4_1_0() { return cMinNUMBERTerminalRuleCall_4_1_0; }
		
		//('max' max=NUMBER)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'max'
		public Keyword getMaxKeyword_5_0() { return cMaxKeyword_5_0; }
		
		//max=NUMBER
		public Assignment getMaxAssignment_5_1() { return cMaxAssignment_5_1; }
		
		//NUMBER
		public RuleCall getMaxNUMBERTerminalRuleCall_5_1_0() { return cMaxNUMBERTerminalRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DateFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.DateField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFormatKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFormatAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFormatSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cFormatAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DateField:
		//    'Date' name=ID '{'
		//        ('format' format=STRING)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Date' name=ID '{'
		//    ('format' format=STRING)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Date'
		public Keyword getDateKeyword_0() { return cDateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('format' format=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'format'
		public Keyword getFormatKeyword_3_0() { return cFormatKeyword_3_0; }
		
		//format=STRING
		public Assignment getFormatAssignment_3_1() { return cFormatAssignment_3_1; }
		
		//STRING
		public RuleCall getFormatSTRINGTerminalRuleCall_3_1_0() { return cFormatSTRINGTerminalRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeDataTypeEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cValueKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Parameter:
		//    'Parameter' name=ID '{'
		//        'type' type=DataType
		//        ('value' value=Value)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Parameter' name=ID '{'
		//    'type' type=DataType
		//    ('value' value=Value)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Parameter'
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=DataType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_4_0() { return cTypeDataTypeEnumRuleCall_4_0; }
		
		//('value' value=Value)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'value'
		public Keyword getValueKeyword_5_0() { return cValueKeyword_5_0; }
		
		//value=Value
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_5_1_0() { return cValueValueParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//    StringValue | NumberValue | BooleanValue;
		@Override public ParserRule getRule() { return rule; }
		
		//StringValue | NumberValue | BooleanValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }
		
		//NumberValue
		public RuleCall getNumberValueParserRuleCall_1() { return cNumberValueParserRuleCall_1; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_2() { return cBooleanValueParserRuleCall_2; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//    value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.NumberValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNUMBERTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberValue:
		//    value=NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//value=NUMBER
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//NUMBER
		public RuleCall getValueNUMBERTerminalRuleCall_0() { return cValueNUMBERTerminalRuleCall_0; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BooleanValue:
		//    value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_0_1() { return cValueFalseKeyword_0_1; }
	}
	
	public class DataTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRINGStringKeyword_0_0 = (Keyword)cSTRINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTEGERIntegerKeyword_1_0 = (Keyword)cINTEGEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDOUBLEDoubleKeyword_2_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBOOLEANBooleanKeyword_3_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDATEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDATEDateKeyword_4_0 = (Keyword)cDATEEnumLiteralDeclaration_4.eContents().get(0);
		
		//// Enums
		//enum DataType:
		//    STRING='String' | INTEGER='Integer' | DOUBLE='Double' | BOOLEAN='Boolean' | DATE='Date';
		public EnumRule getRule() { return rule; }
		
		//STRING='String' | INTEGER='Integer' | DOUBLE='Double' | BOOLEAN='Boolean' | DATE='Date'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING='String'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_0() { return cSTRINGEnumLiteralDeclaration_0; }
		
		//'String'
		public Keyword getSTRINGStringKeyword_0_0() { return cSTRINGStringKeyword_0_0; }
		
		//INTEGER='Integer'
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_1() { return cINTEGEREnumLiteralDeclaration_1; }
		
		//'Integer'
		public Keyword getINTEGERIntegerKeyword_1_0() { return cINTEGERIntegerKeyword_1_0; }
		
		//DOUBLE='Double'
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_2() { return cDOUBLEEnumLiteralDeclaration_2; }
		
		//'Double'
		public Keyword getDOUBLEDoubleKeyword_2_0() { return cDOUBLEDoubleKeyword_2_0; }
		
		//BOOLEAN='Boolean'
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_3() { return cBOOLEANEnumLiteralDeclaration_3; }
		
		//'Boolean'
		public Keyword getBOOLEANBooleanKeyword_3_0() { return cBOOLEANBooleanKeyword_3_0; }
		
		//DATE='Date'
		public EnumLiteralDeclaration getDATEEnumLiteralDeclaration_4() { return cDATEEnumLiteralDeclaration_4; }
		
		//'Date'
		public Keyword getDATEDateKeyword_4_0() { return cDATEDateKeyword_4_0; }
	}
	public class OperationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFILTEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFILTERFilterKeyword_0_0 = (Keyword)cFILTEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMAPEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMAPMapKeyword_1_0 = (Keyword)cMAPEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREDUCEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREDUCEReduceKeyword_2_0 = (Keyword)cREDUCEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cJOINEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cJOINJoinKeyword_3_0 = (Keyword)cJOINEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Operation:
		//    FILTER='filter' | MAP='map' | REDUCE='reduce' | JOIN='join';
		public EnumRule getRule() { return rule; }
		
		//FILTER='filter' | MAP='map' | REDUCE='reduce' | JOIN='join'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FILTER='filter'
		public EnumLiteralDeclaration getFILTEREnumLiteralDeclaration_0() { return cFILTEREnumLiteralDeclaration_0; }
		
		//'filter'
		public Keyword getFILTERFilterKeyword_0_0() { return cFILTERFilterKeyword_0_0; }
		
		//MAP='map'
		public EnumLiteralDeclaration getMAPEnumLiteralDeclaration_1() { return cMAPEnumLiteralDeclaration_1; }
		
		//'map'
		public Keyword getMAPMapKeyword_1_0() { return cMAPMapKeyword_1_0; }
		
		//REDUCE='reduce'
		public EnumLiteralDeclaration getREDUCEEnumLiteralDeclaration_2() { return cREDUCEEnumLiteralDeclaration_2; }
		
		//'reduce'
		public Keyword getREDUCEReduceKeyword_2_0() { return cREDUCEReduceKeyword_2_0; }
		
		//JOIN='join'
		public EnumLiteralDeclaration getJOINEnumLiteralDeclaration_3() { return cJOINEnumLiteralDeclaration_3; }
		
		//'join'
		public Keyword getJOINJoinKeyword_3_0() { return cJOINJoinKeyword_3_0; }
	}
	public class ComparisonOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALSEqualsKeyword_0_0 = (Keyword)cEQUALSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATERGreaterKeyword_1_0 = (Keyword)cGREATEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESSLessKeyword_2_0 = (Keyword)cLESSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCONTAINSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCONTAINSContainsKeyword_3_0 = (Keyword)cCONTAINSEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ComparisonOperator:
		//    EQUALS='equals' | GREATER='greater' | LESS='less' | CONTAINS='contains';
		public EnumRule getRule() { return rule; }
		
		//EQUALS='equals' | GREATER='greater' | LESS='less' | CONTAINS='contains'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUALS='equals'
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_0() { return cEQUALSEnumLiteralDeclaration_0; }
		
		//'equals'
		public Keyword getEQUALSEqualsKeyword_0_0() { return cEQUALSEqualsKeyword_0_0; }
		
		//GREATER='greater'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_1() { return cGREATEREnumLiteralDeclaration_1; }
		
		//'greater'
		public Keyword getGREATERGreaterKeyword_1_0() { return cGREATERGreaterKeyword_1_0; }
		
		//LESS='less'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_2() { return cLESSEnumLiteralDeclaration_2; }
		
		//'less'
		public Keyword getLESSLessKeyword_2_0() { return cLESSLessKeyword_2_0; }
		
		//CONTAINS='contains'
		public EnumLiteralDeclaration getCONTAINSEnumLiteralDeclaration_3() { return cCONTAINSEnumLiteralDeclaration_3; }
		
		//'contains'
		public Keyword getCONTAINSContainsKeyword_3_0() { return cCONTAINSContainsKeyword_3_0; }
	}
	
	private final ModelElements pModel;
	private final ElementElements pElement;
	private final LibraryElements pLibrary;
	private final JobElements pJob;
	private final TransformationElements pTransformation;
	private final WorkflowElements pWorkflow;
	private final ProcessingStepElements pProcessingStep;
	private final PMMLModelElements pPMMLModel;
	private final DataProcessingElements pDataProcessing;
	private final ContractElements pContract;
	private final ConditionElements pCondition;
	private final DataFieldElements pDataField;
	private final CategoricalElements pCategorical;
	private final ContinuousElements pContinuous;
	private final DateFieldElements pDateField;
	private final ParameterElements pParameter;
	private final ValueElements pValue;
	private final StringValueElements pStringValue;
	private final NumberValueElements pNumberValue;
	private final BooleanValueElements pBooleanValue;
	private final DataTypeElements eDataType;
	private final OperationElements eOperation;
	private final ComparisonOperatorElements eComparisonOperator;
	private final TerminalRule tNUMBER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MM_M4DSGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pElement = new ElementElements();
		this.pLibrary = new LibraryElements();
		this.pJob = new JobElements();
		this.pTransformation = new TransformationElements();
		this.pWorkflow = new WorkflowElements();
		this.pProcessingStep = new ProcessingStepElements();
		this.pPMMLModel = new PMMLModelElements();
		this.pDataProcessing = new DataProcessingElements();
		this.pContract = new ContractElements();
		this.pCondition = new ConditionElements();
		this.pDataField = new DataFieldElements();
		this.pCategorical = new CategoricalElements();
		this.pContinuous = new ContinuousElements();
		this.pDateField = new DateFieldElements();
		this.pParameter = new ParameterElements();
		this.pValue = new ValueElements();
		this.pStringValue = new StringValueElements();
		this.pNumberValue = new NumberValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.eDataType = new DataTypeElements();
		this.eOperation = new OperationElements();
		this.eComparisonOperator = new ComparisonOperatorElements();
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MM_M4DS.NUMBER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.MM_M4DS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Root rule
	//Model:
	//    elements+=Element*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Element:
	//    Library | Workflow | Contract;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//// Basic Library elements
	//Library:
	//    'Library' name=ID '{'
	//        ('jobs' '{' jobs+=Job ( "," jobs+=Job)* '}' )?
	//        ('transformations' '{' transformations+=Transformation ( "," transformations+=Transformation)* '}' )?
	//    '}';
	public LibraryElements getLibraryAccess() {
		return pLibrary;
	}
	
	public ParserRule getLibraryRule() {
		return getLibraryAccess().getRule();
	}
	
	//Job:
	//    'Job' name=ID '{'
	//        'input' input=DataField
	//        'output' output=DataField
	//        ('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	//    '}';
	public JobElements getJobAccess() {
		return pJob;
	}
	
	public ParserRule getJobRule() {
		return getJobAccess().getRule();
	}
	
	//Transformation:
	//    'Transformation' name=ID '{'
	//        'input' input=DataField
	//        'output' output=DataField
	//        ('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	//    '}';
	public TransformationElements getTransformationAccess() {
		return pTransformation;
	}
	
	public ParserRule getTransformationRule() {
		return getTransformationAccess().getRule();
	}
	
	//// Basic Workflow elements
	//Workflow:
	//     'Workflow' name=ID '{'
	//      ('steps' '{' steps+=ProcessingStep ( "," steps+=ProcessingStep)* '}' )?
	//      ('dataFields' '{' dataFields+=DataField ( "," dataFields+=DataField)* '}' )?
	//      ('contracts' '{' contracts+=Contract ( "," contracts+=Contract)* '}' )?
	//     '}';
	public WorkflowElements getWorkflowAccess() {
		return pWorkflow;
	}
	
	public ParserRule getWorkflowRule() {
		return getWorkflowAccess().getRule();
	}
	
	//ProcessingStep:
	//    PMMLModel | DataProcessing;
	public ProcessingStepElements getProcessingStepAccess() {
		return pProcessingStep;
	}
	
	public ParserRule getProcessingStepRule() {
		return getProcessingStepAccess().getRule();
	}
	
	//PMMLModel:
	//    'PMMLModel' name=ID '{'
	//        ('filePath' filePath=STRING)?
	//        'input' input=DataField
	//        'output' output=DataField
	//    '}';
	public PMMLModelElements getPMMLModelAccess() {
		return pPMMLModel;
	}
	
	public ParserRule getPMMLModelRule() {
		return getPMMLModelAccess().getRule();
	}
	
	//DataProcessing:
	//    'DataProcessing' name=ID '{'
	//        'input' input=DataField
	//        'output' output=DataField
	//        ('operation' operation=Operation)?
	//    '}';
	public DataProcessingElements getDataProcessingAccess() {
		return pDataProcessing;
	}
	
	public ParserRule getDataProcessingRule() {
		return getDataProcessingAccess().getRule();
	}
	
	//// Basic Contract elements
	//Contract:
	//    'Contract' name=ID '{'
	//        ('conditions' '{' conditions+=Condition ( "," conditions+=Condition)* '}' )?
	//    '}';
	public ContractElements getContractAccess() {
		return pContract;
	}
	
	public ParserRule getContractRule() {
		return getContractAccess().getRule();
	}
	
	//Condition:
	//    'Condition' name=ID '{'
	//        'field' field=[DataField]
	//        'operator' operator=ComparisonOperator
	//        'value' value=Value
	//    '}';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//// Common elements
	//DataField:
	//    Categorical | Continuous | DateField;
	public DataFieldElements getDataFieldAccess() {
		return pDataField;
	}
	
	public ParserRule getDataFieldRule() {
		return getDataFieldAccess().getRule();
	}
	
	//Categorical:
	//    'Categorical' name=ID '{'
	//        ('dataType' dataType=DataType)?
	//        ('validValues' '{' validValues+=STRING ( "," validValues+=STRING)* '}' )?
	//    '}';
	public CategoricalElements getCategoricalAccess() {
		return pCategorical;
	}
	
	public ParserRule getCategoricalRule() {
		return getCategoricalAccess().getRule();
	}
	
	//Continuous:
	//    'Continuous' name=ID '{'
	//        ('dataType' dataType=DataType)?
	//        ('min' min=NUMBER)?
	//        ('max' max=NUMBER)?
	//    '}';
	public ContinuousElements getContinuousAccess() {
		return pContinuous;
	}
	
	public ParserRule getContinuousRule() {
		return getContinuousAccess().getRule();
	}
	
	//DateField:
	//    'Date' name=ID '{'
	//        ('format' format=STRING)?
	//    '}';
	public DateFieldElements getDateFieldAccess() {
		return pDateField;
	}
	
	public ParserRule getDateFieldRule() {
		return getDateFieldAccess().getRule();
	}
	
	//Parameter:
	//    'Parameter' name=ID '{'
	//        'type' type=DataType
	//        ('value' value=Value)?
	//    '}';
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Value:
	//    StringValue | NumberValue | BooleanValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//StringValue:
	//    value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//NumberValue:
	//    value=NUMBER;
	public NumberValueElements getNumberValueAccess() {
		return pNumberValue;
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}
	
	//BooleanValue:
	//    value=('true' | 'false');
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//// Enums
	//enum DataType:
	//    STRING='String' | INTEGER='Integer' | DOUBLE='Double' | BOOLEAN='Boolean' | DATE='Date';
	public DataTypeElements getDataTypeAccess() {
		return eDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//enum Operation:
	//    FILTER='filter' | MAP='map' | REDUCE='reduce' | JOIN='join';
	public OperationElements getOperationAccess() {
		return eOperation;
	}
	
	public EnumRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//enum ComparisonOperator:
	//    EQUALS='equals' | GREATER='greater' | LESS='less' | CONTAINS='contains';
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return eComparisonOperator;
	}
	
	public EnumRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}
	
	//// Terminals
	//terminal NUMBER returns ecore::EDouble:
	//    '-'? INT ('.' INT)?;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
