/**
 * generated by Xtext 2.40.0
 */
package xtext.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;
import xtext.mm_M4DS.Element;
import xtext.mm_M4DS.Job;
import xtext.mm_M4DS.Library;
import xtext.mm_M4DS.Model;
import xtext.mm_M4DS.Transformation;
import xtext.services.MM_M4DSGrammarAccess;

@SuppressWarnings("all")
public class MM_M4DSFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MM_M4DSGrammarAccess _mM_M4DSGrammarAccess;

  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<Element> _elements = model.getElements();
    for (final Element element : _elements) {
      document.<Element>format(element);
    }
  }

  protected void _format(final Library library, @Extension final IFormattableDocument document) {
    EList<Job> _jobs = library.getJobs();
    for (final Job job : _jobs) {
      document.<Job>format(job);
    }
    EList<Transformation> _transformations = library.getTransformations();
    for (final Transformation transformation : _transformations) {
      document.<Transformation>format(transformation);
    }
  }

  @XbaseGenerated
  public void format(final Object library, final IFormattableDocument document) {
    if (library instanceof XtextResource) {
      _format((XtextResource)library, document);
      return;
    } else if (library instanceof Library) {
      _format((Library)library, document);
      return;
    } else if (library instanceof Model) {
      _format((Model)library, document);
      return;
    } else if (library instanceof EObject) {
      _format((EObject)library, document);
      return;
    } else if (library == null) {
      _format((Void)null, document);
      return;
    } else if (library != null) {
      _format(library, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(library, document).toString());
    }
  }
}
