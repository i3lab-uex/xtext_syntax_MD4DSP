/*
 * generated by Xtext 2.40.0
 */
package xtext.json.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WorkflowDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class WorkflowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Workflow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourceDataSourceParserRuleCall_3_0 = (RuleCall)cSourceAssignment_3.eContents().get(0);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyWorkflowBodyParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Workflow:
		//    "workflow" name=STRING "{" source=DataSource body=WorkflowBody "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"workflow" name=STRING "{" source=DataSource body=WorkflowBody "}"
		public Group getGroup() { return cGroup; }
		
		//"workflow"
		public Keyword getWorkflowKeyword_0() { return cWorkflowKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//source=DataSource
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }
		
		//DataSource
		public RuleCall getSourceDataSourceParserRuleCall_3_0() { return cSourceDataSourceParserRuleCall_3_0; }
		
		//body=WorkflowBody
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//WorkflowBody
		public RuleCall getBodyWorkflowBodyParserRuleCall_4_0() { return cBodyWorkflowBodyParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DataSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.DataSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReaderAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReaderDataReaderParserRuleCall_3_0 = (RuleCall)cReaderAssignment_3.eContents().get(0);
		
		//DataSource:
		//    "source" name=ID "=" reader=DataReader;
		@Override public ParserRule getRule() { return rule; }
		
		//"source" name=ID "=" reader=DataReader
		public Group getGroup() { return cGroup; }
		
		//"source"
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//reader=DataReader
		public Assignment getReaderAssignment_3() { return cReaderAssignment_3; }
		
		//DataReader
		public RuleCall getReaderDataReaderParserRuleCall_3_0() { return cReaderDataReaderParserRuleCall_3_0; }
	}
	public class DataReaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.DataReader");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCSVReaderParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFileReaderParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataReader:
		//    CSVReader | FileReader;
		@Override public ParserRule getRule() { return rule; }
		
		//CSVReader | FileReader
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CSVReader
		public RuleCall getCSVReaderParserRuleCall_0() { return cCSVReaderParserRuleCall_0; }
		
		//FileReader
		public RuleCall getFileReaderParserRuleCall_1() { return cFileReaderParserRuleCall_1; }
	}
	public class CSVReaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.CSVReader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRead_csvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFilePathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilePathFilePathParserRuleCall_2_0 = (RuleCall)cFilePathAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDelimiterAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDelimiterDelimiterParserRuleCall_3_1_0 = (RuleCall)cDelimiterAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CSVReader:
		//    "read_csv" "(" filePath=FilePath ("," delimiter=Delimiter)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"read_csv" "(" filePath=FilePath ("," delimiter=Delimiter)? ")"
		public Group getGroup() { return cGroup; }
		
		//"read_csv"
		public Keyword getRead_csvKeyword_0() { return cRead_csvKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//filePath=FilePath
		public Assignment getFilePathAssignment_2() { return cFilePathAssignment_2; }
		
		//FilePath
		public RuleCall getFilePathFilePathParserRuleCall_2_0() { return cFilePathFilePathParserRuleCall_2_0; }
		
		//("," delimiter=Delimiter)?
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//delimiter=Delimiter
		public Assignment getDelimiterAssignment_3_1() { return cDelimiterAssignment_3_1; }
		
		//Delimiter
		public RuleCall getDelimiterDelimiterParserRuleCall_3_1_0() { return cDelimiterDelimiterParserRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FileReaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.FileReader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRead_fileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFilePathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilePathFilePathParserRuleCall_2_0 = (RuleCall)cFilePathAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FileReader:
		//    "read_file" "(" filePath=FilePath ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"read_file" "(" filePath=FilePath ")"
		public Group getGroup() { return cGroup; }
		
		//"read_file"
		public Keyword getRead_fileKeyword_0() { return cRead_fileKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//filePath=FilePath
		public Assignment getFilePathAssignment_2() { return cFilePathAssignment_2; }
		
		//FilePath
		public RuleCall getFilePathFilePathParserRuleCall_2_0() { return cFilePathFilePathParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FilePathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.FilePath");
		private final Assignment cPathAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_0 = (RuleCall)cPathAssignment.eContents().get(0);
		
		//FilePath:
		//    path=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//path=STRING
		public Assignment getPathAssignment() { return cPathAssignment; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_0() { return cPathSTRINGTerminalRuleCall_0; }
	}
	public class DelimiterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Delimiter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTabKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//Delimiter:
		//    "," | ";" | "\t" | "|" | value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"," | ";" | "\t" | "|" | value=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//"\t"
		public Keyword getTabKeyword_2() { return cTabKeyword_2; }
		
		//"|"
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }
		
		//value=STRING
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_0() { return cValueSTRINGTerminalRuleCall_4_0; }
	}
	public class WorkflowBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.WorkflowBody");
		private final Assignment cStepsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStepsStepParserRuleCall_0 = (RuleCall)cStepsAssignment.eContents().get(0);
		
		//WorkflowBody:
		//    steps+=Step*;
		@Override public ParserRule getRule() { return rule; }
		
		//steps+=Step*
		public Assignment getStepsAssignment() { return cStepsAssignment; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_0() { return cStepsStepParserRuleCall_0; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTransformationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTransformationTransformationParserRuleCall_2_0 = (RuleCall)cTransformationAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVerticalLineGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTargetAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTargetIDTerminalRuleCall_3_1_0 = (RuleCall)cTargetAssignment_3_1.eContents().get(0);
		private final Assignment cContractsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContractsContractBlockParserRuleCall_4_0 = (RuleCall)cContractsAssignment_4.eContents().get(0);
		
		//Step:
		//    name=ID "=" transformation=Transformation ("|>" target=ID)? contracts=ContractBlock?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "=" transformation=Transformation ("|>" target=ID)? contracts=ContractBlock?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//transformation=Transformation
		public Assignment getTransformationAssignment_2() { return cTransformationAssignment_2; }
		
		//Transformation
		public RuleCall getTransformationTransformationParserRuleCall_2_0() { return cTransformationTransformationParserRuleCall_2_0; }
		
		//("|>" target=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"|>"
		public Keyword getVerticalLineGreaterThanSignKeyword_3_0() { return cVerticalLineGreaterThanSignKeyword_3_0; }
		
		//target=ID
		public Assignment getTargetAssignment_3_1() { return cTargetAssignment_3_1; }
		
		//ID
		public RuleCall getTargetIDTerminalRuleCall_3_1_0() { return cTargetIDTerminalRuleCall_3_1_0; }
		
		//contracts=ContractBlock?
		public Assignment getContractsAssignment_4() { return cContractsAssignment_4; }
		
		//ContractBlock
		public RuleCall getContractsContractBlockParserRuleCall_4_0() { return cContractsContractBlockParserRuleCall_4_0; }
	}
	public class ContractBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.ContractBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContractsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContractsContractParserRuleCall_2_0 = (RuleCall)cContractsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ContractBlock:
		//    "contracts" "{" contracts+=Contract* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"contracts" "{" contracts+=Contract* "}"
		public Group getGroup() { return cGroup; }
		
		//"contracts"
		public Keyword getContractsKeyword_0() { return cContractsKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//contracts+=Contract*
		public Assignment getContractsAssignment_2() { return cContractsAssignment_2; }
		
		//Contract
		public RuleCall getContractsContractParserRuleCall_2_0() { return cContractsContractParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Contract");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPreconditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPostconditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInvariantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Contract:
		//    Precondition | Postcondition | Invariant;
		@Override public ParserRule getRule() { return rule; }
		
		//Precondition | Postcondition | Invariant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Precondition
		public RuleCall getPreconditionParserRuleCall_0() { return cPreconditionParserRuleCall_0; }
		
		//Postcondition
		public RuleCall getPostconditionParserRuleCall_1() { return cPostconditionParserRuleCall_1; }
		
		//Invariant
		public RuleCall getInvariantParserRuleCall_2() { return cInvariantParserRuleCall_2; }
	}
	public class PreconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Precondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPreconditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameContractNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyContractBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Precondition:
		//    "precondition" name=ContractName "{" body=ContractBody "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"precondition" name=ContractName "{" body=ContractBody "}"
		public Group getGroup() { return cGroup; }
		
		//"precondition"
		public Keyword getPreconditionKeyword_0() { return cPreconditionKeyword_0; }
		
		//name=ContractName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ContractName
		public RuleCall getNameContractNameParserRuleCall_1_0() { return cNameContractNameParserRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//body=ContractBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//ContractBody
		public RuleCall getBodyContractBodyParserRuleCall_3_0() { return cBodyContractBodyParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PostconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Postcondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostconditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameContractNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyContractBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Postcondition:
		//    "postcondition" name=ContractName "{" body=ContractBody "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"postcondition" name=ContractName "{" body=ContractBody "}"
		public Group getGroup() { return cGroup; }
		
		//"postcondition"
		public Keyword getPostconditionKeyword_0() { return cPostconditionKeyword_0; }
		
		//name=ContractName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ContractName
		public RuleCall getNameContractNameParserRuleCall_1_0() { return cNameContractNameParserRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//body=ContractBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//ContractBody
		public RuleCall getBodyContractBodyParserRuleCall_3_0() { return cBodyContractBodyParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class InvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Invariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvariantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameContractNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyContractBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Invariant:
		//    "invariant" name=ContractName "{" body=ContractBody "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"invariant" name=ContractName "{" body=ContractBody "}"
		public Group getGroup() { return cGroup; }
		
		//"invariant"
		public Keyword getInvariantKeyword_0() { return cInvariantKeyword_0; }
		
		//name=ContractName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ContractName
		public RuleCall getNameContractNameParserRuleCall_1_0() { return cNameContractNameParserRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//body=ContractBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//ContractBody
		public RuleCall getBodyContractBodyParserRuleCall_3_0() { return cBodyContractBodyParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ContractNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.ContractName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ContractName:
		//    name=STRING | name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING | name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ContractBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.ContractBody");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeContractTypeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//ContractBody:
		//    type=ContractType;
		@Override public ParserRule getRule() { return rule; }
		
		//type=ContractType
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//ContractType
		public RuleCall getTypeContractTypeParserRuleCall_0() { return cTypeContractTypeParserRuleCall_0; }
	}
	public class ContractTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.ContractType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueRangeContractParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionContractParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSpecialValueContractParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCastTypeContractParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ContractType:
		//    ValueRangeContract
		//    | ConditionContract
		//    | SpecialValueContract
		//    | CastTypeContract;
		@Override public ParserRule getRule() { return rule; }
		
		//ValueRangeContract
		//| ConditionContract
		//| SpecialValueContract
		//| CastTypeContract
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValueRangeContract
		public RuleCall getValueRangeContractParserRuleCall_0() { return cValueRangeContractParserRuleCall_0; }
		
		//ConditionContract
		public RuleCall getConditionContractParserRuleCall_1() { return cConditionContractParserRuleCall_1; }
		
		//SpecialValueContract
		public RuleCall getSpecialValueContractParserRuleCall_2() { return cSpecialValueContractParserRuleCall_2; }
		
		//CastTypeContract
		public RuleCall getCastTypeContractParserRuleCall_3() { return cCastTypeContractParserRuleCall_3; }
	}
	public class ValueRangeContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.ValueRangeContract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValue_rangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldContractFieldParserRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueContractValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ValueRangeContract:
		//    "value_range" "(" field=ContractField "," value=ContractValue ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"value_range" "(" field=ContractField "," value=ContractValue ")"
		public Group getGroup() { return cGroup; }
		
		//"value_range"
		public Keyword getValue_rangeKeyword_0() { return cValue_rangeKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//field=ContractField
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }
		
		//ContractField
		public RuleCall getFieldContractFieldParserRuleCall_2_0() { return cFieldContractFieldParserRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//value=ContractValue
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//ContractValue
		public RuleCall getValueContractValueParserRuleCall_4_0() { return cValueContractValueParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ContractFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.ContractField");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cInputKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cColumnAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cColumnColumnParserRuleCall_0_2_0 = (RuleCall)cColumnAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cOutputKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cColumnAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cColumnColumnParserRuleCall_1_2_0 = (RuleCall)cColumnAssignment_1_2.eContents().get(0);
		
		//ContractField:
		//    "input" "." column=Column
		//    | "output" "." column=Column;
		@Override public ParserRule getRule() { return rule; }
		
		//"input" "." column=Column
		//| "output" "." column=Column
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"input" "." column=Column
		public Group getGroup_0() { return cGroup_0; }
		
		//"input"
		public Keyword getInputKeyword_0_0() { return cInputKeyword_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//column=Column
		public Assignment getColumnAssignment_0_2() { return cColumnAssignment_0_2; }
		
		//Column
		public RuleCall getColumnColumnParserRuleCall_0_2_0() { return cColumnColumnParserRuleCall_0_2_0; }
		
		//"output" "." column=Column
		public Group getGroup_1() { return cGroup_1; }
		
		//"output"
		public Keyword getOutputKeyword_1_0() { return cOutputKeyword_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//column=Column
		public Assignment getColumnAssignment_1_2() { return cColumnAssignment_1_2; }
		
		//Column
		public RuleCall getColumnColumnParserRuleCall_1_2_0() { return cColumnColumnParserRuleCall_1_2_0; }
	}
	public class ContractValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.ContractValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCastable_toKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIn_rangeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBoundsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBoundsRangeBoundsParserRuleCall_1_1_0 = (RuleCall)cBoundsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cMatchesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//ContractValue:
		//    "castable_to" type=Type
		//    | "in_range" bounds=RangeBounds
		//    | "matches" value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//"castable_to" type=Type
		//| "in_range" bounds=RangeBounds
		//| "matches" value=Value
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"castable_to" type=Type
		public Group getGroup_0() { return cGroup_0; }
		
		//"castable_to"
		public Keyword getCastable_toKeyword_0_0() { return cCastable_toKeyword_0_0; }
		
		//type=Type
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_1_0() { return cTypeTypeParserRuleCall_0_1_0; }
		
		//"in_range" bounds=RangeBounds
		public Group getGroup_1() { return cGroup_1; }
		
		//"in_range"
		public Keyword getIn_rangeKeyword_1_0() { return cIn_rangeKeyword_1_0; }
		
		//bounds=RangeBounds
		public Assignment getBoundsAssignment_1_1() { return cBoundsAssignment_1_1; }
		
		//RangeBounds
		public RuleCall getBoundsRangeBoundsParserRuleCall_1_1_0() { return cBoundsRangeBoundsParserRuleCall_1_1_0; }
		
		//"matches" value=Value
		public Group getGroup_2() { return cGroup_2; }
		
		//"matches"
		public Keyword getMatchesKeyword_2_0() { return cMatchesKeyword_2_0; }
		
		//value=Value
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_1_0() { return cValueValueParserRuleCall_2_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntegerKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDoubleKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cStringKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBooleanKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Type:
		//    "Integer" | "Double" | "String" | "Boolean";
		@Override public ParserRule getRule() { return rule; }
		
		//"Integer" | "Double" | "String" | "Boolean"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"Integer"
		public Keyword getIntegerKeyword_0() { return cIntegerKeyword_0; }
		
		//"Double"
		public Keyword getDoubleKeyword_1() { return cDoubleKeyword_1; }
		
		//"String"
		public Keyword getStringKeyword_2() { return cStringKeyword_2; }
		
		//"Boolean"
		public Keyword getBooleanKeyword_3() { return cBooleanKeyword_3; }
	}
	public class ConditionContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.ConditionContract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfClauseIfClauseParserRuleCall_2_0 = (RuleCall)cIfClauseAssignment_2.eContents().get(0);
		private final Assignment cThenClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenClauseThenClauseParserRuleCall_3_0 = (RuleCall)cThenClauseAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConditionContract:
		//    "condition" "{" ifClause=IfClause thenClause=ThenClause "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"condition" "{" ifClause=IfClause thenClause=ThenClause "}"
		public Group getGroup() { return cGroup; }
		
		//"condition"
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//ifClause=IfClause
		public Assignment getIfClauseAssignment_2() { return cIfClauseAssignment_2; }
		
		//IfClause
		public RuleCall getIfClauseIfClauseParserRuleCall_2_0() { return cIfClauseIfClauseParserRuleCall_2_0; }
		
		//thenClause=ThenClause
		public Assignment getThenClauseAssignment_3() { return cThenClauseAssignment_3; }
		
		//ThenClause
		public RuleCall getThenClauseThenClauseParserRuleCall_3_0() { return cThenClauseThenClauseParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class IfClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.IfClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldContractFieldParserRuleCall_1_0 = (RuleCall)cFieldAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpBelongOpParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionDataConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		
		//IfClause:
		//    "if" field=ContractField op=BelongOp condition=DataCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" field=ContractField op=BelongOp condition=DataCondition
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//field=ContractField
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }
		
		//ContractField
		public RuleCall getFieldContractFieldParserRuleCall_1_0() { return cFieldContractFieldParserRuleCall_1_0; }
		
		//op=BelongOp
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//BelongOp
		public RuleCall getOpBelongOpParserRuleCall_2_0() { return cOpBelongOpParserRuleCall_2_0; }
		
		//condition=DataCondition
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//DataCondition
		public RuleCall getConditionDataConditionParserRuleCall_3_0() { return cConditionDataConditionParserRuleCall_3_0; }
	}
	public class ThenClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.ThenClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldContractFieldParserRuleCall_1_0 = (RuleCall)cFieldAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpBelongOpParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cResultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResultDataResultParserRuleCall_3_0 = (RuleCall)cResultAssignment_3.eContents().get(0);
		
		//ThenClause:
		//    "then" field=ContractField op=BelongOp result=DataResult;
		@Override public ParserRule getRule() { return rule; }
		
		//"then" field=ContractField op=BelongOp result=DataResult
		public Group getGroup() { return cGroup; }
		
		//"then"
		public Keyword getThenKeyword_0() { return cThenKeyword_0; }
		
		//field=ContractField
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }
		
		//ContractField
		public RuleCall getFieldContractFieldParserRuleCall_1_0() { return cFieldContractFieldParserRuleCall_1_0; }
		
		//op=BelongOp
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//BelongOp
		public RuleCall getOpBelongOpParserRuleCall_2_0() { return cOpBelongOpParserRuleCall_2_0; }
		
		//result=DataResult
		public Assignment getResultAssignment_3() { return cResultAssignment_3; }
		
		//DataResult
		public RuleCall getResultDataResultParserRuleCall_3_0() { return cResultDataResultParserRuleCall_3_0; }
	}
	public class BelongOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.BelongOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBelongs_toKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNot_belongs_toKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BelongOp:
		//    "belongs_to" | "not_belongs_to";
		@Override public ParserRule getRule() { return rule; }
		
		//"belongs_to" | "not_belongs_to"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"belongs_to"
		public Keyword getBelongs_toKeyword_0() { return cBelongs_toKeyword_0; }
		
		//"not_belongs_to"
		public Keyword getNot_belongs_toKeyword_1() { return cNot_belongs_toKeyword_1; }
	}
	public class DataConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.DataCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpecialValueCheckParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCastTypeCheckParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValueCheckParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DataCondition:
		//    SpecialValueCheck | CastTypeCheck | ValueCheck;
		@Override public ParserRule getRule() { return rule; }
		
		//SpecialValueCheck | CastTypeCheck | ValueCheck
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SpecialValueCheck
		public RuleCall getSpecialValueCheckParserRuleCall_0() { return cSpecialValueCheckParserRuleCall_0; }
		
		//CastTypeCheck
		public RuleCall getCastTypeCheckParserRuleCall_1() { return cCastTypeCheckParserRuleCall_1; }
		
		//ValueCheck
		public RuleCall getValueCheckParserRuleCall_2() { return cValueCheckParserRuleCall_2; }
	}
	public class SpecialValueCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.SpecialValueCheck");
		private final Keyword cSpecial_valuesKeyword = (Keyword)rule.eContents().get(1);
		
		//SpecialValueCheck:
		//    "special_values";
		@Override public ParserRule getRule() { return rule; }
		
		//"special_values"
		public Keyword getSpecial_valuesKeyword() { return cSpecial_valuesKeyword; }
	}
	public class CastTypeCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.CastTypeCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//CastTypeCheck:
		//    "type" type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//"type" type=Type
		public Group getGroup() { return cGroup; }
		
		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class ValueCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.ValueCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ValueCheck:
		//    "value" value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//"value" value=Value
		public Group getGroup() { return cGroup; }
		
		//"value"
		public Keyword getValueKeyword_0() { return cValueKeyword_0; }
		
		//value=Value
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }
	}
	public class DataResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.DataResult");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpecialValueCheckParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCastTypeCheckParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValueCheckParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DataResult:
		//    SpecialValueCheck | CastTypeCheck | ValueCheck;
		@Override public ParserRule getRule() { return rule; }
		
		//SpecialValueCheck | CastTypeCheck | ValueCheck
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SpecialValueCheck
		public RuleCall getSpecialValueCheckParserRuleCall_0() { return cSpecialValueCheckParserRuleCall_0; }
		
		//CastTypeCheck
		public RuleCall getCastTypeCheckParserRuleCall_1() { return cCastTypeCheckParserRuleCall_1; }
		
		//ValueCheck
		public RuleCall getValueCheckParserRuleCall_2() { return cValueCheckParserRuleCall_2; }
	}
	public class SpecialValueContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.SpecialValueContract");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNo_special_valuesKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFieldAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFieldContractFieldParserRuleCall_0_2_0 = (RuleCall)cFieldAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHas_special_valuesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFieldAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFieldContractFieldParserRuleCall_1_2_0 = (RuleCall)cFieldAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//SpecialValueContract:
		//    "no_special_values" "(" field=ContractField ")"
		//    | "has_special_values" "(" field=ContractField ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"no_special_values" "(" field=ContractField ")"
		//| "has_special_values" "(" field=ContractField ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"no_special_values" "(" field=ContractField ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"no_special_values"
		public Keyword getNo_special_valuesKeyword_0_0() { return cNo_special_valuesKeyword_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//field=ContractField
		public Assignment getFieldAssignment_0_2() { return cFieldAssignment_0_2; }
		
		//ContractField
		public RuleCall getFieldContractFieldParserRuleCall_0_2_0() { return cFieldContractFieldParserRuleCall_0_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//"has_special_values" "(" field=ContractField ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"has_special_values"
		public Keyword getHas_special_valuesKeyword_1_0() { return cHas_special_valuesKeyword_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//field=ContractField
		public Assignment getFieldAssignment_1_2() { return cFieldAssignment_1_2; }
		
		//ContractField
		public RuleCall getFieldContractFieldParserRuleCall_1_2_0() { return cFieldContractFieldParserRuleCall_1_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class CastTypeContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.CastTypeContract");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCastable_toKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cFieldAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cFieldContractFieldParserRuleCall_0_3_0 = (RuleCall)cFieldAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIs_typeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cFieldAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cFieldContractFieldParserRuleCall_1_3_0 = (RuleCall)cFieldAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//CastTypeContract:
		//    "castable_to" type=Type "(" field=ContractField ")"
		//    | "is_type" type=Type "(" field=ContractField ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"castable_to" type=Type "(" field=ContractField ")"
		//| "is_type" type=Type "(" field=ContractField ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"castable_to" type=Type "(" field=ContractField ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"castable_to"
		public Keyword getCastable_toKeyword_0_0() { return cCastable_toKeyword_0_0; }
		
		//type=Type
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_1_0() { return cTypeTypeParserRuleCall_0_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//field=ContractField
		public Assignment getFieldAssignment_0_3() { return cFieldAssignment_0_3; }
		
		//ContractField
		public RuleCall getFieldContractFieldParserRuleCall_0_3_0() { return cFieldContractFieldParserRuleCall_0_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//"is_type" type=Type "(" field=ContractField ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"is_type"
		public Keyword getIs_typeKeyword_1_0() { return cIs_typeKeyword_1_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_1_0() { return cTypeTypeParserRuleCall_1_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//field=ContractField
		public Assignment getFieldAssignment_1_3() { return cFieldAssignment_1_3; }
		
		//ContractField
		public RuleCall getFieldContractFieldParserRuleCall_1_3_0() { return cFieldContractFieldParserRuleCall_1_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}
	public class TransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Transformation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRowFilterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColumnFilterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMappingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMathOpParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBinnerParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTypeConversionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cImputationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOutlierTreatmentParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cJoinParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Transformation:
		//    RowFilter
		//    | ColumnFilter
		//    | Mapping
		//    | MathOp
		//    | Binner
		//    | TypeConversion
		//    | Imputation
		//    | OutlierTreatment
		//    | Join;
		@Override public ParserRule getRule() { return rule; }
		
		//RowFilter
		//| ColumnFilter
		//| Mapping
		//| MathOp
		//| Binner
		//| TypeConversion
		//| Imputation
		//| OutlierTreatment
		//| Join
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RowFilter
		public RuleCall getRowFilterParserRuleCall_0() { return cRowFilterParserRuleCall_0; }
		
		//ColumnFilter
		public RuleCall getColumnFilterParserRuleCall_1() { return cColumnFilterParserRuleCall_1; }
		
		//Mapping
		public RuleCall getMappingParserRuleCall_2() { return cMappingParserRuleCall_2; }
		
		//MathOp
		public RuleCall getMathOpParserRuleCall_3() { return cMathOpParserRuleCall_3; }
		
		//Binner
		public RuleCall getBinnerParserRuleCall_4() { return cBinnerParserRuleCall_4; }
		
		//TypeConversion
		public RuleCall getTypeConversionParserRuleCall_5() { return cTypeConversionParserRuleCall_5; }
		
		//Imputation
		public RuleCall getImputationParserRuleCall_6() { return cImputationParserRuleCall_6; }
		
		//OutlierTreatment
		public RuleCall getOutlierTreatmentParserRuleCall_7() { return cOutlierTreatmentParserRuleCall_7; }
		
		//Join
		public RuleCall getJoinParserRuleCall_8() { return cJoinParserRuleCall_8; }
	}
	public class RowFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.RowFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilter_rowsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionFilterConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RowFilter:
		//    "filter_rows" "{" condition=FilterCondition "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"filter_rows" "{" condition=FilterCondition "}"
		public Group getGroup() { return cGroup; }
		
		//"filter_rows"
		public Keyword getFilter_rowsKeyword_0() { return cFilter_rowsKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//condition=FilterCondition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//FilterCondition
		public RuleCall getConditionFilterConditionParserRuleCall_2_0() { return cConditionFilterConditionParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FilterConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.FilterCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMissingFilterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRangeFilterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringFilterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FilterCondition:
		//    MissingFilter | RangeFilter | StringFilter;
		@Override public ParserRule getRule() { return rule; }
		
		//MissingFilter | RangeFilter | StringFilter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MissingFilter
		public RuleCall getMissingFilterParserRuleCall_0() { return cMissingFilterParserRuleCall_0; }
		
		//RangeFilter
		public RuleCall getRangeFilterParserRuleCall_1() { return cRangeFilterParserRuleCall_1; }
		
		//StringFilter
		public RuleCall getStringFilterParserRuleCall_2() { return cStringFilterParserRuleCall_2; }
	}
	public class MissingFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.MissingFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMissingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnsColumnListParserRuleCall_2_0 = (RuleCall)cColumnsAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIncludeExcludeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIncludeExcludeIncludeExcludeParserRuleCall_4_0 = (RuleCall)cIncludeExcludeAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MissingFilter:
		//    "missing" "(" columns=ColumnList "," includeExclude=IncludeExclude ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"missing" "(" columns=ColumnList "," includeExclude=IncludeExclude ")"
		public Group getGroup() { return cGroup; }
		
		//"missing"
		public Keyword getMissingKeyword_0() { return cMissingKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//columns=ColumnList
		public Assignment getColumnsAssignment_2() { return cColumnsAssignment_2; }
		
		//ColumnList
		public RuleCall getColumnsColumnListParserRuleCall_2_0() { return cColumnsColumnListParserRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//includeExclude=IncludeExclude
		public Assignment getIncludeExcludeAssignment_4() { return cIncludeExcludeAssignment_4; }
		
		//IncludeExclude
		public RuleCall getIncludeExcludeIncludeExcludeParserRuleCall_4_0() { return cIncludeExcludeIncludeExcludeParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class RangeFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.RangeFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnColumnParserRuleCall_2_0 = (RuleCall)cColumnAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBoundsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBoundsRangeBoundsParserRuleCall_4_0 = (RuleCall)cBoundsAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIncludeExcludeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIncludeExcludeIncludeExcludeParserRuleCall_6_0 = (RuleCall)cIncludeExcludeAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RangeFilter:
		//    "range" "(" column=Column "," bounds=RangeBounds "," includeExclude=IncludeExclude ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"range" "(" column=Column "," bounds=RangeBounds "," includeExclude=IncludeExclude ")"
		public Group getGroup() { return cGroup; }
		
		//"range"
		public Keyword getRangeKeyword_0() { return cRangeKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//column=Column
		public Assignment getColumnAssignment_2() { return cColumnAssignment_2; }
		
		//Column
		public RuleCall getColumnColumnParserRuleCall_2_0() { return cColumnColumnParserRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//bounds=RangeBounds
		public Assignment getBoundsAssignment_4() { return cBoundsAssignment_4; }
		
		//RangeBounds
		public RuleCall getBoundsRangeBoundsParserRuleCall_4_0() { return cBoundsRangeBoundsParserRuleCall_4_0; }
		
		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//includeExclude=IncludeExclude
		public Assignment getIncludeExcludeAssignment_6() { return cIncludeExcludeAssignment_6; }
		
		//IncludeExclude
		public RuleCall getIncludeExcludeIncludeExcludeParserRuleCall_6_0() { return cIncludeExcludeIncludeExcludeParserRuleCall_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class RangeBoundsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.RangeBounds");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLowerAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLowerBoundValueParserRuleCall_0_1_0 = (RuleCall)cLowerAssignment_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cUpperAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cUpperBoundValueParserRuleCall_0_3_0 = (RuleCall)cUpperAssignment_0_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLowerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLowerBoundValueParserRuleCall_1_1_0 = (RuleCall)cLowerAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cUpperAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cUpperBoundValueParserRuleCall_1_3_0 = (RuleCall)cUpperAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLowerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLowerBoundValueParserRuleCall_2_1_0 = (RuleCall)cLowerAssignment_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cUpperAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cUpperBoundValueParserRuleCall_2_3_0 = (RuleCall)cUpperAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLowerAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLowerBoundValueParserRuleCall_3_1_0 = (RuleCall)cLowerAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cUpperAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cUpperBoundValueParserRuleCall_3_3_0 = (RuleCall)cUpperAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//RangeBounds:
		//    "[" lower=BoundValue "," upper=BoundValue "]"
		//    | "[" lower=BoundValue "," upper=BoundValue ")"
		//    | "(" lower=BoundValue "," upper=BoundValue "]"
		//    | "(" lower=BoundValue "," upper=BoundValue ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" lower=BoundValue "," upper=BoundValue "]"
		//| "[" lower=BoundValue "," upper=BoundValue ")"
		//| "(" lower=BoundValue "," upper=BoundValue "]"
		//| "(" lower=BoundValue "," upper=BoundValue ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"[" lower=BoundValue "," upper=BoundValue "]"
		public Group getGroup_0() { return cGroup_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//lower=BoundValue
		public Assignment getLowerAssignment_0_1() { return cLowerAssignment_0_1; }
		
		//BoundValue
		public RuleCall getLowerBoundValueParserRuleCall_0_1_0() { return cLowerBoundValueParserRuleCall_0_1_0; }
		
		//","
		public Keyword getCommaKeyword_0_2() { return cCommaKeyword_0_2; }
		
		//upper=BoundValue
		public Assignment getUpperAssignment_0_3() { return cUpperAssignment_0_3; }
		
		//BoundValue
		public RuleCall getUpperBoundValueParserRuleCall_0_3_0() { return cUpperBoundValueParserRuleCall_0_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_4() { return cRightSquareBracketKeyword_0_4; }
		
		//"[" lower=BoundValue "," upper=BoundValue ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//lower=BoundValue
		public Assignment getLowerAssignment_1_1() { return cLowerAssignment_1_1; }
		
		//BoundValue
		public RuleCall getLowerBoundValueParserRuleCall_1_1_0() { return cLowerBoundValueParserRuleCall_1_1_0; }
		
		//","
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//upper=BoundValue
		public Assignment getUpperAssignment_1_3() { return cUpperAssignment_1_3; }
		
		//BoundValue
		public RuleCall getUpperBoundValueParserRuleCall_1_3_0() { return cUpperBoundValueParserRuleCall_1_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//"(" lower=BoundValue "," upper=BoundValue "]"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//lower=BoundValue
		public Assignment getLowerAssignment_2_1() { return cLowerAssignment_2_1; }
		
		//BoundValue
		public RuleCall getLowerBoundValueParserRuleCall_2_1_0() { return cLowerBoundValueParserRuleCall_2_1_0; }
		
		//","
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//upper=BoundValue
		public Assignment getUpperAssignment_2_3() { return cUpperAssignment_2_3; }
		
		//BoundValue
		public RuleCall getUpperBoundValueParserRuleCall_2_3_0() { return cUpperBoundValueParserRuleCall_2_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
		
		//"(" lower=BoundValue "," upper=BoundValue ")"
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//lower=BoundValue
		public Assignment getLowerAssignment_3_1() { return cLowerAssignment_3_1; }
		
		//BoundValue
		public RuleCall getLowerBoundValueParserRuleCall_3_1_0() { return cLowerBoundValueParserRuleCall_3_1_0; }
		
		//","
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }
		
		//upper=BoundValue
		public Assignment getUpperAssignment_3_3() { return cUpperAssignment_3_3; }
		
		//BoundValue
		public RuleCall getUpperBoundValueParserRuleCall_3_3_0() { return cUpperBoundValueParserRuleCall_3_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
	}
	public class BoundValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.BoundValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueNumberParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInfKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInfKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//BoundValue:
		//    value=Number | "*" | "inf" | "-inf";
		@Override public ParserRule getRule() { return rule; }
		
		//value=Number | "*" | "inf" | "-inf"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=Number
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_0_0() { return cValueNumberParserRuleCall_0_0; }
		
		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
		
		//"inf"
		public Keyword getInfKeyword_2() { return cInfKeyword_2; }
		
		//"-inf"
		public Keyword getInfKeyword_3() { return cInfKeyword_3; }
	}
	public class StringFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.StringFilter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cMatchesKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cColumnAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cColumnColumnParserRuleCall_0_2_0 = (RuleCall)cColumnAssignment_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cPatternAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cPatternPatternParserRuleCall_0_4_0 = (RuleCall)cPatternAssignment_0_4.eContents().get(0);
		private final Keyword cCommaKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cIncludeExcludeAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cIncludeExcludeIncludeExcludeParserRuleCall_0_6_0 = (RuleCall)cIncludeExcludeAssignment_0_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLikeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cColumnAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cColumnColumnParserRuleCall_1_2_0 = (RuleCall)cColumnAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cPatternAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cPatternPatternParserRuleCall_1_4_0 = (RuleCall)cPatternAssignment_1_4.eContents().get(0);
		private final Keyword cCommaKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cIncludeExcludeAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cIncludeExcludeIncludeExcludeParserRuleCall_1_6_0 = (RuleCall)cIncludeExcludeAssignment_1_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		
		//StringFilter:
		//    "matches" "(" column=Column "," pattern=Pattern "," includeExclude=IncludeExclude ")"
		//    | "like" "(" column=Column "," pattern=Pattern "," includeExclude=IncludeExclude ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"matches" "(" column=Column "," pattern=Pattern "," includeExclude=IncludeExclude ")"
		//| "like" "(" column=Column "," pattern=Pattern "," includeExclude=IncludeExclude ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"matches" "(" column=Column "," pattern=Pattern "," includeExclude=IncludeExclude ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"matches"
		public Keyword getMatchesKeyword_0_0() { return cMatchesKeyword_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//column=Column
		public Assignment getColumnAssignment_0_2() { return cColumnAssignment_0_2; }
		
		//Column
		public RuleCall getColumnColumnParserRuleCall_0_2_0() { return cColumnColumnParserRuleCall_0_2_0; }
		
		//","
		public Keyword getCommaKeyword_0_3() { return cCommaKeyword_0_3; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_0_4() { return cPatternAssignment_0_4; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_0_4_0() { return cPatternPatternParserRuleCall_0_4_0; }
		
		//","
		public Keyword getCommaKeyword_0_5() { return cCommaKeyword_0_5; }
		
		//includeExclude=IncludeExclude
		public Assignment getIncludeExcludeAssignment_0_6() { return cIncludeExcludeAssignment_0_6; }
		
		//IncludeExclude
		public RuleCall getIncludeExcludeIncludeExcludeParserRuleCall_0_6_0() { return cIncludeExcludeIncludeExcludeParserRuleCall_0_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_7() { return cRightParenthesisKeyword_0_7; }
		
		//"like" "(" column=Column "," pattern=Pattern "," includeExclude=IncludeExclude ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"like"
		public Keyword getLikeKeyword_1_0() { return cLikeKeyword_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//column=Column
		public Assignment getColumnAssignment_1_2() { return cColumnAssignment_1_2; }
		
		//Column
		public RuleCall getColumnColumnParserRuleCall_1_2_0() { return cColumnColumnParserRuleCall_1_2_0; }
		
		//","
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_1_4() { return cPatternAssignment_1_4; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_1_4_0() { return cPatternPatternParserRuleCall_1_4_0; }
		
		//","
		public Keyword getCommaKeyword_1_5() { return cCommaKeyword_1_5; }
		
		//includeExclude=IncludeExclude
		public Assignment getIncludeExcludeAssignment_1_6() { return cIncludeExcludeAssignment_1_6; }
		
		//IncludeExclude
		public RuleCall getIncludeExcludeIncludeExcludeParserRuleCall_1_6_0() { return cIncludeExcludeIncludeExcludeParserRuleCall_1_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_7() { return cRightParenthesisKeyword_1_7; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Pattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cRegexAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRegexRegexParserRuleCall_1_0 = (RuleCall)cRegexAssignment_1.eContents().get(0);
		
		//Pattern:
		//    value=STRING | regex=Regex;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING | regex=Regex
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=STRING
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }
		
		//regex=Regex
		public Assignment getRegexAssignment_1() { return cRegexAssignment_1; }
		
		//Regex
		public RuleCall getRegexRegexParserRuleCall_1_0() { return cRegexRegexParserRuleCall_1_0; }
	}
	public class IncludeExcludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.IncludeExclude");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExcludeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//IncludeExclude:
		//    "include" | "exclude";
		@Override public ParserRule getRule() { return rule; }
		
		//"include" | "exclude"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }
		
		//"exclude"
		public Keyword getExcludeKeyword_1() { return cExcludeKeyword_1; }
	}
	public class ColumnFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.ColumnFilter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSelect_columnsKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cColumnsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cColumnsColumnListParserRuleCall_0_2_0 = (RuleCall)cColumnsAssignment_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDrop_columnsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cColumnsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cColumnsColumnListParserRuleCall_1_2_0 = (RuleCall)cColumnsAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cKeepKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cColumnsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cColumnsColumnListParserRuleCall_2_2_0 = (RuleCall)cColumnsAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cRemoveKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cColumnsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cColumnsColumnListParserRuleCall_3_2_0 = (RuleCall)cColumnsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//ColumnFilter:
		//    "select_columns" "{" columns=ColumnList "}"
		//    | "drop_columns" "{" columns=ColumnList "}"
		//    | "keep" "{" columns=ColumnList "}"
		//    | "remove" "{" columns=ColumnList "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"select_columns" "{" columns=ColumnList "}"
		//| "drop_columns" "{" columns=ColumnList "}"
		//| "keep" "{" columns=ColumnList "}"
		//| "remove" "{" columns=ColumnList "}"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"select_columns" "{" columns=ColumnList "}"
		public Group getGroup_0() { return cGroup_0; }
		
		//"select_columns"
		public Keyword getSelect_columnsKeyword_0_0() { return cSelect_columnsKeyword_0_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//columns=ColumnList
		public Assignment getColumnsAssignment_0_2() { return cColumnsAssignment_0_2; }
		
		//ColumnList
		public RuleCall getColumnsColumnListParserRuleCall_0_2_0() { return cColumnsColumnListParserRuleCall_0_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }
		
		//"drop_columns" "{" columns=ColumnList "}"
		public Group getGroup_1() { return cGroup_1; }
		
		//"drop_columns"
		public Keyword getDrop_columnsKeyword_1_0() { return cDrop_columnsKeyword_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//columns=ColumnList
		public Assignment getColumnsAssignment_1_2() { return cColumnsAssignment_1_2; }
		
		//ColumnList
		public RuleCall getColumnsColumnListParserRuleCall_1_2_0() { return cColumnsColumnListParserRuleCall_1_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
		
		//"keep" "{" columns=ColumnList "}"
		public Group getGroup_2() { return cGroup_2; }
		
		//"keep"
		public Keyword getKeepKeyword_2_0() { return cKeepKeyword_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//columns=ColumnList
		public Assignment getColumnsAssignment_2_2() { return cColumnsAssignment_2_2; }
		
		//ColumnList
		public RuleCall getColumnsColumnListParserRuleCall_2_2_0() { return cColumnsColumnListParserRuleCall_2_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
		
		//"remove" "{" columns=ColumnList "}"
		public Group getGroup_3() { return cGroup_3; }
		
		//"remove"
		public Keyword getRemoveKeyword_3_0() { return cRemoveKeyword_3_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//columns=ColumnList
		public Assignment getColumnsAssignment_3_2() { return cColumnsAssignment_3_2; }
		
		//ColumnList
		public RuleCall getColumnsColumnListParserRuleCall_3_2_0() { return cColumnsColumnListParserRuleCall_3_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Mapping");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueMappingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubstringMappingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Mapping:
		//    ValueMapping | SubstringMapping;
		@Override public ParserRule getRule() { return rule; }
		
		//ValueMapping | SubstringMapping
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValueMapping
		public RuleCall getValueMappingParserRuleCall_0() { return cValueMappingParserRuleCall_0; }
		
		//SubstringMapping
		public RuleCall getSubstringMappingParserRuleCall_1() { return cSubstringMappingParserRuleCall_1; }
	}
	public class ValueMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.ValueMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnColumnParserRuleCall_2_0 = (RuleCall)cColumnAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRulesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRulesMappingRulesParserRuleCall_5_0 = (RuleCall)cRulesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cModeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cModeMappingModeParserRuleCall_7_0 = (RuleCall)cModeAssignment_7.eContents().get(0);
		
		//ValueMapping:
		//    "map" "(" column=Column ")" "{" rules=MappingRules "}" mode=MappingMode;
		@Override public ParserRule getRule() { return rule; }
		
		//"map" "(" column=Column ")" "{" rules=MappingRules "}" mode=MappingMode
		public Group getGroup() { return cGroup; }
		
		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//column=Column
		public Assignment getColumnAssignment_2() { return cColumnAssignment_2; }
		
		//Column
		public RuleCall getColumnColumnParserRuleCall_2_0() { return cColumnColumnParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//rules=MappingRules
		public Assignment getRulesAssignment_5() { return cRulesAssignment_5; }
		
		//MappingRules
		public RuleCall getRulesMappingRulesParserRuleCall_5_0() { return cRulesMappingRulesParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//mode=MappingMode
		public Assignment getModeAssignment_7() { return cModeAssignment_7; }
		
		//MappingMode
		public RuleCall getModeMappingModeParserRuleCall_7_0() { return cModeMappingModeParserRuleCall_7_0; }
	}
	public class MappingRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.MappingRules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRulesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRulesMappingRuleParserRuleCall_0_0 = (RuleCall)cRulesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRulesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRulesMappingRuleParserRuleCall_1_1_0 = (RuleCall)cRulesAssignment_1_1.eContents().get(0);
		
		//MappingRules:
		//    (rules+=MappingRule ("," rules+=MappingRule)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(rules+=MappingRule ("," rules+=MappingRule)*)?
		public Group getGroup() { return cGroup; }
		
		//rules+=MappingRule
		public Assignment getRulesAssignment_0() { return cRulesAssignment_0; }
		
		//MappingRule
		public RuleCall getRulesMappingRuleParserRuleCall_0_0() { return cRulesMappingRuleParserRuleCall_0_0; }
		
		//("," rules+=MappingRule)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//rules+=MappingRule
		public Assignment getRulesAssignment_1_1() { return cRulesAssignment_1_1; }
		
		//MappingRule
		public RuleCall getRulesMappingRuleParserRuleCall_1_1_0() { return cRulesMappingRuleParserRuleCall_1_1_0; }
	}
	public class MappingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.MappingRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFromAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFromSTRINGTerminalRuleCall_0_0_0 = (RuleCall)cFromAssignment_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cToAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cToSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cToAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPatternAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPatternPatternParserRuleCall_1_0_0 = (RuleCall)cPatternAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cToAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cToSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cToAssignment_1_2.eContents().get(0);
		
		//MappingRule:
		//    from=STRING "->" to=STRING
		//    | pattern=Pattern "=>" to=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//from=STRING "->" to=STRING
		//| pattern=Pattern "=>" to=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//from=STRING "->" to=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//from=STRING
		public Assignment getFromAssignment_0_0() { return cFromAssignment_0_0; }
		
		//STRING
		public RuleCall getFromSTRINGTerminalRuleCall_0_0_0() { return cFromSTRINGTerminalRuleCall_0_0_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_1() { return cHyphenMinusGreaterThanSignKeyword_0_1; }
		
		//to=STRING
		public Assignment getToAssignment_0_2() { return cToAssignment_0_2; }
		
		//STRING
		public RuleCall getToSTRINGTerminalRuleCall_0_2_0() { return cToSTRINGTerminalRuleCall_0_2_0; }
		
		//pattern=Pattern "=>" to=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_1_0() { return cPatternAssignment_1_0; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_1_0_0() { return cPatternPatternParserRuleCall_1_0_0; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1; }
		
		//to=STRING
		public Assignment getToAssignment_1_2() { return cToAssignment_1_2; }
		
		//STRING
		public RuleCall getToSTRINGTerminalRuleCall_1_2_0() { return cToSTRINGTerminalRuleCall_1_2_0; }
	}
	public class SubstringMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.SubstringMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnColumnParserRuleCall_2_0 = (RuleCall)cColumnAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFromAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFromSTRINGTerminalRuleCall_4_0 = (RuleCall)cFromAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cToAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cToSTRINGTerminalRuleCall_6_0 = (RuleCall)cToAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cModeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cModeMappingModeParserRuleCall_8_0 = (RuleCall)cModeAssignment_8.eContents().get(0);
		
		//SubstringMapping:
		//    "replace" "(" column=Column "," from=STRING "," to=STRING ")" mode=MappingMode;
		@Override public ParserRule getRule() { return rule; }
		
		//"replace" "(" column=Column "," from=STRING "," to=STRING ")" mode=MappingMode
		public Group getGroup() { return cGroup; }
		
		//"replace"
		public Keyword getReplaceKeyword_0() { return cReplaceKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//column=Column
		public Assignment getColumnAssignment_2() { return cColumnAssignment_2; }
		
		//Column
		public RuleCall getColumnColumnParserRuleCall_2_0() { return cColumnColumnParserRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//from=STRING
		public Assignment getFromAssignment_4() { return cFromAssignment_4; }
		
		//STRING
		public RuleCall getFromSTRINGTerminalRuleCall_4_0() { return cFromSTRINGTerminalRuleCall_4_0; }
		
		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//to=STRING
		public Assignment getToAssignment_6() { return cToAssignment_6; }
		
		//STRING
		public RuleCall getToSTRINGTerminalRuleCall_6_0() { return cToSTRINGTerminalRuleCall_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//mode=MappingMode
		public Assignment getModeAssignment_8() { return cModeAssignment_8; }
		
		//MappingMode
		public RuleCall getModeMappingModeParserRuleCall_8_0() { return cModeMappingModeParserRuleCall_8_0; }
	}
	public class MappingModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.MappingMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cReplaceKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNewNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNewNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNewNameAssignment_1_1.eContents().get(0);
		
		//MappingMode:
		//    "replace" | "as" newName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"replace" | "as" newName=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"replace"
		public Keyword getReplaceKeyword_0() { return cReplaceKeyword_0; }
		
		//"as" newName=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//"as"
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//newName=ID
		public Assignment getNewNameAssignment_1_1() { return cNewNameAssignment_1_1; }
		
		//ID
		public RuleCall getNewNameIDTerminalRuleCall_1_1_0() { return cNewNameIDTerminalRuleCall_1_1_0; }
	}
	public class MathOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.MathOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMathKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionMathExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNewNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNewNameIDTerminalRuleCall_5_0 = (RuleCall)cNewNameAssignment_5.eContents().get(0);
		
		//MathOp:
		//    "math" "(" expression=MathExpression ")" "as" newName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"math" "(" expression=MathExpression ")" "as" newName=ID
		public Group getGroup() { return cGroup; }
		
		//"math"
		public Keyword getMathKeyword_0() { return cMathKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=MathExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//MathExpression
		public RuleCall getExpressionMathExpressionParserRuleCall_2_0() { return cExpressionMathExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"as"
		public Keyword getAsKeyword_4() { return cAsKeyword_4; }
		
		//newName=ID
		public Assignment getNewNameAssignment_5() { return cNewNameAssignment_5; }
		
		//ID
		public RuleCall getNewNameIDTerminalRuleCall_5_0() { return cNewNameIDTerminalRuleCall_5_0; }
	}
	public class MathExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.MathExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorOperatorParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MathExpression:
		//    Primary (operator=Operator right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (operator=Operator right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(operator=Operator right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_1_0_0() { return cOperatorOperatorParserRuleCall_1_0_0; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOperandAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOperandOperandParserRuleCall_0_0 = (RuleCall)cOperandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionMathExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cCallAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCallFunctionCallParserRuleCall_2_0 = (RuleCall)cCallAssignment_2.eContents().get(0);
		
		//Primary:
		//    operand=Operand | "(" expression=MathExpression ")" | call=FunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//operand=Operand | "(" expression=MathExpression ")" | call=FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//operand=Operand
		public Assignment getOperandAssignment_0() { return cOperandAssignment_0; }
		
		//Operand
		public RuleCall getOperandOperandParserRuleCall_0_0() { return cOperandOperandParserRuleCall_0_0; }
		
		//"(" expression=MathExpression ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//expression=MathExpression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//MathExpression
		public RuleCall getExpressionMathExpressionParserRuleCall_1_1_0() { return cExpressionMathExpressionParserRuleCall_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//call=FunctionCall
		public Assignment getCallAssignment_2() { return cCallAssignment_2; }
		
		//FunctionCall
		public RuleCall getCallFunctionCallParserRuleCall_2_0() { return cCallFunctionCallParserRuleCall_2_0; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionFunctionParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOperandsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOperandsOperandParserRuleCall_2_0_0 = (RuleCall)cOperandsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOperandsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOperandsOperandParserRuleCall_2_1_1_0 = (RuleCall)cOperandsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//    function=Function "(" (operands+=Operand ("," operands+=Operand)*)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//function=Function "(" (operands+=Operand ("," operands+=Operand)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//function=Function
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_0_0() { return cFunctionFunctionParserRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(operands+=Operand ("," operands+=Operand)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//operands+=Operand
		public Assignment getOperandsAssignment_2_0() { return cOperandsAssignment_2_0; }
		
		//Operand
		public RuleCall getOperandsOperandParserRuleCall_2_0_0() { return cOperandsOperandParserRuleCall_2_0_0; }
		
		//("," operands+=Operand)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//operands+=Operand
		public Assignment getOperandsAssignment_2_1_1() { return cOperandsAssignment_2_1_1; }
		
		//Operand
		public RuleCall getOperandsOperandParserRuleCall_2_1_1_0() { return cOperandsOperandParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAbsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSqrtKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPowKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLogKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExpKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSinKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cCosKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cTanKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cRoundKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cCeilKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cFloorKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//Function:
		//    "abs" | "sqrt" | "pow" | "log" | "exp"
		//    | "sin" | "cos" | "tan" | "round" | "ceil" | "floor";
		@Override public ParserRule getRule() { return rule; }
		
		//"abs" | "sqrt" | "pow" | "log" | "exp"
		//| "sin" | "cos" | "tan" | "round" | "ceil" | "floor"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"abs"
		public Keyword getAbsKeyword_0() { return cAbsKeyword_0; }
		
		//"sqrt"
		public Keyword getSqrtKeyword_1() { return cSqrtKeyword_1; }
		
		//"pow"
		public Keyword getPowKeyword_2() { return cPowKeyword_2; }
		
		//"log"
		public Keyword getLogKeyword_3() { return cLogKeyword_3; }
		
		//"exp"
		public Keyword getExpKeyword_4() { return cExpKeyword_4; }
		
		//"sin"
		public Keyword getSinKeyword_5() { return cSinKeyword_5; }
		
		//"cos"
		public Keyword getCosKeyword_6() { return cCosKeyword_6; }
		
		//"tan"
		public Keyword getTanKeyword_7() { return cTanKeyword_7; }
		
		//"round"
		public Keyword getRoundKeyword_8() { return cRoundKeyword_8; }
		
		//"ceil"
		public Keyword getCeilKeyword_9() { return cCeilKeyword_9; }
		
		//"floor"
		public Keyword getFloorKeyword_10() { return cFloorKeyword_10; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cColumnAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cColumnColumnParserRuleCall_0_0 = (RuleCall)cColumnAssignment_0.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumberNumberParserRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		
		//Operand:
		//    column=Column | number=Number | string=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//column=Column | number=Number | string=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//column=Column
		public Assignment getColumnAssignment_0() { return cColumnAssignment_0; }
		
		//Column
		public RuleCall getColumnColumnParserRuleCall_0_0() { return cColumnColumnParserRuleCall_0_0; }
		
		//number=Number
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_1_0() { return cNumberNumberParserRuleCall_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCircumflexAccentKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//Operator:
		//    "+" | "-" | "*" | "/" | "%" | "^";
		@Override public ParserRule getRule() { return rule; }
		
		//"+" | "-" | "*" | "/" | "%" | "^"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//"/"
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
		
		//"%"
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }
		
		//"^"
		public Keyword getCircumflexAccentKeyword_5() { return cCircumflexAccentKeyword_5; }
	}
	public class BinnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Binner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnColumnParserRuleCall_2_0 = (RuleCall)cColumnAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDefinitionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefinitionsBinDefinitionsParserRuleCall_5_0 = (RuleCall)cDefinitionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cModeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cModeBinModeParserRuleCall_7_0 = (RuleCall)cModeAssignment_7.eContents().get(0);
		
		//Binner:
		//    "bin" "(" column=Column ")" "{" definitions=BinDefinitions "}" mode=BinMode;
		@Override public ParserRule getRule() { return rule; }
		
		//"bin" "(" column=Column ")" "{" definitions=BinDefinitions "}" mode=BinMode
		public Group getGroup() { return cGroup; }
		
		//"bin"
		public Keyword getBinKeyword_0() { return cBinKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//column=Column
		public Assignment getColumnAssignment_2() { return cColumnAssignment_2; }
		
		//Column
		public RuleCall getColumnColumnParserRuleCall_2_0() { return cColumnColumnParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//definitions=BinDefinitions
		public Assignment getDefinitionsAssignment_5() { return cDefinitionsAssignment_5; }
		
		//BinDefinitions
		public RuleCall getDefinitionsBinDefinitionsParserRuleCall_5_0() { return cDefinitionsBinDefinitionsParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//mode=BinMode
		public Assignment getModeAssignment_7() { return cModeAssignment_7; }
		
		//BinMode
		public RuleCall getModeBinModeParserRuleCall_7_0() { return cModeBinModeParserRuleCall_7_0; }
	}
	public class BinDefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.BinDefinitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefinitionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDefinitionsBinDefParserRuleCall_0_0 = (RuleCall)cDefinitionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDefinitionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDefinitionsBinDefParserRuleCall_1_1_0 = (RuleCall)cDefinitionsAssignment_1_1.eContents().get(0);
		
		//BinDefinitions:
		//    (definitions+=BinDef ("," definitions+=BinDef)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(definitions+=BinDef ("," definitions+=BinDef)*)?
		public Group getGroup() { return cGroup; }
		
		//definitions+=BinDef
		public Assignment getDefinitionsAssignment_0() { return cDefinitionsAssignment_0; }
		
		//BinDef
		public RuleCall getDefinitionsBinDefParserRuleCall_0_0() { return cDefinitionsBinDefParserRuleCall_0_0; }
		
		//("," definitions+=BinDef)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//definitions+=BinDef
		public Assignment getDefinitionsAssignment_1_1() { return cDefinitionsAssignment_1_1; }
		
		//BinDef
		public RuleCall getDefinitionsBinDefParserRuleCall_1_1_0() { return cDefinitionsBinDefParserRuleCall_1_1_0; }
	}
	public class BinDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.BinDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameBinNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIntervalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIntervalIntervalParserRuleCall_2_0 = (RuleCall)cIntervalAssignment_2.eContents().get(0);
		
		//BinDef:
		//    name=BinName ":" interval=Interval;
		@Override public ParserRule getRule() { return rule; }
		
		//name=BinName ":" interval=Interval
		public Group getGroup() { return cGroup; }
		
		//name=BinName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//BinName
		public RuleCall getNameBinNameParserRuleCall_0_0() { return cNameBinNameParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//interval=Interval
		public Assignment getIntervalAssignment_2() { return cIntervalAssignment_2; }
		
		//Interval
		public RuleCall getIntervalIntervalParserRuleCall_2_0() { return cIntervalIntervalParserRuleCall_2_0; }
	}
	public class BinNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.BinName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//BinName:
		//    name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	public class IntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Interval");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLowerAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLowerIntervalBoundParserRuleCall_0_1_0 = (RuleCall)cLowerAssignment_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cUpperAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cUpperIntervalBoundParserRuleCall_0_3_0 = (RuleCall)cUpperAssignment_0_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLowerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLowerIntervalBoundParserRuleCall_1_1_0 = (RuleCall)cLowerAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cUpperAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cUpperIntervalBoundParserRuleCall_1_3_0 = (RuleCall)cUpperAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLowerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLowerIntervalBoundParserRuleCall_2_1_0 = (RuleCall)cLowerAssignment_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cUpperAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cUpperIntervalBoundParserRuleCall_2_3_0 = (RuleCall)cUpperAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLowerAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLowerIntervalBoundParserRuleCall_3_1_0 = (RuleCall)cLowerAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cUpperAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cUpperIntervalBoundParserRuleCall_3_3_0 = (RuleCall)cUpperAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//Interval:
		//    "[" lower=IntervalBound "," upper=IntervalBound "]"
		//    | "[" lower=IntervalBound "," upper=IntervalBound ")"
		//    | "(" lower=IntervalBound "," upper=IntervalBound "]"
		//    | "(" lower=IntervalBound "," upper=IntervalBound ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" lower=IntervalBound "," upper=IntervalBound "]"
		//| "[" lower=IntervalBound "," upper=IntervalBound ")"
		//| "(" lower=IntervalBound "," upper=IntervalBound "]"
		//| "(" lower=IntervalBound "," upper=IntervalBound ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"[" lower=IntervalBound "," upper=IntervalBound "]"
		public Group getGroup_0() { return cGroup_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//lower=IntervalBound
		public Assignment getLowerAssignment_0_1() { return cLowerAssignment_0_1; }
		
		//IntervalBound
		public RuleCall getLowerIntervalBoundParserRuleCall_0_1_0() { return cLowerIntervalBoundParserRuleCall_0_1_0; }
		
		//","
		public Keyword getCommaKeyword_0_2() { return cCommaKeyword_0_2; }
		
		//upper=IntervalBound
		public Assignment getUpperAssignment_0_3() { return cUpperAssignment_0_3; }
		
		//IntervalBound
		public RuleCall getUpperIntervalBoundParserRuleCall_0_3_0() { return cUpperIntervalBoundParserRuleCall_0_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_4() { return cRightSquareBracketKeyword_0_4; }
		
		//"[" lower=IntervalBound "," upper=IntervalBound ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//lower=IntervalBound
		public Assignment getLowerAssignment_1_1() { return cLowerAssignment_1_1; }
		
		//IntervalBound
		public RuleCall getLowerIntervalBoundParserRuleCall_1_1_0() { return cLowerIntervalBoundParserRuleCall_1_1_0; }
		
		//","
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//upper=IntervalBound
		public Assignment getUpperAssignment_1_3() { return cUpperAssignment_1_3; }
		
		//IntervalBound
		public RuleCall getUpperIntervalBoundParserRuleCall_1_3_0() { return cUpperIntervalBoundParserRuleCall_1_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//"(" lower=IntervalBound "," upper=IntervalBound "]"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//lower=IntervalBound
		public Assignment getLowerAssignment_2_1() { return cLowerAssignment_2_1; }
		
		//IntervalBound
		public RuleCall getLowerIntervalBoundParserRuleCall_2_1_0() { return cLowerIntervalBoundParserRuleCall_2_1_0; }
		
		//","
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//upper=IntervalBound
		public Assignment getUpperAssignment_2_3() { return cUpperAssignment_2_3; }
		
		//IntervalBound
		public RuleCall getUpperIntervalBoundParserRuleCall_2_3_0() { return cUpperIntervalBoundParserRuleCall_2_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
		
		//"(" lower=IntervalBound "," upper=IntervalBound ")"
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//lower=IntervalBound
		public Assignment getLowerAssignment_3_1() { return cLowerAssignment_3_1; }
		
		//IntervalBound
		public RuleCall getLowerIntervalBoundParserRuleCall_3_1_0() { return cLowerIntervalBoundParserRuleCall_3_1_0; }
		
		//","
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }
		
		//upper=IntervalBound
		public Assignment getUpperAssignment_3_3() { return cUpperAssignment_3_3; }
		
		//IntervalBound
		public RuleCall getUpperIntervalBoundParserRuleCall_3_3_0() { return cUpperIntervalBoundParserRuleCall_3_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
	}
	public class IntervalBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.IntervalBound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueNumberParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cInfKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInfKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInfinityKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cInfinityKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//IntervalBound:
		//    value=Number | "-inf" | "inf" | "-Infinity" | "Infinity";
		@Override public ParserRule getRule() { return rule; }
		
		//value=Number | "-inf" | "inf" | "-Infinity" | "Infinity"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=Number
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_0_0() { return cValueNumberParserRuleCall_0_0; }
		
		//"-inf"
		public Keyword getInfKeyword_1() { return cInfKeyword_1; }
		
		//"inf"
		public Keyword getInfKeyword_2() { return cInfKeyword_2; }
		
		//"-Infinity"
		public Keyword getInfinityKeyword_3() { return cInfinityKeyword_3; }
		
		//"Infinity"
		public Keyword getInfinityKeyword_4() { return cInfinityKeyword_4; }
	}
	public class BinModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.BinMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cReplaceKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNewNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNewNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNewNameAssignment_1_1.eContents().get(0);
		
		//BinMode:
		//    "replace" | "as" newName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"replace" | "as" newName=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"replace"
		public Keyword getReplaceKeyword_0() { return cReplaceKeyword_0; }
		
		//"as" newName=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//"as"
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//newName=ID
		public Assignment getNewNameAssignment_1_1() { return cNewNameAssignment_1_1; }
		
		//ID
		public RuleCall getNewNameIDTerminalRuleCall_1_1_0() { return cNewNameIDTerminalRuleCall_1_1_0; }
	}
	public class TypeConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.TypeConversion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTo_numericKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cColumnsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cColumnsColumnListParserRuleCall_0_2_0 = (RuleCall)cColumnsAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cSeparatorAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cSeparatorDecimalSeparatorParserRuleCall_0_4_0 = (RuleCall)cSeparatorAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTo_stringKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cColumnsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cColumnsColumnListParserRuleCall_1_2_0 = (RuleCall)cColumnsAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cTo_categoricalKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cColumnsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cColumnsColumnListParserRuleCall_2_2_0 = (RuleCall)cColumnsAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cTo_booleanKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cColumnsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cColumnsColumnListParserRuleCall_3_2_0 = (RuleCall)cColumnsAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cTo_dateKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cColumnsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cColumnsColumnListParserRuleCall_4_2_0 = (RuleCall)cColumnsAssignment_4_2.eContents().get(0);
		private final Keyword cCommaKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cFormatAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cFormatDateFormatParserRuleCall_4_4_0 = (RuleCall)cFormatAssignment_4_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		
		//TypeConversion:
		//    "to_numeric" "(" columns=ColumnList ")" separator=DecimalSeparator?
		//    | "to_string" "(" columns=ColumnList ")"
		//    | "to_categorical" "(" columns=ColumnList ")"
		//    | "to_boolean" "(" columns=ColumnList ")"
		//    | "to_date" "(" columns=ColumnList "," format=DateFormat? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"to_numeric" "(" columns=ColumnList ")" separator=DecimalSeparator?
		//| "to_string" "(" columns=ColumnList ")"
		//| "to_categorical" "(" columns=ColumnList ")"
		//| "to_boolean" "(" columns=ColumnList ")"
		//| "to_date" "(" columns=ColumnList "," format=DateFormat? ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"to_numeric" "(" columns=ColumnList ")" separator=DecimalSeparator?
		public Group getGroup_0() { return cGroup_0; }
		
		//"to_numeric"
		public Keyword getTo_numericKeyword_0_0() { return cTo_numericKeyword_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//columns=ColumnList
		public Assignment getColumnsAssignment_0_2() { return cColumnsAssignment_0_2; }
		
		//ColumnList
		public RuleCall getColumnsColumnListParserRuleCall_0_2_0() { return cColumnsColumnListParserRuleCall_0_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//separator=DecimalSeparator?
		public Assignment getSeparatorAssignment_0_4() { return cSeparatorAssignment_0_4; }
		
		//DecimalSeparator
		public RuleCall getSeparatorDecimalSeparatorParserRuleCall_0_4_0() { return cSeparatorDecimalSeparatorParserRuleCall_0_4_0; }
		
		//"to_string" "(" columns=ColumnList ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"to_string"
		public Keyword getTo_stringKeyword_1_0() { return cTo_stringKeyword_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//columns=ColumnList
		public Assignment getColumnsAssignment_1_2() { return cColumnsAssignment_1_2; }
		
		//ColumnList
		public RuleCall getColumnsColumnListParserRuleCall_1_2_0() { return cColumnsColumnListParserRuleCall_1_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//"to_categorical" "(" columns=ColumnList ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"to_categorical"
		public Keyword getTo_categoricalKeyword_2_0() { return cTo_categoricalKeyword_2_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//columns=ColumnList
		public Assignment getColumnsAssignment_2_2() { return cColumnsAssignment_2_2; }
		
		//ColumnList
		public RuleCall getColumnsColumnListParserRuleCall_2_2_0() { return cColumnsColumnListParserRuleCall_2_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//"to_boolean" "(" columns=ColumnList ")"
		public Group getGroup_3() { return cGroup_3; }
		
		//"to_boolean"
		public Keyword getTo_booleanKeyword_3_0() { return cTo_booleanKeyword_3_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//columns=ColumnList
		public Assignment getColumnsAssignment_3_2() { return cColumnsAssignment_3_2; }
		
		//ColumnList
		public RuleCall getColumnsColumnListParserRuleCall_3_2_0() { return cColumnsColumnListParserRuleCall_3_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//"to_date" "(" columns=ColumnList "," format=DateFormat? ")"
		public Group getGroup_4() { return cGroup_4; }
		
		//"to_date"
		public Keyword getTo_dateKeyword_4_0() { return cTo_dateKeyword_4_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//columns=ColumnList
		public Assignment getColumnsAssignment_4_2() { return cColumnsAssignment_4_2; }
		
		//ColumnList
		public RuleCall getColumnsColumnListParserRuleCall_4_2_0() { return cColumnsColumnListParserRuleCall_4_2_0; }
		
		//","
		public Keyword getCommaKeyword_4_3() { return cCommaKeyword_4_3; }
		
		//format=DateFormat?
		public Assignment getFormatAssignment_4_4() { return cFormatAssignment_4_4; }
		
		//DateFormat
		public RuleCall getFormatDateFormatParserRuleCall_4_4_0() { return cFormatDateFormatParserRuleCall_4_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4_5() { return cRightParenthesisKeyword_4_5; }
	}
	public class DecimalSeparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.DecimalSeparator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeparatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//DecimalSeparator:
		//    "separator" "=" ("." | ",");
		@Override public ParserRule getRule() { return rule; }
		
		//"separator" "=" ("." | ",")
		public Group getGroup() { return cGroup; }
		
		//"separator"
		public Keyword getSeparatorKeyword_0() { return cSeparatorKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//("." | ",")
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//","
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
	}
	public class DateFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.DateFormat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFormatAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormatSTRINGTerminalRuleCall_2_0 = (RuleCall)cFormatAssignment_2.eContents().get(0);
		
		//DateFormat:
		//    "format" "=" format=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"format" "=" format=STRING
		public Group getGroup() { return cGroup; }
		
		//"format"
		public Keyword getFormatKeyword_0() { return cFormatKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//format=STRING
		public Assignment getFormatAssignment_2() { return cFormatAssignment_2; }
		
		//STRING
		public RuleCall getFormatSTRINGTerminalRuleCall_2_0() { return cFormatSTRINGTerminalRuleCall_2_0; }
	}
	public class ImputationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Imputation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImputeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnsColumnListParserRuleCall_2_0 = (RuleCall)cColumnsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMethodAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMethodImputeMethodParserRuleCall_5_0 = (RuleCall)cMethodAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Imputation:
		//    "impute" "(" columns=ColumnList ")" "{" method=ImputeMethod "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"impute" "(" columns=ColumnList ")" "{" method=ImputeMethod "}"
		public Group getGroup() { return cGroup; }
		
		//"impute"
		public Keyword getImputeKeyword_0() { return cImputeKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//columns=ColumnList
		public Assignment getColumnsAssignment_2() { return cColumnsAssignment_2; }
		
		//ColumnList
		public RuleCall getColumnsColumnListParserRuleCall_2_0() { return cColumnsColumnListParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//method=ImputeMethod
		public Assignment getMethodAssignment_5() { return cMethodAssignment_5; }
		
		//ImputeMethod
		public RuleCall getMethodImputeMethodParserRuleCall_5_0() { return cMethodImputeMethodParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ImputeMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.ImputeMethod");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFixedImputeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatisticalImputeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSequentialImputeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAdvancedImputeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ImputeMethod:
		//    FixedImpute
		//    | StatisticalImpute
		//    | SequentialImpute
		//    | AdvancedImpute;
		@Override public ParserRule getRule() { return rule; }
		
		//FixedImpute
		//| StatisticalImpute
		//| SequentialImpute
		//| AdvancedImpute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FixedImpute
		public RuleCall getFixedImputeParserRuleCall_0() { return cFixedImputeParserRuleCall_0; }
		
		//StatisticalImpute
		public RuleCall getStatisticalImputeParserRuleCall_1() { return cStatisticalImputeParserRuleCall_1; }
		
		//SequentialImpute
		public RuleCall getSequentialImputeParserRuleCall_2() { return cSequentialImputeParserRuleCall_2; }
		
		//AdvancedImpute
		public RuleCall getAdvancedImputeParserRuleCall_3() { return cAdvancedImputeParserRuleCall_3; }
	}
	public class FixedImputeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.FixedImpute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFixedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesValueListParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		
		//FixedImpute:
		//    "fixed" "=" values=ValueList;
		@Override public ParserRule getRule() { return rule; }
		
		//"fixed" "=" values=ValueList
		public Group getGroup() { return cGroup; }
		
		//"fixed"
		public Keyword getFixedKeyword_0() { return cFixedKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//values=ValueList
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//ValueList
		public RuleCall getValuesValueListParserRuleCall_2_0() { return cValuesValueListParserRuleCall_2_0; }
	}
	public class ValueListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.ValueList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cValuesAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cValuesValueParserRuleCall_1_1_0_0 = (RuleCall)cValuesAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cValuesValueParserRuleCall_1_1_1_1_0 = (RuleCall)cValuesAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ValueList:
		//    value=Value | "[" (values+=Value ("," values+=Value)*)? "]";
		@Override public ParserRule getRule() { return rule; }
		
		//value=Value | "[" (values+=Value ("," values+=Value)*)? "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=Value
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_0_0() { return cValueValueParserRuleCall_0_0; }
		
		//"[" (values+=Value ("," values+=Value)*)? "]"
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//(values+=Value ("," values+=Value)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//values+=Value
		public Assignment getValuesAssignment_1_1_0() { return cValuesAssignment_1_1_0; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_1_1_0_0() { return cValuesValueParserRuleCall_1_1_0_0; }
		
		//("," values+=Value)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }
		
		//values+=Value
		public Assignment getValuesAssignment_1_1_1_1() { return cValuesAssignment_1_1_1_1; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_1_1_1_1_0() { return cValuesValueParserRuleCall_1_1_1_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberNumberParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		private final Keyword cNullKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Value:
		//    number=Number | string=STRING | "null";
		@Override public ParserRule getRule() { return rule; }
		
		//number=Number | string=STRING | "null"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//number=Number
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_0_0() { return cNumberNumberParserRuleCall_0_0; }
		
		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
		
		//"null"
		public Keyword getNullKeyword_2() { return cNullKeyword_2; }
	}
	public class StatisticalImputeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.StatisticalImpute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMeanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMedianKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cModeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMost_frequentKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMaxKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMinKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//StatisticalImpute:
		//    "mean"
		//    | "median"
		//    | "mode"
		//    | "most_frequent"
		//    | "max"
		//    | "min";
		@Override public ParserRule getRule() { return rule; }
		
		//"mean"
		//| "median"
		//| "mode"
		//| "most_frequent"
		//| "max"
		//| "min"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"mean"
		public Keyword getMeanKeyword_0() { return cMeanKeyword_0; }
		
		//"median"
		public Keyword getMedianKeyword_1() { return cMedianKeyword_1; }
		
		//"mode"
		public Keyword getModeKeyword_2() { return cModeKeyword_2; }
		
		//"most_frequent"
		public Keyword getMost_frequentKeyword_3() { return cMost_frequentKeyword_3; }
		
		//"max"
		public Keyword getMaxKeyword_4() { return cMaxKeyword_4; }
		
		//"min"
		public Keyword getMinKeyword_5() { return cMinKeyword_5; }
	}
	public class SequentialImputeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.SequentialImpute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cForward_fillKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBackward_fillKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPrevious_valueKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNext_valueKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//SequentialImpute:
		//    "forward_fill"
		//    | "backward_fill"
		//    | "previous_value"
		//    | "next_value";
		@Override public ParserRule getRule() { return rule; }
		
		//"forward_fill"
		//| "backward_fill"
		//| "previous_value"
		//| "next_value"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"forward_fill"
		public Keyword getForward_fillKeyword_0() { return cForward_fillKeyword_0; }
		
		//"backward_fill"
		public Keyword getBackward_fillKeyword_1() { return cBackward_fillKeyword_1; }
		
		//"previous_value"
		public Keyword getPrevious_valueKeyword_2() { return cPrevious_valueKeyword_2; }
		
		//"next_value"
		public Keyword getNext_valueKeyword_3() { return cNext_valueKeyword_3; }
	}
	public class AdvancedImputeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.AdvancedImpute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cInterpolationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeInterpolationTypeParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cMoving_averageKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cWindowKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cWindowSizeAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cWindowSizeNumberParserRuleCall_1_1_2_0 = (RuleCall)cWindowSizeAssignment_1_1_2.eContents().get(0);
		private final Keyword cLinearKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cPolynomialKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cDegreeKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cDegreeAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cDegreeNumberParserRuleCall_3_1_2_0 = (RuleCall)cDegreeAssignment_3_1_2.eContents().get(0);
		private final Keyword cSplineKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//AdvancedImpute:
		//    "interpolation" type=InterpolationType?
		//    | "moving_average" ("window" "=" windowSize=Number)?
		//    | "linear"
		//    | "polynomial" ("degree" "=" degree=Number)?
		//    | "spline";
		@Override public ParserRule getRule() { return rule; }
		
		//"interpolation" type=InterpolationType?
		//| "moving_average" ("window" "=" windowSize=Number)?
		//| "linear"
		//| "polynomial" ("degree" "=" degree=Number)?
		//| "spline"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"interpolation" type=InterpolationType?
		public Group getGroup_0() { return cGroup_0; }
		
		//"interpolation"
		public Keyword getInterpolationKeyword_0_0() { return cInterpolationKeyword_0_0; }
		
		//type=InterpolationType?
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//InterpolationType
		public RuleCall getTypeInterpolationTypeParserRuleCall_0_1_0() { return cTypeInterpolationTypeParserRuleCall_0_1_0; }
		
		//"moving_average" ("window" "=" windowSize=Number)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"moving_average"
		public Keyword getMoving_averageKeyword_1_0() { return cMoving_averageKeyword_1_0; }
		
		//("window" "=" windowSize=Number)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"window"
		public Keyword getWindowKeyword_1_1_0() { return cWindowKeyword_1_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1_1() { return cEqualsSignKeyword_1_1_1; }
		
		//windowSize=Number
		public Assignment getWindowSizeAssignment_1_1_2() { return cWindowSizeAssignment_1_1_2; }
		
		//Number
		public RuleCall getWindowSizeNumberParserRuleCall_1_1_2_0() { return cWindowSizeNumberParserRuleCall_1_1_2_0; }
		
		//"linear"
		public Keyword getLinearKeyword_2() { return cLinearKeyword_2; }
		
		//"polynomial" ("degree" "=" degree=Number)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"polynomial"
		public Keyword getPolynomialKeyword_3_0() { return cPolynomialKeyword_3_0; }
		
		//("degree" "=" degree=Number)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//"degree"
		public Keyword getDegreeKeyword_3_1_0() { return cDegreeKeyword_3_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_3_1_1() { return cEqualsSignKeyword_3_1_1; }
		
		//degree=Number
		public Assignment getDegreeAssignment_3_1_2() { return cDegreeAssignment_3_1_2; }
		
		//Number
		public RuleCall getDegreeNumberParserRuleCall_3_1_2_0() { return cDegreeNumberParserRuleCall_3_1_2_0; }
		
		//"spline"
		public Keyword getSplineKeyword_4() { return cSplineKeyword_4; }
	}
	public class InterpolationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.InterpolationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLinearKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPolynomialKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSplineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//InterpolationType:
		//    "linear" | "polynomial" | "spline";
		@Override public ParserRule getRule() { return rule; }
		
		//"linear" | "polynomial" | "spline"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"linear"
		public Keyword getLinearKeyword_0() { return cLinearKeyword_0; }
		
		//"polynomial"
		public Keyword getPolynomialKeyword_1() { return cPolynomialKeyword_1; }
		
		//"spline"
		public Keyword getSplineKeyword_2() { return cSplineKeyword_2; }
	}
	public class OutlierTreatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.OutlierTreatment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutliersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnsColumnListParserRuleCall_2_0 = (RuleCall)cColumnsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStrategyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStrategyOutlierStrategyParserRuleCall_5_0 = (RuleCall)cStrategyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//OutlierTreatment:
		//    "outliers" "(" columns=ColumnList ")" "{" strategy=OutlierStrategy "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"outliers" "(" columns=ColumnList ")" "{" strategy=OutlierStrategy "}"
		public Group getGroup() { return cGroup; }
		
		//"outliers"
		public Keyword getOutliersKeyword_0() { return cOutliersKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//columns=ColumnList
		public Assignment getColumnsAssignment_2() { return cColumnsAssignment_2; }
		
		//ColumnList
		public RuleCall getColumnsColumnListParserRuleCall_2_0() { return cColumnsColumnListParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//strategy=OutlierStrategy
		public Assignment getStrategyAssignment_5() { return cStrategyAssignment_5; }
		
		//OutlierStrategy
		public RuleCall getStrategyOutlierStrategyParserRuleCall_5_0() { return cStrategyOutlierStrategyParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class OutlierStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.OutlierStrategy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReplacementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReplacementReplacementStrategyParserRuleCall_0_0 = (RuleCall)cReplacementAssignment_0.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodDetectionMethodParserRuleCall_1_0 = (RuleCall)cMethodAssignment_1.eContents().get(0);
		private final Assignment cOptionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOptionsOutlierOptionsParserRuleCall_2_0 = (RuleCall)cOptionsAssignment_2.eContents().get(0);
		
		//OutlierStrategy:
		//    replacement=ReplacementStrategy method=DetectionMethod options=OutlierOptions?;
		@Override public ParserRule getRule() { return rule; }
		
		//replacement=ReplacementStrategy method=DetectionMethod options=OutlierOptions?
		public Group getGroup() { return cGroup; }
		
		//replacement=ReplacementStrategy
		public Assignment getReplacementAssignment_0() { return cReplacementAssignment_0; }
		
		//ReplacementStrategy
		public RuleCall getReplacementReplacementStrategyParserRuleCall_0_0() { return cReplacementReplacementStrategyParserRuleCall_0_0; }
		
		//method=DetectionMethod
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }
		
		//DetectionMethod
		public RuleCall getMethodDetectionMethodParserRuleCall_1_0() { return cMethodDetectionMethodParserRuleCall_1_0; }
		
		//options=OutlierOptions?
		public Assignment getOptionsAssignment_2() { return cOptionsAssignment_2; }
		
		//OutlierOptions
		public RuleCall getOptionsOutlierOptionsParserRuleCall_2_0() { return cOptionsOutlierOptionsParserRuleCall_2_0; }
	}
	public class ReplacementStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.ReplacementStrategy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cReplace_closestKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cReplace_missingKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cReplace_by_closestKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cReplace_withKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cValueAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cValueNumberParserRuleCall_3_2_0 = (RuleCall)cValueAssignment_3_2.eContents().get(0);
		private final Keyword cRemoveKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCapKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ReplacementStrategy:
		//    "replace_closest"
		//    | "replace_missing"
		//    | "replace_by_closest"
		//    | "replace_with" "=" value=Number
		//    | "remove"
		//    | "cap";
		@Override public ParserRule getRule() { return rule; }
		
		//"replace_closest"
		//| "replace_missing"
		//| "replace_by_closest"
		//| "replace_with" "=" value=Number
		//| "remove"
		//| "cap"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"replace_closest"
		public Keyword getReplace_closestKeyword_0() { return cReplace_closestKeyword_0; }
		
		//"replace_missing"
		public Keyword getReplace_missingKeyword_1() { return cReplace_missingKeyword_1; }
		
		//"replace_by_closest"
		public Keyword getReplace_by_closestKeyword_2() { return cReplace_by_closestKeyword_2; }
		
		//"replace_with" "=" value=Number
		public Group getGroup_3() { return cGroup_3; }
		
		//"replace_with"
		public Keyword getReplace_withKeyword_3_0() { return cReplace_withKeyword_3_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//value=Number
		public Assignment getValueAssignment_3_2() { return cValueAssignment_3_2; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_3_2_0() { return cValueNumberParserRuleCall_3_2_0; }
		
		//"remove"
		public Keyword getRemoveKeyword_4() { return cRemoveKeyword_4; }
		
		//"cap"
		public Keyword getCapKeyword_5() { return cCapKeyword_5; }
	}
	public class DetectionMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.DetectionMethod");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIQRMethodParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cZScoreMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPercentileMethodParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DetectionMethod:
		//    IQRMethod | ZScoreMethod | PercentileMethod;
		@Override public ParserRule getRule() { return rule; }
		
		//IQRMethod | ZScoreMethod | PercentileMethod
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IQRMethod
		public RuleCall getIQRMethodParserRuleCall_0() { return cIQRMethodParserRuleCall_0; }
		
		//ZScoreMethod
		public RuleCall getZScoreMethodParserRuleCall_1() { return cZScoreMethodParserRuleCall_1; }
		
		//PercentileMethod
		public RuleCall getPercentileMethodParserRuleCall_2() { return cPercentileMethodParserRuleCall_2; }
	}
	public class IQRMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.IQRMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIqrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsIQRParamsParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		
		//IQRMethod:
		//    "iqr" params=IQRParams?;
		@Override public ParserRule getRule() { return rule; }
		
		//"iqr" params=IQRParams?
		public Group getGroup() { return cGroup; }
		
		//"iqr"
		public Keyword getIqrKeyword_0() { return cIqrKeyword_0; }
		
		//params=IQRParams?
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }
		
		//IQRParams
		public RuleCall getParamsIQRParamsParserRuleCall_1_0() { return cParamsIQRParamsParserRuleCall_1_0; }
	}
	public class IQRParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.IQRParams");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cScalarKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cScalarAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cScalarNumberParserRuleCall_0_2_0 = (RuleCall)cScalarAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEstimationKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEstimationAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEstimationEstimationTypeParserRuleCall_1_2_0 = (RuleCall)cEstimationAssignment_1_2.eContents().get(0);
		
		//IQRParams:
		//    "scalar" "=" scalar=Number
		//    | "estimation" "=" estimation=EstimationType;
		@Override public ParserRule getRule() { return rule; }
		
		//"scalar" "=" scalar=Number
		//| "estimation" "=" estimation=EstimationType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"scalar" "=" scalar=Number
		public Group getGroup_0() { return cGroup_0; }
		
		//"scalar"
		public Keyword getScalarKeyword_0_0() { return cScalarKeyword_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//scalar=Number
		public Assignment getScalarAssignment_0_2() { return cScalarAssignment_0_2; }
		
		//Number
		public RuleCall getScalarNumberParserRuleCall_0_2_0() { return cScalarNumberParserRuleCall_0_2_0; }
		
		//"estimation" "=" estimation=EstimationType
		public Group getGroup_1() { return cGroup_1; }
		
		//"estimation"
		public Keyword getEstimationKeyword_1_0() { return cEstimationKeyword_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//estimation=EstimationType
		public Assignment getEstimationAssignment_1_2() { return cEstimationAssignment_1_2; }
		
		//EstimationType
		public RuleCall getEstimationEstimationTypeParserRuleCall_1_2_0() { return cEstimationEstimationTypeParserRuleCall_1_2_0; }
	}
	public class EstimationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.EstimationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cR_4Keyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cR_7Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cR_8Keyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//EstimationType:
		//    "R_4" | "R_7" | "R_8";
		@Override public ParserRule getRule() { return rule; }
		
		//"R_4" | "R_7" | "R_8"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"R_4"
		public Keyword getR_4Keyword_0() { return cR_4Keyword_0; }
		
		//"R_7"
		public Keyword getR_7Keyword_1() { return cR_7Keyword_1; }
		
		//"R_8"
		public Keyword getR_8Keyword_2() { return cR_8Keyword_2; }
	}
	public class ZScoreMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.ZScoreMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cZscoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cThresholdKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cThresholdAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cThresholdNumberParserRuleCall_1_2_0 = (RuleCall)cThresholdAssignment_1_2.eContents().get(0);
		
		//ZScoreMethod:
		//    "zscore" ("threshold" "=" threshold=Number)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"zscore" ("threshold" "=" threshold=Number)?
		public Group getGroup() { return cGroup; }
		
		//"zscore"
		public Keyword getZscoreKeyword_0() { return cZscoreKeyword_0; }
		
		//("threshold" "=" threshold=Number)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"threshold"
		public Keyword getThresholdKeyword_1_0() { return cThresholdKeyword_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//threshold=Number
		public Assignment getThresholdAssignment_1_2() { return cThresholdAssignment_1_2; }
		
		//Number
		public RuleCall getThresholdNumberParserRuleCall_1_2_0() { return cThresholdNumberParserRuleCall_1_2_0; }
	}
	public class PercentileMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.PercentileMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPercentileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLowerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLowerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLowerNumberParserRuleCall_3_0 = (RuleCall)cLowerAssignment_3.eContents().get(0);
		private final Keyword cUpperKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUpperAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUpperNumberParserRuleCall_6_0 = (RuleCall)cUpperAssignment_6.eContents().get(0);
		
		//PercentileMethod:
		//    "percentile" "lower" "=" lower=Number "upper" "=" upper=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//"percentile" "lower" "=" lower=Number "upper" "=" upper=Number
		public Group getGroup() { return cGroup; }
		
		//"percentile"
		public Keyword getPercentileKeyword_0() { return cPercentileKeyword_0; }
		
		//"lower"
		public Keyword getLowerKeyword_1() { return cLowerKeyword_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//lower=Number
		public Assignment getLowerAssignment_3() { return cLowerAssignment_3; }
		
		//Number
		public RuleCall getLowerNumberParserRuleCall_3_0() { return cLowerNumberParserRuleCall_3_0; }
		
		//"upper"
		public Keyword getUpperKeyword_4() { return cUpperKeyword_4; }
		
		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//upper=Number
		public Assignment getUpperAssignment_6() { return cUpperAssignment_6; }
		
		//Number
		public RuleCall getUpperNumberParserRuleCall_6_0() { return cUpperNumberParserRuleCall_6_0; }
	}
	public class OutlierOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.OutlierOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScopeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cScopeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScopeOutlierScopeParserRuleCall_2_0 = (RuleCall)cScopeAssignment_2.eContents().get(0);
		
		//OutlierOptions:
		//    "scope" "=" scope=OutlierScope;
		@Override public ParserRule getRule() { return rule; }
		
		//"scope" "=" scope=OutlierScope
		public Group getGroup() { return cGroup; }
		
		//"scope"
		public Keyword getScopeKeyword_0() { return cScopeKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//scope=OutlierScope
		public Assignment getScopeAssignment_2() { return cScopeAssignment_2; }
		
		//OutlierScope
		public RuleCall getScopeOutlierScopeParserRuleCall_2_0() { return cScopeOutlierScopeParserRuleCall_2_0; }
	}
	public class OutlierScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.OutlierScope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAllKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAll_outliersKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLower_onlyKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cUpper_onlyKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OutlierScope:
		//    "all" | "all_outliers" | "lower_only" | "upper_only";
		@Override public ParserRule getRule() { return rule; }
		
		//"all" | "all_outliers" | "lower_only" | "upper_only"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"all"
		public Keyword getAllKeyword_0() { return cAllKeyword_0; }
		
		//"all_outliers"
		public Keyword getAll_outliersKeyword_1() { return cAll_outliersKeyword_1; }
		
		//"lower_only"
		public Keyword getLower_onlyKeyword_2() { return cLower_onlyKeyword_2; }
		
		//"upper_only"
		public Keyword getUpper_onlyKeyword_3() { return cUpper_onlyKeyword_3; }
	}
	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Join");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJoinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftIDTerminalRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightIDTerminalRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSpecAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSpecJoinSpecParserRuleCall_7_0 = (RuleCall)cSpecAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Join:
		//    "join" "(" left=ID "," right=ID ")" "{" spec=JoinSpec "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"join" "(" left=ID "," right=ID ")" "{" spec=JoinSpec "}"
		public Group getGroup() { return cGroup; }
		
		//"join"
		public Keyword getJoinKeyword_0() { return cJoinKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//left=ID
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//ID
		public RuleCall getLeftIDTerminalRuleCall_2_0() { return cLeftIDTerminalRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//right=ID
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//ID
		public RuleCall getRightIDTerminalRuleCall_4_0() { return cRightIDTerminalRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//spec=JoinSpec
		public Assignment getSpecAssignment_7() { return cSpecAssignment_7; }
		
		//JoinSpec
		public RuleCall getSpecJoinSpecParserRuleCall_7_0() { return cSpecJoinSpecParserRuleCall_7_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class JoinSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.JoinSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJoinTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionsJoinConditionsParserRuleCall_2_0 = (RuleCall)cConditionsAssignment_2.eContents().get(0);
		private final Assignment cOptionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptionsJoinOptionsParserRuleCall_3_0 = (RuleCall)cOptionsAssignment_3.eContents().get(0);
		
		//JoinSpec:
		//    type=JoinType "on" conditions=JoinConditions options=JoinOptions?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=JoinType "on" conditions=JoinConditions options=JoinOptions?
		public Group getGroup() { return cGroup; }
		
		//type=JoinType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//JoinType
		public RuleCall getTypeJoinTypeParserRuleCall_0_0() { return cTypeJoinTypeParserRuleCall_0_0; }
		
		//"on"
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//conditions=JoinConditions
		public Assignment getConditionsAssignment_2() { return cConditionsAssignment_2; }
		
		//JoinConditions
		public RuleCall getConditionsJoinConditionsParserRuleCall_2_0() { return cConditionsJoinConditionsParserRuleCall_2_0; }
		
		//options=JoinOptions?
		public Assignment getOptionsAssignment_3() { return cOptionsAssignment_3; }
		
		//JoinOptions
		public RuleCall getOptionsJoinOptionsParserRuleCall_3_0() { return cOptionsJoinOptionsParserRuleCall_3_0; }
	}
	public class JoinTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.JoinType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cInnerKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLeftKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRightKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFullKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCrossKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//JoinType:
		//    "inner" | "left" | "right" | "full" | "cross";
		@Override public ParserRule getRule() { return rule; }
		
		//"inner" | "left" | "right" | "full" | "cross"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"inner"
		public Keyword getInnerKeyword_0() { return cInnerKeyword_0; }
		
		//"left"
		public Keyword getLeftKeyword_1() { return cLeftKeyword_1; }
		
		//"right"
		public Keyword getRightKeyword_2() { return cRightKeyword_2; }
		
		//"full"
		public Keyword getFullKeyword_3() { return cFullKeyword_3; }
		
		//"cross"
		public Keyword getCrossKeyword_4() { return cCrossKeyword_4; }
	}
	public class JoinConditionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.JoinConditions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionsJoinConditionParserRuleCall_0_0 = (RuleCall)cConditionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionsJoinConditionParserRuleCall_1_1_0 = (RuleCall)cConditionsAssignment_1_1.eContents().get(0);
		
		//JoinConditions:
		//    conditions+=JoinCondition ("and" conditions+=JoinCondition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//conditions+=JoinCondition ("and" conditions+=JoinCondition)*
		public Group getGroup() { return cGroup; }
		
		//conditions+=JoinCondition
		public Assignment getConditionsAssignment_0() { return cConditionsAssignment_0; }
		
		//JoinCondition
		public RuleCall getConditionsJoinConditionParserRuleCall_0_0() { return cConditionsJoinConditionParserRuleCall_0_0; }
		
		//("and" conditions+=JoinCondition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"and"
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//conditions+=JoinCondition
		public Assignment getConditionsAssignment_1_1() { return cConditionsAssignment_1_1; }
		
		//JoinCondition
		public RuleCall getConditionsJoinConditionParserRuleCall_1_1_0() { return cConditionsJoinConditionParserRuleCall_1_1_0; }
	}
	public class JoinConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.JoinCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cLeftAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLeftColumnParserRuleCall_0_0_0 = (RuleCall)cLeftAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRightAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRightColumnParserRuleCall_0_2_0 = (RuleCall)cRightAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLeftAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLeftColumnParserRuleCall_1_0_0 = (RuleCall)cLeftAssignment_1_0.eContents().get(0);
		private final Assignment cComparatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cComparatorComparatorParserRuleCall_1_1_0 = (RuleCall)cComparatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightColumnParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//JoinCondition:
		//    left=Column "=" right=Column
		//    | left=Column comparator=Comparator right=Column;
		@Override public ParserRule getRule() { return rule; }
		
		//left=Column "=" right=Column
		//| left=Column comparator=Comparator right=Column
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//left=Column "=" right=Column
		public Group getGroup_0() { return cGroup_0; }
		
		//left=Column
		public Assignment getLeftAssignment_0_0() { return cLeftAssignment_0_0; }
		
		//Column
		public RuleCall getLeftColumnParserRuleCall_0_0_0() { return cLeftColumnParserRuleCall_0_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//right=Column
		public Assignment getRightAssignment_0_2() { return cRightAssignment_0_2; }
		
		//Column
		public RuleCall getRightColumnParserRuleCall_0_2_0() { return cRightColumnParserRuleCall_0_2_0; }
		
		//left=Column comparator=Comparator right=Column
		public Group getGroup_1() { return cGroup_1; }
		
		//left=Column
		public Assignment getLeftAssignment_1_0() { return cLeftAssignment_1_0; }
		
		//Column
		public RuleCall getLeftColumnParserRuleCall_1_0_0() { return cLeftColumnParserRuleCall_1_0_0; }
		
		//comparator=Comparator
		public Assignment getComparatorAssignment_1_1() { return cComparatorAssignment_1_1; }
		
		//Comparator
		public RuleCall getComparatorComparatorParserRuleCall_1_1_0() { return cComparatorComparatorParserRuleCall_1_1_0; }
		
		//right=Column
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Column
		public RuleCall getRightColumnParserRuleCall_1_2_0() { return cRightColumnParserRuleCall_1_2_0; }
	}
	public class ComparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Comparator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//Comparator:
		//    "=" | "==" | "!=" | "<" | ">" | "<=" | ">=";
		@Override public ParserRule getRule() { return rule; }
		
		//"=" | "==" | "!=" | "<" | ">" | "<=" | ">="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }
		
		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_2() { return cExclamationMarkEqualsSignKeyword_2; }
		
		//"<"
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_5() { return cLessThanSignEqualsSignKeyword_5; }
		
		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_6() { return cGreaterThanSignEqualsSignKeyword_6; }
	}
	public class JoinOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.JoinOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuffixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftSuffixAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLeftSuffixSTRINGTerminalRuleCall_3_0 = (RuleCall)cLeftSuffixAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightSuffixAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightSuffixSTRINGTerminalRuleCall_5_0 = (RuleCall)cRightSuffixAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//JoinOptions:
		//    "suffix" "=" "(" leftSuffix=STRING "," rightSuffix=STRING ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"suffix" "=" "(" leftSuffix=STRING "," rightSuffix=STRING ")"
		public Group getGroup() { return cGroup; }
		
		//"suffix"
		public Keyword getSuffixKeyword_0() { return cSuffixKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//leftSuffix=STRING
		public Assignment getLeftSuffixAssignment_3() { return cLeftSuffixAssignment_3; }
		
		//STRING
		public RuleCall getLeftSuffixSTRINGTerminalRuleCall_3_0() { return cLeftSuffixSTRINGTerminalRuleCall_3_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//rightSuffix=STRING
		public Assignment getRightSuffixAssignment_5() { return cRightSuffixAssignment_5; }
		
		//STRING
		public RuleCall getRightSuffixSTRINGTerminalRuleCall_5_0() { return cRightSuffixSTRINGTerminalRuleCall_5_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Column");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTableAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTableIDTerminalRuleCall_1_0_0 = (RuleCall)cTableAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cColumnAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cColumnIDTerminalRuleCall_1_2_0 = (RuleCall)cColumnAssignment_1_2.eContents().get(0);
		
		//Column:
		//    name=ID | table=ID "." column=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID | table=ID "." column=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//table=ID "." column=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//table=ID
		public Assignment getTableAssignment_1_0() { return cTableAssignment_1_0; }
		
		//ID
		public RuleCall getTableIDTerminalRuleCall_1_0_0() { return cTableIDTerminalRuleCall_1_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//column=ID
		public Assignment getColumnAssignment_1_2() { return cColumnAssignment_1_2; }
		
		//ID
		public RuleCall getColumnIDTerminalRuleCall_1_2_0() { return cColumnIDTerminalRuleCall_1_2_0; }
	}
	public class ColumnListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.ColumnList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cColumnsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cColumnsColumnParserRuleCall_0_0_0 = (RuleCall)cColumnsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cColumnsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_0_1_1_0 = (RuleCall)cColumnsAssignment_0_1_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ColumnList:
		//    columns+=Column ("," columns+=Column)*
		//    | "*";
		@Override public ParserRule getRule() { return rule; }
		
		//columns+=Column ("," columns+=Column)*
		//| "*"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//columns+=Column ("," columns+=Column)*
		public Group getGroup_0() { return cGroup_0; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_0_0() { return cColumnsAssignment_0_0; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_0_0_0() { return cColumnsColumnParserRuleCall_0_0_0; }
		
		//("," columns+=Column)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_0_1_1() { return cColumnsAssignment_0_1_1; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_0_1_1_0() { return cColumnsColumnParserRuleCall_0_1_1_0; }
		
		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Number:
		//    INT ('.' INT)? | '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)? | '.' INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT ('.' INT)?
		public Group getGroup_0() { return cGroup_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }
		
		//('.' INT)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1_0() { return cFullStopKeyword_0_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_1_1() { return cINTTerminalRuleCall_0_1_1; }
		
		//'.' INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Integer");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Integer returns ecore::EInt:
		//    INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Float");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Float returns ecore::EFloat:
		//    INT '.' INT | '.' INT | INT '.';
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT | '.' INT | INT '.'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT '.' INT
		public Group getGroup_0() { return cGroup_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_2() { return cINTTerminalRuleCall_0_2; }
		
		//'.' INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//INT '.'
		public Group getGroup_2() { return cGroup_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }
	}
	public class RegexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.Regex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternSTRINGTerminalRuleCall_1_0 = (RuleCall)cPatternAssignment_1.eContents().get(0);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFlagsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFlagsSTRINGTerminalRuleCall_3_0 = (RuleCall)cFlagsAssignment_3.eContents().get(0);
		
		//Regex:
		//    '/' pattern=STRING '/' flags=STRING?;
		@Override public ParserRule getRule() { return rule; }
		
		//'/' pattern=STRING '/' flags=STRING?
		public Group getGroup() { return cGroup; }
		
		//'/'
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }
		
		//pattern=STRING
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }
		
		//STRING
		public RuleCall getPatternSTRINGTerminalRuleCall_1_0() { return cPatternSTRINGTerminalRuleCall_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
		
		//flags=STRING?
		public Assignment getFlagsAssignment_3() { return cFlagsAssignment_3; }
		
		//STRING
		public RuleCall getFlagsSTRINGTerminalRuleCall_3_0() { return cFlagsSTRINGTerminalRuleCall_3_0; }
	}
	
	
	private final WorkflowElements pWorkflow;
	private final DataSourceElements pDataSource;
	private final DataReaderElements pDataReader;
	private final CSVReaderElements pCSVReader;
	private final FileReaderElements pFileReader;
	private final FilePathElements pFilePath;
	private final DelimiterElements pDelimiter;
	private final WorkflowBodyElements pWorkflowBody;
	private final StepElements pStep;
	private final ContractBlockElements pContractBlock;
	private final ContractElements pContract;
	private final PreconditionElements pPrecondition;
	private final PostconditionElements pPostcondition;
	private final InvariantElements pInvariant;
	private final ContractNameElements pContractName;
	private final ContractBodyElements pContractBody;
	private final ContractTypeElements pContractType;
	private final ValueRangeContractElements pValueRangeContract;
	private final ContractFieldElements pContractField;
	private final ContractValueElements pContractValue;
	private final TypeElements pType;
	private final ConditionContractElements pConditionContract;
	private final IfClauseElements pIfClause;
	private final ThenClauseElements pThenClause;
	private final BelongOpElements pBelongOp;
	private final DataConditionElements pDataCondition;
	private final SpecialValueCheckElements pSpecialValueCheck;
	private final CastTypeCheckElements pCastTypeCheck;
	private final ValueCheckElements pValueCheck;
	private final DataResultElements pDataResult;
	private final SpecialValueContractElements pSpecialValueContract;
	private final CastTypeContractElements pCastTypeContract;
	private final TransformationElements pTransformation;
	private final RowFilterElements pRowFilter;
	private final FilterConditionElements pFilterCondition;
	private final MissingFilterElements pMissingFilter;
	private final RangeFilterElements pRangeFilter;
	private final RangeBoundsElements pRangeBounds;
	private final BoundValueElements pBoundValue;
	private final StringFilterElements pStringFilter;
	private final PatternElements pPattern;
	private final IncludeExcludeElements pIncludeExclude;
	private final ColumnFilterElements pColumnFilter;
	private final MappingElements pMapping;
	private final ValueMappingElements pValueMapping;
	private final MappingRulesElements pMappingRules;
	private final MappingRuleElements pMappingRule;
	private final SubstringMappingElements pSubstringMapping;
	private final MappingModeElements pMappingMode;
	private final MathOpElements pMathOp;
	private final MathExpressionElements pMathExpression;
	private final PrimaryElements pPrimary;
	private final FunctionCallElements pFunctionCall;
	private final FunctionElements pFunction;
	private final OperandElements pOperand;
	private final OperatorElements pOperator;
	private final BinnerElements pBinner;
	private final BinDefinitionsElements pBinDefinitions;
	private final BinDefElements pBinDef;
	private final BinNameElements pBinName;
	private final IntervalElements pInterval;
	private final IntervalBoundElements pIntervalBound;
	private final BinModeElements pBinMode;
	private final TypeConversionElements pTypeConversion;
	private final DecimalSeparatorElements pDecimalSeparator;
	private final DateFormatElements pDateFormat;
	private final ImputationElements pImputation;
	private final ImputeMethodElements pImputeMethod;
	private final FixedImputeElements pFixedImpute;
	private final ValueListElements pValueList;
	private final ValueElements pValue;
	private final StatisticalImputeElements pStatisticalImpute;
	private final SequentialImputeElements pSequentialImpute;
	private final AdvancedImputeElements pAdvancedImpute;
	private final InterpolationTypeElements pInterpolationType;
	private final OutlierTreatmentElements pOutlierTreatment;
	private final OutlierStrategyElements pOutlierStrategy;
	private final ReplacementStrategyElements pReplacementStrategy;
	private final DetectionMethodElements pDetectionMethod;
	private final IQRMethodElements pIQRMethod;
	private final IQRParamsElements pIQRParams;
	private final EstimationTypeElements pEstimationType;
	private final ZScoreMethodElements pZScoreMethod;
	private final PercentileMethodElements pPercentileMethod;
	private final OutlierOptionsElements pOutlierOptions;
	private final OutlierScopeElements pOutlierScope;
	private final JoinElements pJoin;
	private final JoinSpecElements pJoinSpec;
	private final JoinTypeElements pJoinType;
	private final JoinConditionsElements pJoinConditions;
	private final JoinConditionElements pJoinCondition;
	private final ComparatorElements pComparator;
	private final JoinOptionsElements pJoinOptions;
	private final ColumnElements pColumn;
	private final ColumnListElements pColumnList;
	private final NumberElements pNumber;
	private final IntegerElements pInteger;
	private final FloatElements pFloat;
	private final RegexElements pRegex;
	private final TerminalRule tCOMMENT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WorkflowDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWorkflow = new WorkflowElements();
		this.pDataSource = new DataSourceElements();
		this.pDataReader = new DataReaderElements();
		this.pCSVReader = new CSVReaderElements();
		this.pFileReader = new FileReaderElements();
		this.pFilePath = new FilePathElements();
		this.pDelimiter = new DelimiterElements();
		this.pWorkflowBody = new WorkflowBodyElements();
		this.pStep = new StepElements();
		this.pContractBlock = new ContractBlockElements();
		this.pContract = new ContractElements();
		this.pPrecondition = new PreconditionElements();
		this.pPostcondition = new PostconditionElements();
		this.pInvariant = new InvariantElements();
		this.pContractName = new ContractNameElements();
		this.pContractBody = new ContractBodyElements();
		this.pContractType = new ContractTypeElements();
		this.pValueRangeContract = new ValueRangeContractElements();
		this.pContractField = new ContractFieldElements();
		this.pContractValue = new ContractValueElements();
		this.pType = new TypeElements();
		this.pConditionContract = new ConditionContractElements();
		this.pIfClause = new IfClauseElements();
		this.pThenClause = new ThenClauseElements();
		this.pBelongOp = new BelongOpElements();
		this.pDataCondition = new DataConditionElements();
		this.pSpecialValueCheck = new SpecialValueCheckElements();
		this.pCastTypeCheck = new CastTypeCheckElements();
		this.pValueCheck = new ValueCheckElements();
		this.pDataResult = new DataResultElements();
		this.pSpecialValueContract = new SpecialValueContractElements();
		this.pCastTypeContract = new CastTypeContractElements();
		this.pTransformation = new TransformationElements();
		this.pRowFilter = new RowFilterElements();
		this.pFilterCondition = new FilterConditionElements();
		this.pMissingFilter = new MissingFilterElements();
		this.pRangeFilter = new RangeFilterElements();
		this.pRangeBounds = new RangeBoundsElements();
		this.pBoundValue = new BoundValueElements();
		this.pStringFilter = new StringFilterElements();
		this.pPattern = new PatternElements();
		this.pIncludeExclude = new IncludeExcludeElements();
		this.pColumnFilter = new ColumnFilterElements();
		this.pMapping = new MappingElements();
		this.pValueMapping = new ValueMappingElements();
		this.pMappingRules = new MappingRulesElements();
		this.pMappingRule = new MappingRuleElements();
		this.pSubstringMapping = new SubstringMappingElements();
		this.pMappingMode = new MappingModeElements();
		this.pMathOp = new MathOpElements();
		this.pMathExpression = new MathExpressionElements();
		this.pPrimary = new PrimaryElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pFunction = new FunctionElements();
		this.pOperand = new OperandElements();
		this.pOperator = new OperatorElements();
		this.pBinner = new BinnerElements();
		this.pBinDefinitions = new BinDefinitionsElements();
		this.pBinDef = new BinDefElements();
		this.pBinName = new BinNameElements();
		this.pInterval = new IntervalElements();
		this.pIntervalBound = new IntervalBoundElements();
		this.pBinMode = new BinModeElements();
		this.pTypeConversion = new TypeConversionElements();
		this.pDecimalSeparator = new DecimalSeparatorElements();
		this.pDateFormat = new DateFormatElements();
		this.pImputation = new ImputationElements();
		this.pImputeMethod = new ImputeMethodElements();
		this.pFixedImpute = new FixedImputeElements();
		this.pValueList = new ValueListElements();
		this.pValue = new ValueElements();
		this.pStatisticalImpute = new StatisticalImputeElements();
		this.pSequentialImpute = new SequentialImputeElements();
		this.pAdvancedImpute = new AdvancedImputeElements();
		this.pInterpolationType = new InterpolationTypeElements();
		this.pOutlierTreatment = new OutlierTreatmentElements();
		this.pOutlierStrategy = new OutlierStrategyElements();
		this.pReplacementStrategy = new ReplacementStrategyElements();
		this.pDetectionMethod = new DetectionMethodElements();
		this.pIQRMethod = new IQRMethodElements();
		this.pIQRParams = new IQRParamsElements();
		this.pEstimationType = new EstimationTypeElements();
		this.pZScoreMethod = new ZScoreMethodElements();
		this.pPercentileMethod = new PercentileMethodElements();
		this.pOutlierOptions = new OutlierOptionsElements();
		this.pOutlierScope = new OutlierScopeElements();
		this.pJoin = new JoinElements();
		this.pJoinSpec = new JoinSpecElements();
		this.pJoinType = new JoinTypeElements();
		this.pJoinConditions = new JoinConditionsElements();
		this.pJoinCondition = new JoinConditionElements();
		this.pComparator = new ComparatorElements();
		this.pJoinOptions = new JoinOptionsElements();
		this.pColumn = new ColumnElements();
		this.pColumnList = new ColumnListElements();
		this.pNumber = new NumberElements();
		this.pInteger = new IntegerElements();
		this.pFloat = new FloatElements();
		this.pRegex = new RegexElements();
		this.tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.json.WorkflowDSL.COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.json.WorkflowDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Workflow:
	//    "workflow" name=STRING "{" source=DataSource body=WorkflowBody "}";
	public WorkflowElements getWorkflowAccess() {
		return pWorkflow;
	}
	
	public ParserRule getWorkflowRule() {
		return getWorkflowAccess().getRule();
	}
	
	//DataSource:
	//    "source" name=ID "=" reader=DataReader;
	public DataSourceElements getDataSourceAccess() {
		return pDataSource;
	}
	
	public ParserRule getDataSourceRule() {
		return getDataSourceAccess().getRule();
	}
	
	//DataReader:
	//    CSVReader | FileReader;
	public DataReaderElements getDataReaderAccess() {
		return pDataReader;
	}
	
	public ParserRule getDataReaderRule() {
		return getDataReaderAccess().getRule();
	}
	
	//CSVReader:
	//    "read_csv" "(" filePath=FilePath ("," delimiter=Delimiter)? ")";
	public CSVReaderElements getCSVReaderAccess() {
		return pCSVReader;
	}
	
	public ParserRule getCSVReaderRule() {
		return getCSVReaderAccess().getRule();
	}
	
	//FileReader:
	//    "read_file" "(" filePath=FilePath ")";
	public FileReaderElements getFileReaderAccess() {
		return pFileReader;
	}
	
	public ParserRule getFileReaderRule() {
		return getFileReaderAccess().getRule();
	}
	
	//FilePath:
	//    path=STRING;
	public FilePathElements getFilePathAccess() {
		return pFilePath;
	}
	
	public ParserRule getFilePathRule() {
		return getFilePathAccess().getRule();
	}
	
	//Delimiter:
	//    "," | ";" | "\t" | "|" | value=STRING;
	public DelimiterElements getDelimiterAccess() {
		return pDelimiter;
	}
	
	public ParserRule getDelimiterRule() {
		return getDelimiterAccess().getRule();
	}
	
	//WorkflowBody:
	//    steps+=Step*;
	public WorkflowBodyElements getWorkflowBodyAccess() {
		return pWorkflowBody;
	}
	
	public ParserRule getWorkflowBodyRule() {
		return getWorkflowBodyAccess().getRule();
	}
	
	//Step:
	//    name=ID "=" transformation=Transformation ("|>" target=ID)? contracts=ContractBlock?;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//ContractBlock:
	//    "contracts" "{" contracts+=Contract* "}";
	public ContractBlockElements getContractBlockAccess() {
		return pContractBlock;
	}
	
	public ParserRule getContractBlockRule() {
		return getContractBlockAccess().getRule();
	}
	
	//Contract:
	//    Precondition | Postcondition | Invariant;
	public ContractElements getContractAccess() {
		return pContract;
	}
	
	public ParserRule getContractRule() {
		return getContractAccess().getRule();
	}
	
	//Precondition:
	//    "precondition" name=ContractName "{" body=ContractBody "}";
	public PreconditionElements getPreconditionAccess() {
		return pPrecondition;
	}
	
	public ParserRule getPreconditionRule() {
		return getPreconditionAccess().getRule();
	}
	
	//Postcondition:
	//    "postcondition" name=ContractName "{" body=ContractBody "}";
	public PostconditionElements getPostconditionAccess() {
		return pPostcondition;
	}
	
	public ParserRule getPostconditionRule() {
		return getPostconditionAccess().getRule();
	}
	
	//Invariant:
	//    "invariant" name=ContractName "{" body=ContractBody "}";
	public InvariantElements getInvariantAccess() {
		return pInvariant;
	}
	
	public ParserRule getInvariantRule() {
		return getInvariantAccess().getRule();
	}
	
	//ContractName:
	//    name=STRING | name=ID;
	public ContractNameElements getContractNameAccess() {
		return pContractName;
	}
	
	public ParserRule getContractNameRule() {
		return getContractNameAccess().getRule();
	}
	
	//ContractBody:
	//    type=ContractType;
	public ContractBodyElements getContractBodyAccess() {
		return pContractBody;
	}
	
	public ParserRule getContractBodyRule() {
		return getContractBodyAccess().getRule();
	}
	
	//ContractType:
	//    ValueRangeContract
	//    | ConditionContract
	//    | SpecialValueContract
	//    | CastTypeContract;
	public ContractTypeElements getContractTypeAccess() {
		return pContractType;
	}
	
	public ParserRule getContractTypeRule() {
		return getContractTypeAccess().getRule();
	}
	
	//ValueRangeContract:
	//    "value_range" "(" field=ContractField "," value=ContractValue ")";
	public ValueRangeContractElements getValueRangeContractAccess() {
		return pValueRangeContract;
	}
	
	public ParserRule getValueRangeContractRule() {
		return getValueRangeContractAccess().getRule();
	}
	
	//ContractField:
	//    "input" "." column=Column
	//    | "output" "." column=Column;
	public ContractFieldElements getContractFieldAccess() {
		return pContractField;
	}
	
	public ParserRule getContractFieldRule() {
		return getContractFieldAccess().getRule();
	}
	
	//ContractValue:
	//    "castable_to" type=Type
	//    | "in_range" bounds=RangeBounds
	//    | "matches" value=Value;
	public ContractValueElements getContractValueAccess() {
		return pContractValue;
	}
	
	public ParserRule getContractValueRule() {
		return getContractValueAccess().getRule();
	}
	
	//Type:
	//    "Integer" | "Double" | "String" | "Boolean";
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//ConditionContract:
	//    "condition" "{" ifClause=IfClause thenClause=ThenClause "}";
	public ConditionContractElements getConditionContractAccess() {
		return pConditionContract;
	}
	
	public ParserRule getConditionContractRule() {
		return getConditionContractAccess().getRule();
	}
	
	//IfClause:
	//    "if" field=ContractField op=BelongOp condition=DataCondition;
	public IfClauseElements getIfClauseAccess() {
		return pIfClause;
	}
	
	public ParserRule getIfClauseRule() {
		return getIfClauseAccess().getRule();
	}
	
	//ThenClause:
	//    "then" field=ContractField op=BelongOp result=DataResult;
	public ThenClauseElements getThenClauseAccess() {
		return pThenClause;
	}
	
	public ParserRule getThenClauseRule() {
		return getThenClauseAccess().getRule();
	}
	
	//BelongOp:
	//    "belongs_to" | "not_belongs_to";
	public BelongOpElements getBelongOpAccess() {
		return pBelongOp;
	}
	
	public ParserRule getBelongOpRule() {
		return getBelongOpAccess().getRule();
	}
	
	//DataCondition:
	//    SpecialValueCheck | CastTypeCheck | ValueCheck;
	public DataConditionElements getDataConditionAccess() {
		return pDataCondition;
	}
	
	public ParserRule getDataConditionRule() {
		return getDataConditionAccess().getRule();
	}
	
	//SpecialValueCheck:
	//    "special_values";
	public SpecialValueCheckElements getSpecialValueCheckAccess() {
		return pSpecialValueCheck;
	}
	
	public ParserRule getSpecialValueCheckRule() {
		return getSpecialValueCheckAccess().getRule();
	}
	
	//CastTypeCheck:
	//    "type" type=Type;
	public CastTypeCheckElements getCastTypeCheckAccess() {
		return pCastTypeCheck;
	}
	
	public ParserRule getCastTypeCheckRule() {
		return getCastTypeCheckAccess().getRule();
	}
	
	//ValueCheck:
	//    "value" value=Value;
	public ValueCheckElements getValueCheckAccess() {
		return pValueCheck;
	}
	
	public ParserRule getValueCheckRule() {
		return getValueCheckAccess().getRule();
	}
	
	//DataResult:
	//    SpecialValueCheck | CastTypeCheck | ValueCheck;
	public DataResultElements getDataResultAccess() {
		return pDataResult;
	}
	
	public ParserRule getDataResultRule() {
		return getDataResultAccess().getRule();
	}
	
	//SpecialValueContract:
	//    "no_special_values" "(" field=ContractField ")"
	//    | "has_special_values" "(" field=ContractField ")";
	public SpecialValueContractElements getSpecialValueContractAccess() {
		return pSpecialValueContract;
	}
	
	public ParserRule getSpecialValueContractRule() {
		return getSpecialValueContractAccess().getRule();
	}
	
	//CastTypeContract:
	//    "castable_to" type=Type "(" field=ContractField ")"
	//    | "is_type" type=Type "(" field=ContractField ")";
	public CastTypeContractElements getCastTypeContractAccess() {
		return pCastTypeContract;
	}
	
	public ParserRule getCastTypeContractRule() {
		return getCastTypeContractAccess().getRule();
	}
	
	//Transformation:
	//    RowFilter
	//    | ColumnFilter
	//    | Mapping
	//    | MathOp
	//    | Binner
	//    | TypeConversion
	//    | Imputation
	//    | OutlierTreatment
	//    | Join;
	public TransformationElements getTransformationAccess() {
		return pTransformation;
	}
	
	public ParserRule getTransformationRule() {
		return getTransformationAccess().getRule();
	}
	
	//RowFilter:
	//    "filter_rows" "{" condition=FilterCondition "}";
	public RowFilterElements getRowFilterAccess() {
		return pRowFilter;
	}
	
	public ParserRule getRowFilterRule() {
		return getRowFilterAccess().getRule();
	}
	
	//FilterCondition:
	//    MissingFilter | RangeFilter | StringFilter;
	public FilterConditionElements getFilterConditionAccess() {
		return pFilterCondition;
	}
	
	public ParserRule getFilterConditionRule() {
		return getFilterConditionAccess().getRule();
	}
	
	//MissingFilter:
	//    "missing" "(" columns=ColumnList "," includeExclude=IncludeExclude ")";
	public MissingFilterElements getMissingFilterAccess() {
		return pMissingFilter;
	}
	
	public ParserRule getMissingFilterRule() {
		return getMissingFilterAccess().getRule();
	}
	
	//RangeFilter:
	//    "range" "(" column=Column "," bounds=RangeBounds "," includeExclude=IncludeExclude ")";
	public RangeFilterElements getRangeFilterAccess() {
		return pRangeFilter;
	}
	
	public ParserRule getRangeFilterRule() {
		return getRangeFilterAccess().getRule();
	}
	
	//RangeBounds:
	//    "[" lower=BoundValue "," upper=BoundValue "]"
	//    | "[" lower=BoundValue "," upper=BoundValue ")"
	//    | "(" lower=BoundValue "," upper=BoundValue "]"
	//    | "(" lower=BoundValue "," upper=BoundValue ")";
	public RangeBoundsElements getRangeBoundsAccess() {
		return pRangeBounds;
	}
	
	public ParserRule getRangeBoundsRule() {
		return getRangeBoundsAccess().getRule();
	}
	
	//BoundValue:
	//    value=Number | "*" | "inf" | "-inf";
	public BoundValueElements getBoundValueAccess() {
		return pBoundValue;
	}
	
	public ParserRule getBoundValueRule() {
		return getBoundValueAccess().getRule();
	}
	
	//StringFilter:
	//    "matches" "(" column=Column "," pattern=Pattern "," includeExclude=IncludeExclude ")"
	//    | "like" "(" column=Column "," pattern=Pattern "," includeExclude=IncludeExclude ")";
	public StringFilterElements getStringFilterAccess() {
		return pStringFilter;
	}
	
	public ParserRule getStringFilterRule() {
		return getStringFilterAccess().getRule();
	}
	
	//Pattern:
	//    value=STRING | regex=Regex;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//IncludeExclude:
	//    "include" | "exclude";
	public IncludeExcludeElements getIncludeExcludeAccess() {
		return pIncludeExclude;
	}
	
	public ParserRule getIncludeExcludeRule() {
		return getIncludeExcludeAccess().getRule();
	}
	
	//ColumnFilter:
	//    "select_columns" "{" columns=ColumnList "}"
	//    | "drop_columns" "{" columns=ColumnList "}"
	//    | "keep" "{" columns=ColumnList "}"
	//    | "remove" "{" columns=ColumnList "}";
	public ColumnFilterElements getColumnFilterAccess() {
		return pColumnFilter;
	}
	
	public ParserRule getColumnFilterRule() {
		return getColumnFilterAccess().getRule();
	}
	
	//Mapping:
	//    ValueMapping | SubstringMapping;
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//ValueMapping:
	//    "map" "(" column=Column ")" "{" rules=MappingRules "}" mode=MappingMode;
	public ValueMappingElements getValueMappingAccess() {
		return pValueMapping;
	}
	
	public ParserRule getValueMappingRule() {
		return getValueMappingAccess().getRule();
	}
	
	//MappingRules:
	//    (rules+=MappingRule ("," rules+=MappingRule)*)?;
	public MappingRulesElements getMappingRulesAccess() {
		return pMappingRules;
	}
	
	public ParserRule getMappingRulesRule() {
		return getMappingRulesAccess().getRule();
	}
	
	//MappingRule:
	//    from=STRING "->" to=STRING
	//    | pattern=Pattern "=>" to=STRING;
	public MappingRuleElements getMappingRuleAccess() {
		return pMappingRule;
	}
	
	public ParserRule getMappingRuleRule() {
		return getMappingRuleAccess().getRule();
	}
	
	//SubstringMapping:
	//    "replace" "(" column=Column "," from=STRING "," to=STRING ")" mode=MappingMode;
	public SubstringMappingElements getSubstringMappingAccess() {
		return pSubstringMapping;
	}
	
	public ParserRule getSubstringMappingRule() {
		return getSubstringMappingAccess().getRule();
	}
	
	//MappingMode:
	//    "replace" | "as" newName=ID;
	public MappingModeElements getMappingModeAccess() {
		return pMappingMode;
	}
	
	public ParserRule getMappingModeRule() {
		return getMappingModeAccess().getRule();
	}
	
	//MathOp:
	//    "math" "(" expression=MathExpression ")" "as" newName=ID;
	public MathOpElements getMathOpAccess() {
		return pMathOp;
	}
	
	public ParserRule getMathOpRule() {
		return getMathOpAccess().getRule();
	}
	
	//MathExpression:
	//    Primary (operator=Operator right=Primary)*;
	public MathExpressionElements getMathExpressionAccess() {
		return pMathExpression;
	}
	
	public ParserRule getMathExpressionRule() {
		return getMathExpressionAccess().getRule();
	}
	
	//Primary:
	//    operand=Operand | "(" expression=MathExpression ")" | call=FunctionCall;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//FunctionCall:
	//    function=Function "(" (operands+=Operand ("," operands+=Operand)*)? ")";
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//Function:
	//    "abs" | "sqrt" | "pow" | "log" | "exp"
	//    | "sin" | "cos" | "tan" | "round" | "ceil" | "floor";
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Operand:
	//    column=Column | number=Number | string=STRING;
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//Operator:
	//    "+" | "-" | "*" | "/" | "%" | "^";
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Binner:
	//    "bin" "(" column=Column ")" "{" definitions=BinDefinitions "}" mode=BinMode;
	public BinnerElements getBinnerAccess() {
		return pBinner;
	}
	
	public ParserRule getBinnerRule() {
		return getBinnerAccess().getRule();
	}
	
	//BinDefinitions:
	//    (definitions+=BinDef ("," definitions+=BinDef)*)?;
	public BinDefinitionsElements getBinDefinitionsAccess() {
		return pBinDefinitions;
	}
	
	public ParserRule getBinDefinitionsRule() {
		return getBinDefinitionsAccess().getRule();
	}
	
	//BinDef:
	//    name=BinName ":" interval=Interval;
	public BinDefElements getBinDefAccess() {
		return pBinDef;
	}
	
	public ParserRule getBinDefRule() {
		return getBinDefAccess().getRule();
	}
	
	//BinName:
	//    name=STRING;
	public BinNameElements getBinNameAccess() {
		return pBinName;
	}
	
	public ParserRule getBinNameRule() {
		return getBinNameAccess().getRule();
	}
	
	//Interval:
	//    "[" lower=IntervalBound "," upper=IntervalBound "]"
	//    | "[" lower=IntervalBound "," upper=IntervalBound ")"
	//    | "(" lower=IntervalBound "," upper=IntervalBound "]"
	//    | "(" lower=IntervalBound "," upper=IntervalBound ")";
	public IntervalElements getIntervalAccess() {
		return pInterval;
	}
	
	public ParserRule getIntervalRule() {
		return getIntervalAccess().getRule();
	}
	
	//IntervalBound:
	//    value=Number | "-inf" | "inf" | "-Infinity" | "Infinity";
	public IntervalBoundElements getIntervalBoundAccess() {
		return pIntervalBound;
	}
	
	public ParserRule getIntervalBoundRule() {
		return getIntervalBoundAccess().getRule();
	}
	
	//BinMode:
	//    "replace" | "as" newName=ID;
	public BinModeElements getBinModeAccess() {
		return pBinMode;
	}
	
	public ParserRule getBinModeRule() {
		return getBinModeAccess().getRule();
	}
	
	//TypeConversion:
	//    "to_numeric" "(" columns=ColumnList ")" separator=DecimalSeparator?
	//    | "to_string" "(" columns=ColumnList ")"
	//    | "to_categorical" "(" columns=ColumnList ")"
	//    | "to_boolean" "(" columns=ColumnList ")"
	//    | "to_date" "(" columns=ColumnList "," format=DateFormat? ")";
	public TypeConversionElements getTypeConversionAccess() {
		return pTypeConversion;
	}
	
	public ParserRule getTypeConversionRule() {
		return getTypeConversionAccess().getRule();
	}
	
	//DecimalSeparator:
	//    "separator" "=" ("." | ",");
	public DecimalSeparatorElements getDecimalSeparatorAccess() {
		return pDecimalSeparator;
	}
	
	public ParserRule getDecimalSeparatorRule() {
		return getDecimalSeparatorAccess().getRule();
	}
	
	//DateFormat:
	//    "format" "=" format=STRING;
	public DateFormatElements getDateFormatAccess() {
		return pDateFormat;
	}
	
	public ParserRule getDateFormatRule() {
		return getDateFormatAccess().getRule();
	}
	
	//Imputation:
	//    "impute" "(" columns=ColumnList ")" "{" method=ImputeMethod "}";
	public ImputationElements getImputationAccess() {
		return pImputation;
	}
	
	public ParserRule getImputationRule() {
		return getImputationAccess().getRule();
	}
	
	//ImputeMethod:
	//    FixedImpute
	//    | StatisticalImpute
	//    | SequentialImpute
	//    | AdvancedImpute;
	public ImputeMethodElements getImputeMethodAccess() {
		return pImputeMethod;
	}
	
	public ParserRule getImputeMethodRule() {
		return getImputeMethodAccess().getRule();
	}
	
	//FixedImpute:
	//    "fixed" "=" values=ValueList;
	public FixedImputeElements getFixedImputeAccess() {
		return pFixedImpute;
	}
	
	public ParserRule getFixedImputeRule() {
		return getFixedImputeAccess().getRule();
	}
	
	//ValueList:
	//    value=Value | "[" (values+=Value ("," values+=Value)*)? "]";
	public ValueListElements getValueListAccess() {
		return pValueList;
	}
	
	public ParserRule getValueListRule() {
		return getValueListAccess().getRule();
	}
	
	//Value:
	//    number=Number | string=STRING | "null";
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//StatisticalImpute:
	//    "mean"
	//    | "median"
	//    | "mode"
	//    | "most_frequent"
	//    | "max"
	//    | "min";
	public StatisticalImputeElements getStatisticalImputeAccess() {
		return pStatisticalImpute;
	}
	
	public ParserRule getStatisticalImputeRule() {
		return getStatisticalImputeAccess().getRule();
	}
	
	//SequentialImpute:
	//    "forward_fill"
	//    | "backward_fill"
	//    | "previous_value"
	//    | "next_value";
	public SequentialImputeElements getSequentialImputeAccess() {
		return pSequentialImpute;
	}
	
	public ParserRule getSequentialImputeRule() {
		return getSequentialImputeAccess().getRule();
	}
	
	//AdvancedImpute:
	//    "interpolation" type=InterpolationType?
	//    | "moving_average" ("window" "=" windowSize=Number)?
	//    | "linear"
	//    | "polynomial" ("degree" "=" degree=Number)?
	//    | "spline";
	public AdvancedImputeElements getAdvancedImputeAccess() {
		return pAdvancedImpute;
	}
	
	public ParserRule getAdvancedImputeRule() {
		return getAdvancedImputeAccess().getRule();
	}
	
	//InterpolationType:
	//    "linear" | "polynomial" | "spline";
	public InterpolationTypeElements getInterpolationTypeAccess() {
		return pInterpolationType;
	}
	
	public ParserRule getInterpolationTypeRule() {
		return getInterpolationTypeAccess().getRule();
	}
	
	//OutlierTreatment:
	//    "outliers" "(" columns=ColumnList ")" "{" strategy=OutlierStrategy "}";
	public OutlierTreatmentElements getOutlierTreatmentAccess() {
		return pOutlierTreatment;
	}
	
	public ParserRule getOutlierTreatmentRule() {
		return getOutlierTreatmentAccess().getRule();
	}
	
	//OutlierStrategy:
	//    replacement=ReplacementStrategy method=DetectionMethod options=OutlierOptions?;
	public OutlierStrategyElements getOutlierStrategyAccess() {
		return pOutlierStrategy;
	}
	
	public ParserRule getOutlierStrategyRule() {
		return getOutlierStrategyAccess().getRule();
	}
	
	//ReplacementStrategy:
	//    "replace_closest"
	//    | "replace_missing"
	//    | "replace_by_closest"
	//    | "replace_with" "=" value=Number
	//    | "remove"
	//    | "cap";
	public ReplacementStrategyElements getReplacementStrategyAccess() {
		return pReplacementStrategy;
	}
	
	public ParserRule getReplacementStrategyRule() {
		return getReplacementStrategyAccess().getRule();
	}
	
	//DetectionMethod:
	//    IQRMethod | ZScoreMethod | PercentileMethod;
	public DetectionMethodElements getDetectionMethodAccess() {
		return pDetectionMethod;
	}
	
	public ParserRule getDetectionMethodRule() {
		return getDetectionMethodAccess().getRule();
	}
	
	//IQRMethod:
	//    "iqr" params=IQRParams?;
	public IQRMethodElements getIQRMethodAccess() {
		return pIQRMethod;
	}
	
	public ParserRule getIQRMethodRule() {
		return getIQRMethodAccess().getRule();
	}
	
	//IQRParams:
	//    "scalar" "=" scalar=Number
	//    | "estimation" "=" estimation=EstimationType;
	public IQRParamsElements getIQRParamsAccess() {
		return pIQRParams;
	}
	
	public ParserRule getIQRParamsRule() {
		return getIQRParamsAccess().getRule();
	}
	
	//EstimationType:
	//    "R_4" | "R_7" | "R_8";
	public EstimationTypeElements getEstimationTypeAccess() {
		return pEstimationType;
	}
	
	public ParserRule getEstimationTypeRule() {
		return getEstimationTypeAccess().getRule();
	}
	
	//ZScoreMethod:
	//    "zscore" ("threshold" "=" threshold=Number)?;
	public ZScoreMethodElements getZScoreMethodAccess() {
		return pZScoreMethod;
	}
	
	public ParserRule getZScoreMethodRule() {
		return getZScoreMethodAccess().getRule();
	}
	
	//PercentileMethod:
	//    "percentile" "lower" "=" lower=Number "upper" "=" upper=Number;
	public PercentileMethodElements getPercentileMethodAccess() {
		return pPercentileMethod;
	}
	
	public ParserRule getPercentileMethodRule() {
		return getPercentileMethodAccess().getRule();
	}
	
	//OutlierOptions:
	//    "scope" "=" scope=OutlierScope;
	public OutlierOptionsElements getOutlierOptionsAccess() {
		return pOutlierOptions;
	}
	
	public ParserRule getOutlierOptionsRule() {
		return getOutlierOptionsAccess().getRule();
	}
	
	//OutlierScope:
	//    "all" | "all_outliers" | "lower_only" | "upper_only";
	public OutlierScopeElements getOutlierScopeAccess() {
		return pOutlierScope;
	}
	
	public ParserRule getOutlierScopeRule() {
		return getOutlierScopeAccess().getRule();
	}
	
	//Join:
	//    "join" "(" left=ID "," right=ID ")" "{" spec=JoinSpec "}";
	public JoinElements getJoinAccess() {
		return pJoin;
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}
	
	//JoinSpec:
	//    type=JoinType "on" conditions=JoinConditions options=JoinOptions?;
	public JoinSpecElements getJoinSpecAccess() {
		return pJoinSpec;
	}
	
	public ParserRule getJoinSpecRule() {
		return getJoinSpecAccess().getRule();
	}
	
	//JoinType:
	//    "inner" | "left" | "right" | "full" | "cross";
	public JoinTypeElements getJoinTypeAccess() {
		return pJoinType;
	}
	
	public ParserRule getJoinTypeRule() {
		return getJoinTypeAccess().getRule();
	}
	
	//JoinConditions:
	//    conditions+=JoinCondition ("and" conditions+=JoinCondition)*;
	public JoinConditionsElements getJoinConditionsAccess() {
		return pJoinConditions;
	}
	
	public ParserRule getJoinConditionsRule() {
		return getJoinConditionsAccess().getRule();
	}
	
	//JoinCondition:
	//    left=Column "=" right=Column
	//    | left=Column comparator=Comparator right=Column;
	public JoinConditionElements getJoinConditionAccess() {
		return pJoinCondition;
	}
	
	public ParserRule getJoinConditionRule() {
		return getJoinConditionAccess().getRule();
	}
	
	//Comparator:
	//    "=" | "==" | "!=" | "<" | ">" | "<=" | ">=";
	public ComparatorElements getComparatorAccess() {
		return pComparator;
	}
	
	public ParserRule getComparatorRule() {
		return getComparatorAccess().getRule();
	}
	
	//JoinOptions:
	//    "suffix" "=" "(" leftSuffix=STRING "," rightSuffix=STRING ")";
	public JoinOptionsElements getJoinOptionsAccess() {
		return pJoinOptions;
	}
	
	public ParserRule getJoinOptionsRule() {
		return getJoinOptionsAccess().getRule();
	}
	
	//Column:
	//    name=ID | table=ID "." column=ID;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//ColumnList:
	//    columns+=Column ("," columns+=Column)*
	//    | "*";
	public ColumnListElements getColumnListAccess() {
		return pColumnList;
	}
	
	public ParserRule getColumnListRule() {
		return getColumnListAccess().getRule();
	}
	
	//Number:
	//    INT ('.' INT)? | '.' INT;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Integer returns ecore::EInt:
	//    INT;
	public IntegerElements getIntegerAccess() {
		return pInteger;
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//Float returns ecore::EFloat:
	//    INT '.' INT | '.' INT | INT '.';
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	//Regex:
	//    '/' pattern=STRING '/' flags=STRING?;
	public RegexElements getRegexAccess() {
		return pRegex;
	}
	
	public ParserRule getRegexRule() {
		return getRegexAccess().getRule();
	}
	
	//terminal COMMENT:
	//    '//' !('\n'|'\r')* ('\r'? '\n')?
	//    | '/*' -> '*/';
	public TerminalRule getCOMMENTRule() {
		return tCOMMENT;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
