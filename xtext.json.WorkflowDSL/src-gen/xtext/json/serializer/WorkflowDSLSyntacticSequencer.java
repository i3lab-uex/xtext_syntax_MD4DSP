/*
 * generated by Xtext 2.40.0
 */
package xtext.json.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import xtext.json.services.WorkflowDSLGrammarAccess;

@SuppressWarnings("all")
public class WorkflowDSLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected WorkflowDSLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AdvancedImpute_ImputeMethod_InterpolationKeyword_0_0_or_LinearKeyword_2_or_Moving_averageKeyword_1_0_or_PolynomialKeyword_3_0_or_SequentialImputeParserRuleCall_2_or_SplineKeyword_4_or_StatisticalImputeParserRuleCall_1;
	protected AbstractElementAlias match_AdvancedImpute_InterpolationKeyword_0_0_or_LinearKeyword_2_or_Moving_averageKeyword_1_0_or_PolynomialKeyword_3_0_or_SplineKeyword_4;
	protected AbstractElementAlias match_BoundValue_AsteriskKeyword_1_or_InfKeyword_2_or_InfKeyword_3;
	protected AbstractElementAlias match_Delimiter_CommaKeyword_0_or_SemicolonKeyword_1_or_TabKeyword_2_or_VerticalLineKeyword_3;
	protected AbstractElementAlias match_IQRMethod_ZScoreMethod_IqrKeyword_0_or_ZscoreKeyword_0;
	protected AbstractElementAlias match_IntervalBound_InfKeyword_1_or_InfKeyword_2_or_InfinityKeyword_3_or_InfinityKeyword_4;
	protected AbstractElementAlias match_ReplacementStrategy_CapKeyword_5_or_RemoveKeyword_4_or_Replace_by_closestKeyword_2_or_Replace_closestKeyword_0_or_Replace_missingKeyword_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (WorkflowDSLGrammarAccess) access;
		match_AdvancedImpute_ImputeMethod_InterpolationKeyword_0_0_or_LinearKeyword_2_or_Moving_averageKeyword_1_0_or_PolynomialKeyword_3_0_or_SequentialImputeParserRuleCall_2_or_SplineKeyword_4_or_StatisticalImputeParserRuleCall_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAdvancedImputeAccess().getInterpolationKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getAdvancedImputeAccess().getLinearKeyword_2()), new TokenAlias(false, false, grammarAccess.getAdvancedImputeAccess().getMoving_averageKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getAdvancedImputeAccess().getPolynomialKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getAdvancedImputeAccess().getSplineKeyword_4()), new TokenAlias(false, false, grammarAccess.getImputeMethodAccess().getSequentialImputeParserRuleCall_2()), new TokenAlias(false, false, grammarAccess.getImputeMethodAccess().getStatisticalImputeParserRuleCall_1()));
		match_AdvancedImpute_InterpolationKeyword_0_0_or_LinearKeyword_2_or_Moving_averageKeyword_1_0_or_PolynomialKeyword_3_0_or_SplineKeyword_4 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAdvancedImputeAccess().getInterpolationKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getAdvancedImputeAccess().getLinearKeyword_2()), new TokenAlias(false, false, grammarAccess.getAdvancedImputeAccess().getMoving_averageKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getAdvancedImputeAccess().getPolynomialKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getAdvancedImputeAccess().getSplineKeyword_4()));
		match_BoundValue_AsteriskKeyword_1_or_InfKeyword_2_or_InfKeyword_3 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBoundValueAccess().getAsteriskKeyword_1()), new TokenAlias(false, false, grammarAccess.getBoundValueAccess().getInfKeyword_2()), new TokenAlias(false, false, grammarAccess.getBoundValueAccess().getInfKeyword_3()));
		match_Delimiter_CommaKeyword_0_or_SemicolonKeyword_1_or_TabKeyword_2_or_VerticalLineKeyword_3 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDelimiterAccess().getCommaKeyword_0()), new TokenAlias(false, false, grammarAccess.getDelimiterAccess().getSemicolonKeyword_1()), new TokenAlias(false, false, grammarAccess.getDelimiterAccess().getTabKeyword_2()), new TokenAlias(false, false, grammarAccess.getDelimiterAccess().getVerticalLineKeyword_3()));
		match_IQRMethod_ZScoreMethod_IqrKeyword_0_or_ZscoreKeyword_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getIQRMethodAccess().getIqrKeyword_0()), new TokenAlias(false, false, grammarAccess.getZScoreMethodAccess().getZscoreKeyword_0()));
		match_IntervalBound_InfKeyword_1_or_InfKeyword_2_or_InfinityKeyword_3_or_InfinityKeyword_4 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getIntervalBoundAccess().getInfKeyword_1()), new TokenAlias(false, false, grammarAccess.getIntervalBoundAccess().getInfKeyword_2()), new TokenAlias(false, false, grammarAccess.getIntervalBoundAccess().getInfinityKeyword_3()), new TokenAlias(false, false, grammarAccess.getIntervalBoundAccess().getInfinityKeyword_4()));
		match_ReplacementStrategy_CapKeyword_5_or_RemoveKeyword_4_or_Replace_by_closestKeyword_2_or_Replace_closestKeyword_0_or_Replace_missingKeyword_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getReplacementStrategyAccess().getCapKeyword_5()), new TokenAlias(false, false, grammarAccess.getReplacementStrategyAccess().getRemoveKeyword_4()), new TokenAlias(false, false, grammarAccess.getReplacementStrategyAccess().getReplace_by_closestKeyword_2()), new TokenAlias(false, false, grammarAccess.getReplacementStrategyAccess().getReplace_closestKeyword_0()), new TokenAlias(false, false, grammarAccess.getReplacementStrategyAccess().getReplace_missingKeyword_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getSequentialImputeRule())
			return getSequentialImputeToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSpecialValueCheckRule())
			return getSpecialValueCheckToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getStatisticalImputeRule())
			return getStatisticalImputeToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * SequentialImpute:
	 *     "forward_fill"
	 *     | "backward_fill"
	 *     | "previous_value"
	 *     | "next_value";
	 */
	protected String getSequentialImputeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "forward_fill";
	}
	
	/**
	 * SpecialValueCheck:
	 *     "special_values";
	 */
	protected String getSpecialValueCheckToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "special_values";
	}
	
	/**
	 * StatisticalImpute:
	 *     "mean"
	 *     | "median"
	 *     | "mode"
	 *     | "most_frequent"
	 *     | "max"
	 *     | "min";
	 */
	protected String getStatisticalImputeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "mean";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AdvancedImpute_ImputeMethod_InterpolationKeyword_0_0_or_LinearKeyword_2_or_Moving_averageKeyword_1_0_or_PolynomialKeyword_3_0_or_SequentialImputeParserRuleCall_2_or_SplineKeyword_4_or_StatisticalImputeParserRuleCall_1.equals(syntax))
				emit_AdvancedImpute_ImputeMethod_InterpolationKeyword_0_0_or_LinearKeyword_2_or_Moving_averageKeyword_1_0_or_PolynomialKeyword_3_0_or_SequentialImputeParserRuleCall_2_or_SplineKeyword_4_or_StatisticalImputeParserRuleCall_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AdvancedImpute_InterpolationKeyword_0_0_or_LinearKeyword_2_or_Moving_averageKeyword_1_0_or_PolynomialKeyword_3_0_or_SplineKeyword_4.equals(syntax))
				emit_AdvancedImpute_InterpolationKeyword_0_0_or_LinearKeyword_2_or_Moving_averageKeyword_1_0_or_PolynomialKeyword_3_0_or_SplineKeyword_4(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BoundValue_AsteriskKeyword_1_or_InfKeyword_2_or_InfKeyword_3.equals(syntax))
				emit_BoundValue_AsteriskKeyword_1_or_InfKeyword_2_or_InfKeyword_3(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Delimiter_CommaKeyword_0_or_SemicolonKeyword_1_or_TabKeyword_2_or_VerticalLineKeyword_3.equals(syntax))
				emit_Delimiter_CommaKeyword_0_or_SemicolonKeyword_1_or_TabKeyword_2_or_VerticalLineKeyword_3(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IQRMethod_ZScoreMethod_IqrKeyword_0_or_ZscoreKeyword_0.equals(syntax))
				emit_IQRMethod_ZScoreMethod_IqrKeyword_0_or_ZscoreKeyword_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IntervalBound_InfKeyword_1_or_InfKeyword_2_or_InfinityKeyword_3_or_InfinityKeyword_4.equals(syntax))
				emit_IntervalBound_InfKeyword_1_or_InfKeyword_2_or_InfinityKeyword_3_or_InfinityKeyword_4(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReplacementStrategy_CapKeyword_5_or_RemoveKeyword_4_or_Replace_by_closestKeyword_2_or_Replace_closestKeyword_0_or_Replace_missingKeyword_1.equals(syntax))
				emit_ReplacementStrategy_CapKeyword_5_or_RemoveKeyword_4_or_Replace_by_closestKeyword_2_or_Replace_closestKeyword_0_or_Replace_missingKeyword_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         StatisticalImpute | 
	  *         SequentialImpute | 
	  *         'interpolation' | 
	  *         'moving_average' | 
	  *         'linear' | 
	  *         'polynomial' | 
	  *         'spline'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_AdvancedImpute_ImputeMethod_InterpolationKeyword_0_0_or_LinearKeyword_2_or_Moving_averageKeyword_1_0_or_PolynomialKeyword_3_0_or_SequentialImputeParserRuleCall_2_or_SplineKeyword_4_or_StatisticalImputeParserRuleCall_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'interpolation' | 'moving_average' | 'linear' | 'polynomial' | 'spline'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_AdvancedImpute_InterpolationKeyword_0_0_or_LinearKeyword_2_or_Moving_averageKeyword_1_0_or_PolynomialKeyword_3_0_or_SplineKeyword_4(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '*' | 'inf' | '-inf'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_BoundValue_AsteriskKeyword_1_or_InfKeyword_2_or_InfKeyword_3(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ',' | ';' | '	' | '|'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_Delimiter_CommaKeyword_0_or_SemicolonKeyword_1_or_TabKeyword_2_or_VerticalLineKeyword_3(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'iqr' | 'zscore'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_IQRMethod_ZScoreMethod_IqrKeyword_0_or_ZscoreKeyword_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '-inf' | 'inf' | '-Infinity' | 'Infinity'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_IntervalBound_InfKeyword_1_or_InfKeyword_2_or_InfinityKeyword_3_or_InfinityKeyword_4(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'replace_closest' | 'replace_missing' | 'replace_by_closest' | 'remove' | 'cap'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_ReplacementStrategy_CapKeyword_5_or_RemoveKeyword_4_or_Replace_by_closestKeyword_2_or_Replace_closestKeyword_0_or_Replace_missingKeyword_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
