/**
 * generated by Xtext 2.40.0
 */
package xtext.json.workflowDSL.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import xtext.json.workflowDSL.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see xtext.json.workflowDSL.WorkflowDSLPackage
 * @generated
 */
public class WorkflowDSLSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static WorkflowDSLPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WorkflowDSLSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = WorkflowDSLPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case WorkflowDSLPackage.WORKFLOW:
      {
        Workflow workflow = (Workflow)theEObject;
        T result = caseWorkflow(workflow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.DATA_SOURCE:
      {
        DataSource dataSource = (DataSource)theEObject;
        T result = caseDataSource(dataSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.DATA_READER:
      {
        DataReader dataReader = (DataReader)theEObject;
        T result = caseDataReader(dataReader);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.CSV_READER:
      {
        CSVReader csvReader = (CSVReader)theEObject;
        T result = caseCSVReader(csvReader);
        if (result == null) result = caseDataReader(csvReader);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.FILE_READER:
      {
        FileReader fileReader = (FileReader)theEObject;
        T result = caseFileReader(fileReader);
        if (result == null) result = caseDataReader(fileReader);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.FILE_PATH:
      {
        FilePath filePath = (FilePath)theEObject;
        T result = caseFilePath(filePath);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.DELIMITER:
      {
        Delimiter delimiter = (Delimiter)theEObject;
        T result = caseDelimiter(delimiter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.WORKFLOW_BODY:
      {
        WorkflowBody workflowBody = (WorkflowBody)theEObject;
        T result = caseWorkflowBody(workflowBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.STEP:
      {
        Step step = (Step)theEObject;
        T result = caseStep(step);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.CONTRACT_BLOCK:
      {
        ContractBlock contractBlock = (ContractBlock)theEObject;
        T result = caseContractBlock(contractBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.CONTRACT:
      {
        Contract contract = (Contract)theEObject;
        T result = caseContract(contract);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.PRECONDITION:
      {
        Precondition precondition = (Precondition)theEObject;
        T result = casePrecondition(precondition);
        if (result == null) result = caseContract(precondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.POSTCONDITION:
      {
        Postcondition postcondition = (Postcondition)theEObject;
        T result = casePostcondition(postcondition);
        if (result == null) result = caseContract(postcondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.INVARIANT:
      {
        Invariant invariant = (Invariant)theEObject;
        T result = caseInvariant(invariant);
        if (result == null) result = caseContract(invariant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.CONTRACT_NAME:
      {
        ContractName contractName = (ContractName)theEObject;
        T result = caseContractName(contractName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.CONTRACT_BODY:
      {
        ContractBody contractBody = (ContractBody)theEObject;
        T result = caseContractBody(contractBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.CONTRACT_TYPE:
      {
        ContractType contractType = (ContractType)theEObject;
        T result = caseContractType(contractType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.VALUE_RANGE_CONTRACT:
      {
        ValueRangeContract valueRangeContract = (ValueRangeContract)theEObject;
        T result = caseValueRangeContract(valueRangeContract);
        if (result == null) result = caseContractType(valueRangeContract);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.CONTRACT_FIELD:
      {
        ContractField contractField = (ContractField)theEObject;
        T result = caseContractField(contractField);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.CONTRACT_VALUE:
      {
        ContractValue contractValue = (ContractValue)theEObject;
        T result = caseContractValue(contractValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.CONDITION_CONTRACT:
      {
        ConditionContract conditionContract = (ConditionContract)theEObject;
        T result = caseConditionContract(conditionContract);
        if (result == null) result = caseContractType(conditionContract);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.IF_CLAUSE:
      {
        IfClause ifClause = (IfClause)theEObject;
        T result = caseIfClause(ifClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.THEN_CLAUSE:
      {
        ThenClause thenClause = (ThenClause)theEObject;
        T result = caseThenClause(thenClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.DATA_CONDITION:
      {
        DataCondition dataCondition = (DataCondition)theEObject;
        T result = caseDataCondition(dataCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.CAST_TYPE_CHECK:
      {
        CastTypeCheck castTypeCheck = (CastTypeCheck)theEObject;
        T result = caseCastTypeCheck(castTypeCheck);
        if (result == null) result = caseDataCondition(castTypeCheck);
        if (result == null) result = caseDataResult(castTypeCheck);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.VALUE_CHECK:
      {
        ValueCheck valueCheck = (ValueCheck)theEObject;
        T result = caseValueCheck(valueCheck);
        if (result == null) result = caseDataCondition(valueCheck);
        if (result == null) result = caseDataResult(valueCheck);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.DATA_RESULT:
      {
        DataResult dataResult = (DataResult)theEObject;
        T result = caseDataResult(dataResult);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.SPECIAL_VALUE_CONTRACT:
      {
        SpecialValueContract specialValueContract = (SpecialValueContract)theEObject;
        T result = caseSpecialValueContract(specialValueContract);
        if (result == null) result = caseContractType(specialValueContract);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.CAST_TYPE_CONTRACT:
      {
        CastTypeContract castTypeContract = (CastTypeContract)theEObject;
        T result = caseCastTypeContract(castTypeContract);
        if (result == null) result = caseContractType(castTypeContract);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.TRANSFORMATION:
      {
        Transformation transformation = (Transformation)theEObject;
        T result = caseTransformation(transformation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.ROW_FILTER:
      {
        RowFilter rowFilter = (RowFilter)theEObject;
        T result = caseRowFilter(rowFilter);
        if (result == null) result = caseTransformation(rowFilter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.FILTER_CONDITION:
      {
        FilterCondition filterCondition = (FilterCondition)theEObject;
        T result = caseFilterCondition(filterCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.MISSING_FILTER:
      {
        MissingFilter missingFilter = (MissingFilter)theEObject;
        T result = caseMissingFilter(missingFilter);
        if (result == null) result = caseFilterCondition(missingFilter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.RANGE_FILTER:
      {
        RangeFilter rangeFilter = (RangeFilter)theEObject;
        T result = caseRangeFilter(rangeFilter);
        if (result == null) result = caseFilterCondition(rangeFilter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.RANGE_BOUNDS:
      {
        RangeBounds rangeBounds = (RangeBounds)theEObject;
        T result = caseRangeBounds(rangeBounds);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.BOUND_VALUE:
      {
        BoundValue boundValue = (BoundValue)theEObject;
        T result = caseBoundValue(boundValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.STRING_FILTER:
      {
        StringFilter stringFilter = (StringFilter)theEObject;
        T result = caseStringFilter(stringFilter);
        if (result == null) result = caseFilterCondition(stringFilter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.PATTERN:
      {
        Pattern pattern = (Pattern)theEObject;
        T result = casePattern(pattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.COLUMN_FILTER:
      {
        ColumnFilter columnFilter = (ColumnFilter)theEObject;
        T result = caseColumnFilter(columnFilter);
        if (result == null) result = caseTransformation(columnFilter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.MAPPING:
      {
        Mapping mapping = (Mapping)theEObject;
        T result = caseMapping(mapping);
        if (result == null) result = caseTransformation(mapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.VALUE_MAPPING:
      {
        ValueMapping valueMapping = (ValueMapping)theEObject;
        T result = caseValueMapping(valueMapping);
        if (result == null) result = caseMapping(valueMapping);
        if (result == null) result = caseTransformation(valueMapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.MAPPING_RULES:
      {
        MappingRules mappingRules = (MappingRules)theEObject;
        T result = caseMappingRules(mappingRules);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.MAPPING_RULE:
      {
        MappingRule mappingRule = (MappingRule)theEObject;
        T result = caseMappingRule(mappingRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.SUBSTRING_MAPPING:
      {
        SubstringMapping substringMapping = (SubstringMapping)theEObject;
        T result = caseSubstringMapping(substringMapping);
        if (result == null) result = caseMapping(substringMapping);
        if (result == null) result = caseTransformation(substringMapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.MAPPING_MODE:
      {
        MappingMode mappingMode = (MappingMode)theEObject;
        T result = caseMappingMode(mappingMode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.MATH_OP:
      {
        MathOp mathOp = (MathOp)theEObject;
        T result = caseMathOp(mathOp);
        if (result == null) result = caseTransformation(mathOp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.MATH_EXPRESSION:
      {
        MathExpression mathExpression = (MathExpression)theEObject;
        T result = caseMathExpression(mathExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.PRIMARY:
      {
        Primary primary = (Primary)theEObject;
        T result = casePrimary(primary);
        if (result == null) result = caseMathExpression(primary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.FUNCTION_CALL:
      {
        FunctionCall functionCall = (FunctionCall)theEObject;
        T result = caseFunctionCall(functionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.OPERAND:
      {
        Operand operand = (Operand)theEObject;
        T result = caseOperand(operand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.BINNER:
      {
        Binner binner = (Binner)theEObject;
        T result = caseBinner(binner);
        if (result == null) result = caseTransformation(binner);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.BIN_DEFINITIONS:
      {
        BinDefinitions binDefinitions = (BinDefinitions)theEObject;
        T result = caseBinDefinitions(binDefinitions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.BIN_DEF:
      {
        BinDef binDef = (BinDef)theEObject;
        T result = caseBinDef(binDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.BIN_NAME:
      {
        BinName binName = (BinName)theEObject;
        T result = caseBinName(binName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.INTERVAL:
      {
        Interval interval = (Interval)theEObject;
        T result = caseInterval(interval);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.INTERVAL_BOUND:
      {
        IntervalBound intervalBound = (IntervalBound)theEObject;
        T result = caseIntervalBound(intervalBound);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.BIN_MODE:
      {
        BinMode binMode = (BinMode)theEObject;
        T result = caseBinMode(binMode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.TYPE_CONVERSION:
      {
        TypeConversion typeConversion = (TypeConversion)theEObject;
        T result = caseTypeConversion(typeConversion);
        if (result == null) result = caseTransformation(typeConversion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.DATE_FORMAT:
      {
        DateFormat dateFormat = (DateFormat)theEObject;
        T result = caseDateFormat(dateFormat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.IMPUTATION:
      {
        Imputation imputation = (Imputation)theEObject;
        T result = caseImputation(imputation);
        if (result == null) result = caseTransformation(imputation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.IMPUTE_METHOD:
      {
        ImputeMethod imputeMethod = (ImputeMethod)theEObject;
        T result = caseImputeMethod(imputeMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.FIXED_IMPUTE:
      {
        FixedImpute fixedImpute = (FixedImpute)theEObject;
        T result = caseFixedImpute(fixedImpute);
        if (result == null) result = caseImputeMethod(fixedImpute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.VALUE_LIST:
      {
        ValueList valueList = (ValueList)theEObject;
        T result = caseValueList(valueList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.VALUE:
      {
        Value value = (Value)theEObject;
        T result = caseValue(value);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.ADVANCED_IMPUTE:
      {
        AdvancedImpute advancedImpute = (AdvancedImpute)theEObject;
        T result = caseAdvancedImpute(advancedImpute);
        if (result == null) result = caseImputeMethod(advancedImpute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.OUTLIER_TREATMENT:
      {
        OutlierTreatment outlierTreatment = (OutlierTreatment)theEObject;
        T result = caseOutlierTreatment(outlierTreatment);
        if (result == null) result = caseTransformation(outlierTreatment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.OUTLIER_STRATEGY:
      {
        OutlierStrategy outlierStrategy = (OutlierStrategy)theEObject;
        T result = caseOutlierStrategy(outlierStrategy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.REPLACEMENT_STRATEGY:
      {
        ReplacementStrategy replacementStrategy = (ReplacementStrategy)theEObject;
        T result = caseReplacementStrategy(replacementStrategy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.DETECTION_METHOD:
      {
        DetectionMethod detectionMethod = (DetectionMethod)theEObject;
        T result = caseDetectionMethod(detectionMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.IQR_METHOD:
      {
        IQRMethod iqrMethod = (IQRMethod)theEObject;
        T result = caseIQRMethod(iqrMethod);
        if (result == null) result = caseDetectionMethod(iqrMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.IQR_PARAMS:
      {
        IQRParams iqrParams = (IQRParams)theEObject;
        T result = caseIQRParams(iqrParams);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.ZSCORE_METHOD:
      {
        ZScoreMethod zScoreMethod = (ZScoreMethod)theEObject;
        T result = caseZScoreMethod(zScoreMethod);
        if (result == null) result = caseDetectionMethod(zScoreMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.PERCENTILE_METHOD:
      {
        PercentileMethod percentileMethod = (PercentileMethod)theEObject;
        T result = casePercentileMethod(percentileMethod);
        if (result == null) result = caseDetectionMethod(percentileMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.OUTLIER_OPTIONS:
      {
        OutlierOptions outlierOptions = (OutlierOptions)theEObject;
        T result = caseOutlierOptions(outlierOptions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.JOIN:
      {
        Join join = (Join)theEObject;
        T result = caseJoin(join);
        if (result == null) result = caseTransformation(join);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.JOIN_SPEC:
      {
        JoinSpec joinSpec = (JoinSpec)theEObject;
        T result = caseJoinSpec(joinSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.JOIN_CONDITIONS:
      {
        JoinConditions joinConditions = (JoinConditions)theEObject;
        T result = caseJoinConditions(joinConditions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.JOIN_CONDITION:
      {
        JoinCondition joinCondition = (JoinCondition)theEObject;
        T result = caseJoinCondition(joinCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.JOIN_OPTIONS:
      {
        JoinOptions joinOptions = (JoinOptions)theEObject;
        T result = caseJoinOptions(joinOptions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.COLUMN:
      {
        Column column = (Column)theEObject;
        T result = caseColumn(column);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.COLUMN_LIST:
      {
        ColumnList columnList = (ColumnList)theEObject;
        T result = caseColumnList(columnList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDSLPackage.REGEX:
      {
        Regex regex = (Regex)theEObject;
        T result = caseRegex(regex);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Workflow</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Workflow</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWorkflow(Workflow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataSource(DataSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Reader</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Reader</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataReader(DataReader object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CSV Reader</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CSV Reader</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCSVReader(CSVReader object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>File Reader</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>File Reader</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFileReader(FileReader object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>File Path</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>File Path</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFilePath(FilePath object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delimiter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delimiter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDelimiter(Delimiter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Workflow Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Workflow Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWorkflowBody(WorkflowBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Step</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Step</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStep(Step object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contract Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contract Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContractBlock(ContractBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contract</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contract</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContract(Contract object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Precondition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Precondition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrecondition(Precondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Postcondition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Postcondition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePostcondition(Postcondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invariant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invariant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvariant(Invariant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contract Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contract Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContractName(ContractName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contract Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contract Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContractBody(ContractBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contract Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contract Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContractType(ContractType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value Range Contract</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value Range Contract</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValueRangeContract(ValueRangeContract object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contract Field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contract Field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContractField(ContractField object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contract Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contract Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContractValue(ContractValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition Contract</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition Contract</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionContract(ConditionContract object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfClause(IfClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Then Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Then Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThenClause(ThenClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataCondition(DataCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cast Type Check</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cast Type Check</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCastTypeCheck(CastTypeCheck object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value Check</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value Check</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValueCheck(ValueCheck object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Result</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Result</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataResult(DataResult object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Special Value Contract</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Special Value Contract</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpecialValueContract(SpecialValueContract object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cast Type Contract</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cast Type Contract</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCastTypeContract(CastTypeContract object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transformation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transformation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransformation(Transformation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Row Filter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Row Filter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRowFilter(RowFilter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Filter Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Filter Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFilterCondition(FilterCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Missing Filter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Missing Filter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMissingFilter(MissingFilter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Range Filter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Range Filter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRangeFilter(RangeFilter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Range Bounds</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Range Bounds</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRangeBounds(RangeBounds object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bound Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bound Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoundValue(BoundValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Filter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Filter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringFilter(StringFilter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePattern(Pattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Column Filter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Column Filter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseColumnFilter(ColumnFilter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapping(Mapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value Mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value Mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValueMapping(ValueMapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mapping Rules</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mapping Rules</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMappingRules(MappingRules object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mapping Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mapping Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMappingRule(MappingRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Substring Mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Substring Mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubstringMapping(SubstringMapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mapping Mode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mapping Mode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMappingMode(MappingMode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Math Op</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Math Op</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMathOp(MathOp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Math Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Math Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMathExpression(MathExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimary(Primary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionCall(FunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperand(Operand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binner</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binner</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinner(Binner object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bin Definitions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bin Definitions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinDefinitions(BinDefinitions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bin Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bin Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinDef(BinDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bin Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bin Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinName(BinName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interval</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interval</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterval(Interval object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interval Bound</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interval Bound</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntervalBound(IntervalBound object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bin Mode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bin Mode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinMode(BinMode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Conversion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Conversion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeConversion(TypeConversion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Date Format</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Date Format</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDateFormat(DateFormat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Imputation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Imputation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImputation(Imputation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Impute Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Impute Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImputeMethod(ImputeMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fixed Impute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fixed Impute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFixedImpute(FixedImpute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValueList(ValueList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValue(Value object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Advanced Impute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Advanced Impute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdvancedImpute(AdvancedImpute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Outlier Treatment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Outlier Treatment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutlierTreatment(OutlierTreatment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Outlier Strategy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Outlier Strategy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutlierStrategy(OutlierStrategy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Replacement Strategy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Replacement Strategy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReplacementStrategy(ReplacementStrategy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Detection Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Detection Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDetectionMethod(DetectionMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>IQR Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>IQR Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIQRMethod(IQRMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>IQR Params</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>IQR Params</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIQRParams(IQRParams object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ZScore Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ZScore Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseZScoreMethod(ZScoreMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Percentile Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Percentile Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePercentileMethod(PercentileMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Outlier Options</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Outlier Options</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutlierOptions(OutlierOptions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Join</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Join</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJoin(Join object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Join Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Join Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJoinSpec(JoinSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Join Conditions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Join Conditions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJoinConditions(JoinConditions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Join Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Join Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJoinCondition(JoinCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Join Options</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Join Options</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJoinOptions(JoinOptions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Column</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Column</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseColumn(Column object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Column List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Column List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseColumnList(ColumnList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Regex</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Regex</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRegex(Regex object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //WorkflowDSLSwitch
