/**
 * generated by Xtext 2.40.0
 */
package xtext.json.workflowDSL.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import xtext.json.workflowDSL.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see xtext.json.workflowDSL.WorkflowDSLPackage
 * @generated
 */
public class WorkflowDSLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static WorkflowDSLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WorkflowDSLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = WorkflowDSLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WorkflowDSLSwitch<Adapter> modelSwitch =
    new WorkflowDSLSwitch<Adapter>()
    {
      @Override
      public Adapter caseWorkflow(Workflow object)
      {
        return createWorkflowAdapter();
      }
      @Override
      public Adapter caseDataSource(DataSource object)
      {
        return createDataSourceAdapter();
      }
      @Override
      public Adapter caseDataReader(DataReader object)
      {
        return createDataReaderAdapter();
      }
      @Override
      public Adapter caseCSVReader(CSVReader object)
      {
        return createCSVReaderAdapter();
      }
      @Override
      public Adapter caseFileReader(FileReader object)
      {
        return createFileReaderAdapter();
      }
      @Override
      public Adapter caseFilePath(FilePath object)
      {
        return createFilePathAdapter();
      }
      @Override
      public Adapter caseDelimiter(Delimiter object)
      {
        return createDelimiterAdapter();
      }
      @Override
      public Adapter caseWorkflowBody(WorkflowBody object)
      {
        return createWorkflowBodyAdapter();
      }
      @Override
      public Adapter caseStep(Step object)
      {
        return createStepAdapter();
      }
      @Override
      public Adapter caseContractBlock(ContractBlock object)
      {
        return createContractBlockAdapter();
      }
      @Override
      public Adapter caseContract(Contract object)
      {
        return createContractAdapter();
      }
      @Override
      public Adapter casePrecondition(Precondition object)
      {
        return createPreconditionAdapter();
      }
      @Override
      public Adapter casePostcondition(Postcondition object)
      {
        return createPostconditionAdapter();
      }
      @Override
      public Adapter caseInvariant(Invariant object)
      {
        return createInvariantAdapter();
      }
      @Override
      public Adapter caseContractName(ContractName object)
      {
        return createContractNameAdapter();
      }
      @Override
      public Adapter caseContractBody(ContractBody object)
      {
        return createContractBodyAdapter();
      }
      @Override
      public Adapter caseContractType(ContractType object)
      {
        return createContractTypeAdapter();
      }
      @Override
      public Adapter caseValueRangeContract(ValueRangeContract object)
      {
        return createValueRangeContractAdapter();
      }
      @Override
      public Adapter caseContractField(ContractField object)
      {
        return createContractFieldAdapter();
      }
      @Override
      public Adapter caseContractValue(ContractValue object)
      {
        return createContractValueAdapter();
      }
      @Override
      public Adapter caseConditionContract(ConditionContract object)
      {
        return createConditionContractAdapter();
      }
      @Override
      public Adapter caseIfClause(IfClause object)
      {
        return createIfClauseAdapter();
      }
      @Override
      public Adapter caseThenClause(ThenClause object)
      {
        return createThenClauseAdapter();
      }
      @Override
      public Adapter caseDataCondition(DataCondition object)
      {
        return createDataConditionAdapter();
      }
      @Override
      public Adapter caseCastTypeCheck(CastTypeCheck object)
      {
        return createCastTypeCheckAdapter();
      }
      @Override
      public Adapter caseValueCheck(ValueCheck object)
      {
        return createValueCheckAdapter();
      }
      @Override
      public Adapter caseDataResult(DataResult object)
      {
        return createDataResultAdapter();
      }
      @Override
      public Adapter caseSpecialValueContract(SpecialValueContract object)
      {
        return createSpecialValueContractAdapter();
      }
      @Override
      public Adapter caseCastTypeContract(CastTypeContract object)
      {
        return createCastTypeContractAdapter();
      }
      @Override
      public Adapter caseTransformation(Transformation object)
      {
        return createTransformationAdapter();
      }
      @Override
      public Adapter caseRowFilter(RowFilter object)
      {
        return createRowFilterAdapter();
      }
      @Override
      public Adapter caseFilterCondition(FilterCondition object)
      {
        return createFilterConditionAdapter();
      }
      @Override
      public Adapter caseMissingFilter(MissingFilter object)
      {
        return createMissingFilterAdapter();
      }
      @Override
      public Adapter caseRangeFilter(RangeFilter object)
      {
        return createRangeFilterAdapter();
      }
      @Override
      public Adapter caseRangeBounds(RangeBounds object)
      {
        return createRangeBoundsAdapter();
      }
      @Override
      public Adapter caseBoundValue(BoundValue object)
      {
        return createBoundValueAdapter();
      }
      @Override
      public Adapter caseStringFilter(StringFilter object)
      {
        return createStringFilterAdapter();
      }
      @Override
      public Adapter casePattern(Pattern object)
      {
        return createPatternAdapter();
      }
      @Override
      public Adapter caseColumnFilter(ColumnFilter object)
      {
        return createColumnFilterAdapter();
      }
      @Override
      public Adapter caseMapping(Mapping object)
      {
        return createMappingAdapter();
      }
      @Override
      public Adapter caseValueMapping(ValueMapping object)
      {
        return createValueMappingAdapter();
      }
      @Override
      public Adapter caseMappingRules(MappingRules object)
      {
        return createMappingRulesAdapter();
      }
      @Override
      public Adapter caseMappingRule(MappingRule object)
      {
        return createMappingRuleAdapter();
      }
      @Override
      public Adapter caseSubstringMapping(SubstringMapping object)
      {
        return createSubstringMappingAdapter();
      }
      @Override
      public Adapter caseMappingMode(MappingMode object)
      {
        return createMappingModeAdapter();
      }
      @Override
      public Adapter caseMathOp(MathOp object)
      {
        return createMathOpAdapter();
      }
      @Override
      public Adapter caseMathExpression(MathExpression object)
      {
        return createMathExpressionAdapter();
      }
      @Override
      public Adapter casePrimary(Primary object)
      {
        return createPrimaryAdapter();
      }
      @Override
      public Adapter caseFunctionCall(FunctionCall object)
      {
        return createFunctionCallAdapter();
      }
      @Override
      public Adapter caseOperand(Operand object)
      {
        return createOperandAdapter();
      }
      @Override
      public Adapter caseBinner(Binner object)
      {
        return createBinnerAdapter();
      }
      @Override
      public Adapter caseBinDefinitions(BinDefinitions object)
      {
        return createBinDefinitionsAdapter();
      }
      @Override
      public Adapter caseBinDef(BinDef object)
      {
        return createBinDefAdapter();
      }
      @Override
      public Adapter caseBinName(BinName object)
      {
        return createBinNameAdapter();
      }
      @Override
      public Adapter caseInterval(Interval object)
      {
        return createIntervalAdapter();
      }
      @Override
      public Adapter caseIntervalBound(IntervalBound object)
      {
        return createIntervalBoundAdapter();
      }
      @Override
      public Adapter caseBinMode(BinMode object)
      {
        return createBinModeAdapter();
      }
      @Override
      public Adapter caseTypeConversion(TypeConversion object)
      {
        return createTypeConversionAdapter();
      }
      @Override
      public Adapter caseDateFormat(DateFormat object)
      {
        return createDateFormatAdapter();
      }
      @Override
      public Adapter caseImputation(Imputation object)
      {
        return createImputationAdapter();
      }
      @Override
      public Adapter caseImputeMethod(ImputeMethod object)
      {
        return createImputeMethodAdapter();
      }
      @Override
      public Adapter caseFixedImpute(FixedImpute object)
      {
        return createFixedImputeAdapter();
      }
      @Override
      public Adapter caseValueList(ValueList object)
      {
        return createValueListAdapter();
      }
      @Override
      public Adapter caseValue(Value object)
      {
        return createValueAdapter();
      }
      @Override
      public Adapter caseAdvancedImpute(AdvancedImpute object)
      {
        return createAdvancedImputeAdapter();
      }
      @Override
      public Adapter caseOutlierTreatment(OutlierTreatment object)
      {
        return createOutlierTreatmentAdapter();
      }
      @Override
      public Adapter caseOutlierStrategy(OutlierStrategy object)
      {
        return createOutlierStrategyAdapter();
      }
      @Override
      public Adapter caseReplacementStrategy(ReplacementStrategy object)
      {
        return createReplacementStrategyAdapter();
      }
      @Override
      public Adapter caseDetectionMethod(DetectionMethod object)
      {
        return createDetectionMethodAdapter();
      }
      @Override
      public Adapter caseIQRMethod(IQRMethod object)
      {
        return createIQRMethodAdapter();
      }
      @Override
      public Adapter caseIQRParams(IQRParams object)
      {
        return createIQRParamsAdapter();
      }
      @Override
      public Adapter caseZScoreMethod(ZScoreMethod object)
      {
        return createZScoreMethodAdapter();
      }
      @Override
      public Adapter casePercentileMethod(PercentileMethod object)
      {
        return createPercentileMethodAdapter();
      }
      @Override
      public Adapter caseOutlierOptions(OutlierOptions object)
      {
        return createOutlierOptionsAdapter();
      }
      @Override
      public Adapter caseJoin(Join object)
      {
        return createJoinAdapter();
      }
      @Override
      public Adapter caseJoinSpec(JoinSpec object)
      {
        return createJoinSpecAdapter();
      }
      @Override
      public Adapter caseJoinConditions(JoinConditions object)
      {
        return createJoinConditionsAdapter();
      }
      @Override
      public Adapter caseJoinCondition(JoinCondition object)
      {
        return createJoinConditionAdapter();
      }
      @Override
      public Adapter caseJoinOptions(JoinOptions object)
      {
        return createJoinOptionsAdapter();
      }
      @Override
      public Adapter caseColumn(Column object)
      {
        return createColumnAdapter();
      }
      @Override
      public Adapter caseColumnList(ColumnList object)
      {
        return createColumnListAdapter();
      }
      @Override
      public Adapter caseRegex(Regex object)
      {
        return createRegexAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Workflow <em>Workflow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Workflow
   * @generated
   */
  public Adapter createWorkflowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.DataSource <em>Data Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.DataSource
   * @generated
   */
  public Adapter createDataSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.DataReader <em>Data Reader</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.DataReader
   * @generated
   */
  public Adapter createDataReaderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.CSVReader <em>CSV Reader</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.CSVReader
   * @generated
   */
  public Adapter createCSVReaderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.FileReader <em>File Reader</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.FileReader
   * @generated
   */
  public Adapter createFileReaderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.FilePath <em>File Path</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.FilePath
   * @generated
   */
  public Adapter createFilePathAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Delimiter <em>Delimiter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Delimiter
   * @generated
   */
  public Adapter createDelimiterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.WorkflowBody <em>Workflow Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.WorkflowBody
   * @generated
   */
  public Adapter createWorkflowBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Step <em>Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Step
   * @generated
   */
  public Adapter createStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.ContractBlock <em>Contract Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.ContractBlock
   * @generated
   */
  public Adapter createContractBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Contract <em>Contract</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Contract
   * @generated
   */
  public Adapter createContractAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Precondition <em>Precondition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Precondition
   * @generated
   */
  public Adapter createPreconditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Postcondition <em>Postcondition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Postcondition
   * @generated
   */
  public Adapter createPostconditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Invariant <em>Invariant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Invariant
   * @generated
   */
  public Adapter createInvariantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.ContractName <em>Contract Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.ContractName
   * @generated
   */
  public Adapter createContractNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.ContractBody <em>Contract Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.ContractBody
   * @generated
   */
  public Adapter createContractBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.ContractType <em>Contract Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.ContractType
   * @generated
   */
  public Adapter createContractTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.ValueRangeContract <em>Value Range Contract</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.ValueRangeContract
   * @generated
   */
  public Adapter createValueRangeContractAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.ContractField <em>Contract Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.ContractField
   * @generated
   */
  public Adapter createContractFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.ContractValue <em>Contract Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.ContractValue
   * @generated
   */
  public Adapter createContractValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.ConditionContract <em>Condition Contract</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.ConditionContract
   * @generated
   */
  public Adapter createConditionContractAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.IfClause <em>If Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.IfClause
   * @generated
   */
  public Adapter createIfClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.ThenClause <em>Then Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.ThenClause
   * @generated
   */
  public Adapter createThenClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.DataCondition <em>Data Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.DataCondition
   * @generated
   */
  public Adapter createDataConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.CastTypeCheck <em>Cast Type Check</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.CastTypeCheck
   * @generated
   */
  public Adapter createCastTypeCheckAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.ValueCheck <em>Value Check</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.ValueCheck
   * @generated
   */
  public Adapter createValueCheckAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.DataResult <em>Data Result</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.DataResult
   * @generated
   */
  public Adapter createDataResultAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.SpecialValueContract <em>Special Value Contract</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.SpecialValueContract
   * @generated
   */
  public Adapter createSpecialValueContractAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.CastTypeContract <em>Cast Type Contract</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.CastTypeContract
   * @generated
   */
  public Adapter createCastTypeContractAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Transformation <em>Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Transformation
   * @generated
   */
  public Adapter createTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.RowFilter <em>Row Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.RowFilter
   * @generated
   */
  public Adapter createRowFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.FilterCondition <em>Filter Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.FilterCondition
   * @generated
   */
  public Adapter createFilterConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.MissingFilter <em>Missing Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.MissingFilter
   * @generated
   */
  public Adapter createMissingFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.RangeFilter <em>Range Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.RangeFilter
   * @generated
   */
  public Adapter createRangeFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.RangeBounds <em>Range Bounds</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.RangeBounds
   * @generated
   */
  public Adapter createRangeBoundsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.BoundValue <em>Bound Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.BoundValue
   * @generated
   */
  public Adapter createBoundValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.StringFilter <em>String Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.StringFilter
   * @generated
   */
  public Adapter createStringFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Pattern <em>Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Pattern
   * @generated
   */
  public Adapter createPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.ColumnFilter <em>Column Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.ColumnFilter
   * @generated
   */
  public Adapter createColumnFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Mapping <em>Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Mapping
   * @generated
   */
  public Adapter createMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.ValueMapping <em>Value Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.ValueMapping
   * @generated
   */
  public Adapter createValueMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.MappingRules <em>Mapping Rules</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.MappingRules
   * @generated
   */
  public Adapter createMappingRulesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.MappingRule <em>Mapping Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.MappingRule
   * @generated
   */
  public Adapter createMappingRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.SubstringMapping <em>Substring Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.SubstringMapping
   * @generated
   */
  public Adapter createSubstringMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.MappingMode <em>Mapping Mode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.MappingMode
   * @generated
   */
  public Adapter createMappingModeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.MathOp <em>Math Op</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.MathOp
   * @generated
   */
  public Adapter createMathOpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.MathExpression <em>Math Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.MathExpression
   * @generated
   */
  public Adapter createMathExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Primary <em>Primary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Primary
   * @generated
   */
  public Adapter createPrimaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.FunctionCall <em>Function Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.FunctionCall
   * @generated
   */
  public Adapter createFunctionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Operand <em>Operand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Operand
   * @generated
   */
  public Adapter createOperandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Binner <em>Binner</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Binner
   * @generated
   */
  public Adapter createBinnerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.BinDefinitions <em>Bin Definitions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.BinDefinitions
   * @generated
   */
  public Adapter createBinDefinitionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.BinDef <em>Bin Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.BinDef
   * @generated
   */
  public Adapter createBinDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.BinName <em>Bin Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.BinName
   * @generated
   */
  public Adapter createBinNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Interval <em>Interval</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Interval
   * @generated
   */
  public Adapter createIntervalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.IntervalBound <em>Interval Bound</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.IntervalBound
   * @generated
   */
  public Adapter createIntervalBoundAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.BinMode <em>Bin Mode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.BinMode
   * @generated
   */
  public Adapter createBinModeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.TypeConversion <em>Type Conversion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.TypeConversion
   * @generated
   */
  public Adapter createTypeConversionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.DateFormat <em>Date Format</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.DateFormat
   * @generated
   */
  public Adapter createDateFormatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Imputation <em>Imputation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Imputation
   * @generated
   */
  public Adapter createImputationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.ImputeMethod <em>Impute Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.ImputeMethod
   * @generated
   */
  public Adapter createImputeMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.FixedImpute <em>Fixed Impute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.FixedImpute
   * @generated
   */
  public Adapter createFixedImputeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.ValueList <em>Value List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.ValueList
   * @generated
   */
  public Adapter createValueListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Value <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Value
   * @generated
   */
  public Adapter createValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.AdvancedImpute <em>Advanced Impute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.AdvancedImpute
   * @generated
   */
  public Adapter createAdvancedImputeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.OutlierTreatment <em>Outlier Treatment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.OutlierTreatment
   * @generated
   */
  public Adapter createOutlierTreatmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.OutlierStrategy <em>Outlier Strategy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.OutlierStrategy
   * @generated
   */
  public Adapter createOutlierStrategyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.ReplacementStrategy <em>Replacement Strategy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.ReplacementStrategy
   * @generated
   */
  public Adapter createReplacementStrategyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.DetectionMethod <em>Detection Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.DetectionMethod
   * @generated
   */
  public Adapter createDetectionMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.IQRMethod <em>IQR Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.IQRMethod
   * @generated
   */
  public Adapter createIQRMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.IQRParams <em>IQR Params</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.IQRParams
   * @generated
   */
  public Adapter createIQRParamsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.ZScoreMethod <em>ZScore Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.ZScoreMethod
   * @generated
   */
  public Adapter createZScoreMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.PercentileMethod <em>Percentile Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.PercentileMethod
   * @generated
   */
  public Adapter createPercentileMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.OutlierOptions <em>Outlier Options</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.OutlierOptions
   * @generated
   */
  public Adapter createOutlierOptionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Join <em>Join</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Join
   * @generated
   */
  public Adapter createJoinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.JoinSpec <em>Join Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.JoinSpec
   * @generated
   */
  public Adapter createJoinSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.JoinConditions <em>Join Conditions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.JoinConditions
   * @generated
   */
  public Adapter createJoinConditionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.JoinCondition <em>Join Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.JoinCondition
   * @generated
   */
  public Adapter createJoinConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.JoinOptions <em>Join Options</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.JoinOptions
   * @generated
   */
  public Adapter createJoinOptionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Column <em>Column</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Column
   * @generated
   */
  public Adapter createColumnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.ColumnList <em>Column List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.ColumnList
   * @generated
   */
  public Adapter createColumnListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.json.workflowDSL.Regex <em>Regex</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.json.workflowDSL.Regex
   * @generated
   */
  public Adapter createRegexAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //WorkflowDSLAdapterFactory
