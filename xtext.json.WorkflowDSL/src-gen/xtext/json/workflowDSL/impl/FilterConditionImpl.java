/**
 * generated by Xtext 2.40.0
 */
package xtext.json.workflowDSL.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import xtext.json.workflowDSL.FilterCondition;
import xtext.json.workflowDSL.WorkflowDSLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Filter Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.json.workflowDSL.impl.FilterConditionImpl#getIncludeExclude <em>Include Exclude</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FilterConditionImpl extends MinimalEObjectImpl.Container implements FilterCondition
{
  /**
   * The default value of the '{@link #getIncludeExclude() <em>Include Exclude</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncludeExclude()
   * @generated
   * @ordered
   */
  protected static final String INCLUDE_EXCLUDE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIncludeExclude() <em>Include Exclude</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncludeExclude()
   * @generated
   * @ordered
   */
  protected String includeExclude = INCLUDE_EXCLUDE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FilterConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowDSLPackage.Literals.FILTER_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIncludeExclude()
  {
    return includeExclude;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIncludeExclude(String newIncludeExclude)
  {
    String oldIncludeExclude = includeExclude;
    includeExclude = newIncludeExclude;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowDSLPackage.FILTER_CONDITION__INCLUDE_EXCLUDE, oldIncludeExclude, includeExclude));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowDSLPackage.FILTER_CONDITION__INCLUDE_EXCLUDE:
        return getIncludeExclude();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowDSLPackage.FILTER_CONDITION__INCLUDE_EXCLUDE:
        setIncludeExclude((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowDSLPackage.FILTER_CONDITION__INCLUDE_EXCLUDE:
        setIncludeExclude(INCLUDE_EXCLUDE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowDSLPackage.FILTER_CONDITION__INCLUDE_EXCLUDE:
        return INCLUDE_EXCLUDE_EDEFAULT == null ? includeExclude != null : !INCLUDE_EXCLUDE_EDEFAULT.equals(includeExclude);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (includeExclude: ");
    result.append(includeExclude);
    result.append(')');
    return result.toString();
  }

} //FilterConditionImpl
