/**
 * generated by Xtext 2.40.0
 */
package xtext.json.workflowDSL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import xtext.json.workflowDSL.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class WorkflowDSLFactoryImpl extends EFactoryImpl implements WorkflowDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static WorkflowDSLFactory init()
  {
    try
    {
      WorkflowDSLFactory theWorkflowDSLFactory = (WorkflowDSLFactory)EPackage.Registry.INSTANCE.getEFactory(WorkflowDSLPackage.eNS_URI);
      if (theWorkflowDSLFactory != null)
      {
        return theWorkflowDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new WorkflowDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WorkflowDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case WorkflowDSLPackage.WORKFLOW: return createWorkflow();
      case WorkflowDSLPackage.DATA_SOURCE: return createDataSource();
      case WorkflowDSLPackage.DATA_READER: return createDataReader();
      case WorkflowDSLPackage.CSV_READER: return createCSVReader();
      case WorkflowDSLPackage.FILE_READER: return createFileReader();
      case WorkflowDSLPackage.FILE_PATH: return createFilePath();
      case WorkflowDSLPackage.DELIMITER: return createDelimiter();
      case WorkflowDSLPackage.WORKFLOW_BODY: return createWorkflowBody();
      case WorkflowDSLPackage.STEP: return createStep();
      case WorkflowDSLPackage.CONTRACT_BLOCK: return createContractBlock();
      case WorkflowDSLPackage.CONTRACT: return createContract();
      case WorkflowDSLPackage.PRECONDITION: return createPrecondition();
      case WorkflowDSLPackage.POSTCONDITION: return createPostcondition();
      case WorkflowDSLPackage.INVARIANT: return createInvariant();
      case WorkflowDSLPackage.CONTRACT_NAME: return createContractName();
      case WorkflowDSLPackage.CONTRACT_BODY: return createContractBody();
      case WorkflowDSLPackage.CONTRACT_TYPE: return createContractType();
      case WorkflowDSLPackage.VALUE_RANGE_CONTRACT: return createValueRangeContract();
      case WorkflowDSLPackage.CONTRACT_FIELD: return createContractField();
      case WorkflowDSLPackage.CONTRACT_VALUE: return createContractValue();
      case WorkflowDSLPackage.CONDITION_CONTRACT: return createConditionContract();
      case WorkflowDSLPackage.IF_CLAUSE: return createIfClause();
      case WorkflowDSLPackage.THEN_CLAUSE: return createThenClause();
      case WorkflowDSLPackage.DATA_CONDITION: return createDataCondition();
      case WorkflowDSLPackage.CAST_TYPE_CHECK: return createCastTypeCheck();
      case WorkflowDSLPackage.VALUE_CHECK: return createValueCheck();
      case WorkflowDSLPackage.DATA_RESULT: return createDataResult();
      case WorkflowDSLPackage.SPECIAL_VALUE_CONTRACT: return createSpecialValueContract();
      case WorkflowDSLPackage.CAST_TYPE_CONTRACT: return createCastTypeContract();
      case WorkflowDSLPackage.TRANSFORMATION: return createTransformation();
      case WorkflowDSLPackage.ROW_FILTER: return createRowFilter();
      case WorkflowDSLPackage.FILTER_CONDITION: return createFilterCondition();
      case WorkflowDSLPackage.MISSING_FILTER: return createMissingFilter();
      case WorkflowDSLPackage.RANGE_FILTER: return createRangeFilter();
      case WorkflowDSLPackage.RANGE_BOUNDS: return createRangeBounds();
      case WorkflowDSLPackage.BOUND_VALUE: return createBoundValue();
      case WorkflowDSLPackage.STRING_FILTER: return createStringFilter();
      case WorkflowDSLPackage.PATTERN: return createPattern();
      case WorkflowDSLPackage.COLUMN_FILTER: return createColumnFilter();
      case WorkflowDSLPackage.MAPPING: return createMapping();
      case WorkflowDSLPackage.VALUE_MAPPING: return createValueMapping();
      case WorkflowDSLPackage.MAPPING_RULES: return createMappingRules();
      case WorkflowDSLPackage.MAPPING_RULE: return createMappingRule();
      case WorkflowDSLPackage.SUBSTRING_MAPPING: return createSubstringMapping();
      case WorkflowDSLPackage.MAPPING_MODE: return createMappingMode();
      case WorkflowDSLPackage.MATH_OP: return createMathOp();
      case WorkflowDSLPackage.MATH_EXPRESSION: return createMathExpression();
      case WorkflowDSLPackage.PRIMARY: return createPrimary();
      case WorkflowDSLPackage.FUNCTION_CALL: return createFunctionCall();
      case WorkflowDSLPackage.OPERAND: return createOperand();
      case WorkflowDSLPackage.BINNER: return createBinner();
      case WorkflowDSLPackage.BIN_DEFINITIONS: return createBinDefinitions();
      case WorkflowDSLPackage.BIN_DEF: return createBinDef();
      case WorkflowDSLPackage.BIN_NAME: return createBinName();
      case WorkflowDSLPackage.INTERVAL: return createInterval();
      case WorkflowDSLPackage.INTERVAL_BOUND: return createIntervalBound();
      case WorkflowDSLPackage.BIN_MODE: return createBinMode();
      case WorkflowDSLPackage.TYPE_CONVERSION: return createTypeConversion();
      case WorkflowDSLPackage.DATE_FORMAT: return createDateFormat();
      case WorkflowDSLPackage.IMPUTATION: return createImputation();
      case WorkflowDSLPackage.IMPUTE_METHOD: return createImputeMethod();
      case WorkflowDSLPackage.FIXED_IMPUTE: return createFixedImpute();
      case WorkflowDSLPackage.VALUE_LIST: return createValueList();
      case WorkflowDSLPackage.VALUE: return createValue();
      case WorkflowDSLPackage.ADVANCED_IMPUTE: return createAdvancedImpute();
      case WorkflowDSLPackage.OUTLIER_TREATMENT: return createOutlierTreatment();
      case WorkflowDSLPackage.OUTLIER_STRATEGY: return createOutlierStrategy();
      case WorkflowDSLPackage.REPLACEMENT_STRATEGY: return createReplacementStrategy();
      case WorkflowDSLPackage.DETECTION_METHOD: return createDetectionMethod();
      case WorkflowDSLPackage.IQR_METHOD: return createIQRMethod();
      case WorkflowDSLPackage.IQR_PARAMS: return createIQRParams();
      case WorkflowDSLPackage.ZSCORE_METHOD: return createZScoreMethod();
      case WorkflowDSLPackage.PERCENTILE_METHOD: return createPercentileMethod();
      case WorkflowDSLPackage.OUTLIER_OPTIONS: return createOutlierOptions();
      case WorkflowDSLPackage.JOIN: return createJoin();
      case WorkflowDSLPackage.JOIN_SPEC: return createJoinSpec();
      case WorkflowDSLPackage.JOIN_CONDITIONS: return createJoinConditions();
      case WorkflowDSLPackage.JOIN_CONDITION: return createJoinCondition();
      case WorkflowDSLPackage.JOIN_OPTIONS: return createJoinOptions();
      case WorkflowDSLPackage.COLUMN: return createColumn();
      case WorkflowDSLPackage.COLUMN_LIST: return createColumnList();
      case WorkflowDSLPackage.REGEX: return createRegex();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Workflow createWorkflow()
  {
    WorkflowImpl workflow = new WorkflowImpl();
    return workflow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataSource createDataSource()
  {
    DataSourceImpl dataSource = new DataSourceImpl();
    return dataSource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataReader createDataReader()
  {
    DataReaderImpl dataReader = new DataReaderImpl();
    return dataReader;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CSVReader createCSVReader()
  {
    CSVReaderImpl csvReader = new CSVReaderImpl();
    return csvReader;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FileReader createFileReader()
  {
    FileReaderImpl fileReader = new FileReaderImpl();
    return fileReader;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FilePath createFilePath()
  {
    FilePathImpl filePath = new FilePathImpl();
    return filePath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Delimiter createDelimiter()
  {
    DelimiterImpl delimiter = new DelimiterImpl();
    return delimiter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WorkflowBody createWorkflowBody()
  {
    WorkflowBodyImpl workflowBody = new WorkflowBodyImpl();
    return workflowBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Step createStep()
  {
    StepImpl step = new StepImpl();
    return step;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContractBlock createContractBlock()
  {
    ContractBlockImpl contractBlock = new ContractBlockImpl();
    return contractBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Contract createContract()
  {
    ContractImpl contract = new ContractImpl();
    return contract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Precondition createPrecondition()
  {
    PreconditionImpl precondition = new PreconditionImpl();
    return precondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Postcondition createPostcondition()
  {
    PostconditionImpl postcondition = new PostconditionImpl();
    return postcondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Invariant createInvariant()
  {
    InvariantImpl invariant = new InvariantImpl();
    return invariant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContractName createContractName()
  {
    ContractNameImpl contractName = new ContractNameImpl();
    return contractName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContractBody createContractBody()
  {
    ContractBodyImpl contractBody = new ContractBodyImpl();
    return contractBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContractType createContractType()
  {
    ContractTypeImpl contractType = new ContractTypeImpl();
    return contractType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueRangeContract createValueRangeContract()
  {
    ValueRangeContractImpl valueRangeContract = new ValueRangeContractImpl();
    return valueRangeContract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContractField createContractField()
  {
    ContractFieldImpl contractField = new ContractFieldImpl();
    return contractField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContractValue createContractValue()
  {
    ContractValueImpl contractValue = new ContractValueImpl();
    return contractValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionContract createConditionContract()
  {
    ConditionContractImpl conditionContract = new ConditionContractImpl();
    return conditionContract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfClause createIfClause()
  {
    IfClauseImpl ifClause = new IfClauseImpl();
    return ifClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ThenClause createThenClause()
  {
    ThenClauseImpl thenClause = new ThenClauseImpl();
    return thenClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataCondition createDataCondition()
  {
    DataConditionImpl dataCondition = new DataConditionImpl();
    return dataCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CastTypeCheck createCastTypeCheck()
  {
    CastTypeCheckImpl castTypeCheck = new CastTypeCheckImpl();
    return castTypeCheck;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueCheck createValueCheck()
  {
    ValueCheckImpl valueCheck = new ValueCheckImpl();
    return valueCheck;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataResult createDataResult()
  {
    DataResultImpl dataResult = new DataResultImpl();
    return dataResult;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpecialValueContract createSpecialValueContract()
  {
    SpecialValueContractImpl specialValueContract = new SpecialValueContractImpl();
    return specialValueContract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CastTypeContract createCastTypeContract()
  {
    CastTypeContractImpl castTypeContract = new CastTypeContractImpl();
    return castTypeContract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Transformation createTransformation()
  {
    TransformationImpl transformation = new TransformationImpl();
    return transformation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RowFilter createRowFilter()
  {
    RowFilterImpl rowFilter = new RowFilterImpl();
    return rowFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FilterCondition createFilterCondition()
  {
    FilterConditionImpl filterCondition = new FilterConditionImpl();
    return filterCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MissingFilter createMissingFilter()
  {
    MissingFilterImpl missingFilter = new MissingFilterImpl();
    return missingFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RangeFilter createRangeFilter()
  {
    RangeFilterImpl rangeFilter = new RangeFilterImpl();
    return rangeFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RangeBounds createRangeBounds()
  {
    RangeBoundsImpl rangeBounds = new RangeBoundsImpl();
    return rangeBounds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoundValue createBoundValue()
  {
    BoundValueImpl boundValue = new BoundValueImpl();
    return boundValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringFilter createStringFilter()
  {
    StringFilterImpl stringFilter = new StringFilterImpl();
    return stringFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pattern createPattern()
  {
    PatternImpl pattern = new PatternImpl();
    return pattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColumnFilter createColumnFilter()
  {
    ColumnFilterImpl columnFilter = new ColumnFilterImpl();
    return columnFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mapping createMapping()
  {
    MappingImpl mapping = new MappingImpl();
    return mapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueMapping createValueMapping()
  {
    ValueMappingImpl valueMapping = new ValueMappingImpl();
    return valueMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappingRules createMappingRules()
  {
    MappingRulesImpl mappingRules = new MappingRulesImpl();
    return mappingRules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappingRule createMappingRule()
  {
    MappingRuleImpl mappingRule = new MappingRuleImpl();
    return mappingRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubstringMapping createSubstringMapping()
  {
    SubstringMappingImpl substringMapping = new SubstringMappingImpl();
    return substringMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappingMode createMappingMode()
  {
    MappingModeImpl mappingMode = new MappingModeImpl();
    return mappingMode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathOp createMathOp()
  {
    MathOpImpl mathOp = new MathOpImpl();
    return mathOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathExpression createMathExpression()
  {
    MathExpressionImpl mathExpression = new MathExpressionImpl();
    return mathExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Primary createPrimary()
  {
    PrimaryImpl primary = new PrimaryImpl();
    return primary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionCall createFunctionCall()
  {
    FunctionCallImpl functionCall = new FunctionCallImpl();
    return functionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operand createOperand()
  {
    OperandImpl operand = new OperandImpl();
    return operand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Binner createBinner()
  {
    BinnerImpl binner = new BinnerImpl();
    return binner;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BinDefinitions createBinDefinitions()
  {
    BinDefinitionsImpl binDefinitions = new BinDefinitionsImpl();
    return binDefinitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BinDef createBinDef()
  {
    BinDefImpl binDef = new BinDefImpl();
    return binDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BinName createBinName()
  {
    BinNameImpl binName = new BinNameImpl();
    return binName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interval createInterval()
  {
    IntervalImpl interval = new IntervalImpl();
    return interval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntervalBound createIntervalBound()
  {
    IntervalBoundImpl intervalBound = new IntervalBoundImpl();
    return intervalBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BinMode createBinMode()
  {
    BinModeImpl binMode = new BinModeImpl();
    return binMode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeConversion createTypeConversion()
  {
    TypeConversionImpl typeConversion = new TypeConversionImpl();
    return typeConversion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DateFormat createDateFormat()
  {
    DateFormatImpl dateFormat = new DateFormatImpl();
    return dateFormat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Imputation createImputation()
  {
    ImputationImpl imputation = new ImputationImpl();
    return imputation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImputeMethod createImputeMethod()
  {
    ImputeMethodImpl imputeMethod = new ImputeMethodImpl();
    return imputeMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FixedImpute createFixedImpute()
  {
    FixedImputeImpl fixedImpute = new FixedImputeImpl();
    return fixedImpute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueList createValueList()
  {
    ValueListImpl valueList = new ValueListImpl();
    return valueList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AdvancedImpute createAdvancedImpute()
  {
    AdvancedImputeImpl advancedImpute = new AdvancedImputeImpl();
    return advancedImpute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutlierTreatment createOutlierTreatment()
  {
    OutlierTreatmentImpl outlierTreatment = new OutlierTreatmentImpl();
    return outlierTreatment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutlierStrategy createOutlierStrategy()
  {
    OutlierStrategyImpl outlierStrategy = new OutlierStrategyImpl();
    return outlierStrategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReplacementStrategy createReplacementStrategy()
  {
    ReplacementStrategyImpl replacementStrategy = new ReplacementStrategyImpl();
    return replacementStrategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DetectionMethod createDetectionMethod()
  {
    DetectionMethodImpl detectionMethod = new DetectionMethodImpl();
    return detectionMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IQRMethod createIQRMethod()
  {
    IQRMethodImpl iqrMethod = new IQRMethodImpl();
    return iqrMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IQRParams createIQRParams()
  {
    IQRParamsImpl iqrParams = new IQRParamsImpl();
    return iqrParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ZScoreMethod createZScoreMethod()
  {
    ZScoreMethodImpl zScoreMethod = new ZScoreMethodImpl();
    return zScoreMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PercentileMethod createPercentileMethod()
  {
    PercentileMethodImpl percentileMethod = new PercentileMethodImpl();
    return percentileMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutlierOptions createOutlierOptions()
  {
    OutlierOptionsImpl outlierOptions = new OutlierOptionsImpl();
    return outlierOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Join createJoin()
  {
    JoinImpl join = new JoinImpl();
    return join;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JoinSpec createJoinSpec()
  {
    JoinSpecImpl joinSpec = new JoinSpecImpl();
    return joinSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JoinConditions createJoinConditions()
  {
    JoinConditionsImpl joinConditions = new JoinConditionsImpl();
    return joinConditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JoinCondition createJoinCondition()
  {
    JoinConditionImpl joinCondition = new JoinConditionImpl();
    return joinCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JoinOptions createJoinOptions()
  {
    JoinOptionsImpl joinOptions = new JoinOptionsImpl();
    return joinOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Column createColumn()
  {
    ColumnImpl column = new ColumnImpl();
    return column;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColumnList createColumnList()
  {
    ColumnListImpl columnList = new ColumnListImpl();
    return columnList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Regex createRegex()
  {
    RegexImpl regex = new RegexImpl();
    return regex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WorkflowDSLPackage getWorkflowDSLPackage()
  {
    return (WorkflowDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static WorkflowDSLPackage getPackage()
  {
    return WorkflowDSLPackage.eINSTANCE;
  }

} //WorkflowDSLFactoryImpl
