/**
 * generated by Xtext 2.40.0
 */
package xtext.json.workflowDSL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xtext.json.workflowDSL.ColumnList;
import xtext.json.workflowDSL.Imputation;
import xtext.json.workflowDSL.ImputeMethod;
import xtext.json.workflowDSL.WorkflowDSLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Imputation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.json.workflowDSL.impl.ImputationImpl#getColumns <em>Columns</em>}</li>
 *   <li>{@link xtext.json.workflowDSL.impl.ImputationImpl#getMethod <em>Method</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ImputationImpl extends TransformationImpl implements Imputation
{
  /**
   * The cached value of the '{@link #getColumns() <em>Columns</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumns()
   * @generated
   * @ordered
   */
  protected ColumnList columns;

  /**
   * The cached value of the '{@link #getMethod() <em>Method</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethod()
   * @generated
   * @ordered
   */
  protected ImputeMethod method;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImputationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowDSLPackage.Literals.IMPUTATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColumnList getColumns()
  {
    return columns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetColumns(ColumnList newColumns, NotificationChain msgs)
  {
    ColumnList oldColumns = columns;
    columns = newColumns;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WorkflowDSLPackage.IMPUTATION__COLUMNS, oldColumns, newColumns);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColumns(ColumnList newColumns)
  {
    if (newColumns != columns)
    {
      NotificationChain msgs = null;
      if (columns != null)
        msgs = ((InternalEObject)columns).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WorkflowDSLPackage.IMPUTATION__COLUMNS, null, msgs);
      if (newColumns != null)
        msgs = ((InternalEObject)newColumns).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WorkflowDSLPackage.IMPUTATION__COLUMNS, null, msgs);
      msgs = basicSetColumns(newColumns, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowDSLPackage.IMPUTATION__COLUMNS, newColumns, newColumns));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImputeMethod getMethod()
  {
    return method;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMethod(ImputeMethod newMethod, NotificationChain msgs)
  {
    ImputeMethod oldMethod = method;
    method = newMethod;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WorkflowDSLPackage.IMPUTATION__METHOD, oldMethod, newMethod);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMethod(ImputeMethod newMethod)
  {
    if (newMethod != method)
    {
      NotificationChain msgs = null;
      if (method != null)
        msgs = ((InternalEObject)method).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WorkflowDSLPackage.IMPUTATION__METHOD, null, msgs);
      if (newMethod != null)
        msgs = ((InternalEObject)newMethod).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WorkflowDSLPackage.IMPUTATION__METHOD, null, msgs);
      msgs = basicSetMethod(newMethod, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowDSLPackage.IMPUTATION__METHOD, newMethod, newMethod));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WorkflowDSLPackage.IMPUTATION__COLUMNS:
        return basicSetColumns(null, msgs);
      case WorkflowDSLPackage.IMPUTATION__METHOD:
        return basicSetMethod(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowDSLPackage.IMPUTATION__COLUMNS:
        return getColumns();
      case WorkflowDSLPackage.IMPUTATION__METHOD:
        return getMethod();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowDSLPackage.IMPUTATION__COLUMNS:
        setColumns((ColumnList)newValue);
        return;
      case WorkflowDSLPackage.IMPUTATION__METHOD:
        setMethod((ImputeMethod)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowDSLPackage.IMPUTATION__COLUMNS:
        setColumns((ColumnList)null);
        return;
      case WorkflowDSLPackage.IMPUTATION__METHOD:
        setMethod((ImputeMethod)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowDSLPackage.IMPUTATION__COLUMNS:
        return columns != null;
      case WorkflowDSLPackage.IMPUTATION__METHOD:
        return method != null;
    }
    return super.eIsSet(featureID);
  }

} //ImputationImpl
