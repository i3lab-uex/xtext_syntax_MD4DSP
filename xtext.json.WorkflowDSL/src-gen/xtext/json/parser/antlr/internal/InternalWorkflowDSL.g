/*
 * generated by Xtext 2.40.0
 */
grammar InternalWorkflowDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package xtext.json.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xtext.json.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import xtext.json.services.WorkflowDSLGrammarAccess;

}

@parser::members {

 	private WorkflowDSLGrammarAccess grammarAccess;

    public InternalWorkflowDSLParser(TokenStream input, WorkflowDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Workflow";
   	}

   	@Override
   	protected WorkflowDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleWorkflow
entryRuleWorkflow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkflowRule()); }
	iv_ruleWorkflow=ruleWorkflow
	{ $current=$iv_ruleWorkflow.current; }
	EOF;

// Rule Workflow
ruleWorkflow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='workflow'
		{
			newLeafNode(otherlv_0, grammarAccess.getWorkflowAccess().getWorkflowKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getWorkflowAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkflowRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getWorkflowAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowAccess().getSourceDataSourceParserRuleCall_3_0());
				}
				lv_source_3_0=ruleDataSource
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowRule());
					}
					set(
						$current,
						"source",
						lv_source_3_0,
						"xtext.json.WorkflowDSL.DataSource");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowAccess().getBodyWorkflowBodyParserRuleCall_4_0());
				}
				lv_body_4_0=ruleWorkflowBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowRule());
					}
					set(
						$current,
						"body",
						lv_body_4_0,
						"xtext.json.WorkflowDSL.WorkflowBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getWorkflowAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleDataSource
entryRuleDataSource returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataSourceRule()); }
	iv_ruleDataSource=ruleDataSource
	{ $current=$iv_ruleDataSource.current; }
	EOF;

// Rule DataSource
ruleDataSource returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='source'
		{
			newLeafNode(otherlv_0, grammarAccess.getDataSourceAccess().getSourceKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDataSourceAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataSourceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getDataSourceAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDataSourceAccess().getReaderDataReaderParserRuleCall_3_0());
				}
				lv_reader_3_0=ruleDataReader
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDataSourceRule());
					}
					set(
						$current,
						"reader",
						lv_reader_3_0,
						"xtext.json.WorkflowDSL.DataReader");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDataReader
entryRuleDataReader returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataReaderRule()); }
	iv_ruleDataReader=ruleDataReader
	{ $current=$iv_ruleDataReader.current; }
	EOF;

// Rule DataReader
ruleDataReader returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDataReaderAccess().getCSVReaderParserRuleCall_0());
		}
		this_CSVReader_0=ruleCSVReader
		{
			$current = $this_CSVReader_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataReaderAccess().getFileReaderParserRuleCall_1());
		}
		this_FileReader_1=ruleFileReader
		{
			$current = $this_FileReader_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCSVReader
entryRuleCSVReader returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCSVReaderRule()); }
	iv_ruleCSVReader=ruleCSVReader
	{ $current=$iv_ruleCSVReader.current; }
	EOF;

// Rule CSVReader
ruleCSVReader returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='read_csv'
		{
			newLeafNode(otherlv_0, grammarAccess.getCSVReaderAccess().getRead_csvKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCSVReaderAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCSVReaderAccess().getFilePathFilePathParserRuleCall_2_0());
				}
				lv_filePath_2_0=ruleFilePath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCSVReaderRule());
					}
					set(
						$current,
						"filePath",
						lv_filePath_2_0,
						"xtext.json.WorkflowDSL.FilePath");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getCSVReaderAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCSVReaderAccess().getDelimiterDelimiterParserRuleCall_3_1_0());
					}
					lv_delimiter_4_0=ruleDelimiter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCSVReaderRule());
						}
						set(
							$current,
							"delimiter",
							lv_delimiter_4_0,
							"xtext.json.WorkflowDSL.Delimiter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getCSVReaderAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleFileReader
entryRuleFileReader returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileReaderRule()); }
	iv_ruleFileReader=ruleFileReader
	{ $current=$iv_ruleFileReader.current; }
	EOF;

// Rule FileReader
ruleFileReader returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='read_file'
		{
			newLeafNode(otherlv_0, grammarAccess.getFileReaderAccess().getRead_fileKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFileReaderAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFileReaderAccess().getFilePathFilePathParserRuleCall_2_0());
				}
				lv_filePath_2_0=ruleFilePath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFileReaderRule());
					}
					set(
						$current,
						"filePath",
						lv_filePath_2_0,
						"xtext.json.WorkflowDSL.FilePath");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFileReaderAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFilePath
entryRuleFilePath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilePathRule()); }
	iv_ruleFilePath=ruleFilePath
	{ $current=$iv_ruleFilePath.current; }
	EOF;

// Rule FilePath
ruleFilePath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_path_0_0=RULE_STRING
			{
				newLeafNode(lv_path_0_0, grammarAccess.getFilePathAccess().getPathSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFilePathRule());
				}
				setWithLastConsumed(
					$current,
					"path",
					lv_path_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleDelimiter
entryRuleDelimiter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDelimiterRule()); }
	iv_ruleDelimiter=ruleDelimiter
	{ $current=$iv_ruleDelimiter.current; }
	EOF;

// Rule Delimiter
ruleDelimiter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=','
		{
			newLeafNode(otherlv_0, grammarAccess.getDelimiterAccess().getCommaKeyword_0());
		}
		    |
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getDelimiterAccess().getSemicolonKeyword_1());
		}
		    |
		otherlv_2='\t'
		{
			newLeafNode(otherlv_2, grammarAccess.getDelimiterAccess().getTabKeyword_2());
		}
		    |
		otherlv_3='|'
		{
			newLeafNode(otherlv_3, grammarAccess.getDelimiterAccess().getVerticalLineKeyword_3());
		}
		    |
		(
			(
				lv_value_4_0=RULE_STRING
				{
					newLeafNode(lv_value_4_0, grammarAccess.getDelimiterAccess().getValueSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDelimiterRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleWorkflowBody
entryRuleWorkflowBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkflowBodyRule()); }
	iv_ruleWorkflowBody=ruleWorkflowBody
	{ $current=$iv_ruleWorkflowBody.current; }
	EOF;

// Rule WorkflowBody
ruleWorkflowBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getWorkflowBodyAccess().getStepsStepParserRuleCall_0());
			}
			lv_steps_0_0=ruleStep
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getWorkflowBodyRule());
				}
				add(
					$current,
					"steps",
					lv_steps_0_0,
					"xtext.json.WorkflowDSL.Step");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStep
entryRuleStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStepRule()); }
	iv_ruleStep=ruleStep
	{ $current=$iv_ruleStep.current; }
	EOF;

// Rule Step
ruleStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getStepAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStepRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getStepAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStepAccess().getTransformationTransformationParserRuleCall_2_0());
				}
				lv_transformation_2_0=ruleTransformation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStepRule());
					}
					set(
						$current,
						"transformation",
						lv_transformation_2_0,
						"xtext.json.WorkflowDSL.Transformation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='|>'
			{
				newLeafNode(otherlv_3, grammarAccess.getStepAccess().getVerticalLineGreaterThanSignKeyword_3_0());
			}
			(
				(
					lv_target_4_0=RULE_ID
					{
						newLeafNode(lv_target_4_0, grammarAccess.getStepAccess().getTargetIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStepRule());
						}
						setWithLastConsumed(
							$current,
							"target",
							lv_target_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStepAccess().getContractsContractBlockParserRuleCall_4_0());
				}
				lv_contracts_5_0=ruleContractBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStepRule());
					}
					set(
						$current,
						"contracts",
						lv_contracts_5_0,
						"xtext.json.WorkflowDSL.ContractBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleContractBlock
entryRuleContractBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContractBlockRule()); }
	iv_ruleContractBlock=ruleContractBlock
	{ $current=$iv_ruleContractBlock.current; }
	EOF;

// Rule ContractBlock
ruleContractBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='contracts'
		{
			newLeafNode(otherlv_0, grammarAccess.getContractBlockAccess().getContractsKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getContractBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContractBlockAccess().getContractsContractParserRuleCall_2_0());
				}
				lv_contracts_2_0=ruleContract
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractBlockRule());
					}
					add(
						$current,
						"contracts",
						lv_contracts_2_0,
						"xtext.json.WorkflowDSL.Contract");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getContractBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleContract
entryRuleContract returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContractRule()); }
	iv_ruleContract=ruleContract
	{ $current=$iv_ruleContract.current; }
	EOF;

// Rule Contract
ruleContract returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getContractAccess().getPreconditionParserRuleCall_0());
		}
		this_Precondition_0=rulePrecondition
		{
			$current = $this_Precondition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getContractAccess().getPostconditionParserRuleCall_1());
		}
		this_Postcondition_1=rulePostcondition
		{
			$current = $this_Postcondition_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getContractAccess().getInvariantParserRuleCall_2());
		}
		this_Invariant_2=ruleInvariant
		{
			$current = $this_Invariant_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrecondition
entryRulePrecondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPreconditionRule()); }
	iv_rulePrecondition=rulePrecondition
	{ $current=$iv_rulePrecondition.current; }
	EOF;

// Rule Precondition
rulePrecondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='precondition'
		{
			newLeafNode(otherlv_0, grammarAccess.getPreconditionAccess().getPreconditionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPreconditionAccess().getNameContractNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleContractName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPreconditionRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"xtext.json.WorkflowDSL.ContractName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPreconditionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPreconditionAccess().getBodyContractBodyParserRuleCall_3_0());
				}
				lv_body_3_0=ruleContractBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPreconditionRule());
					}
					set(
						$current,
						"body",
						lv_body_3_0,
						"xtext.json.WorkflowDSL.ContractBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getPreconditionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRulePostcondition
entryRulePostcondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPostconditionRule()); }
	iv_rulePostcondition=rulePostcondition
	{ $current=$iv_rulePostcondition.current; }
	EOF;

// Rule Postcondition
rulePostcondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='postcondition'
		{
			newLeafNode(otherlv_0, grammarAccess.getPostconditionAccess().getPostconditionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPostconditionAccess().getNameContractNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleContractName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPostconditionRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"xtext.json.WorkflowDSL.ContractName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPostconditionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPostconditionAccess().getBodyContractBodyParserRuleCall_3_0());
				}
				lv_body_3_0=ruleContractBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPostconditionRule());
					}
					set(
						$current,
						"body",
						lv_body_3_0,
						"xtext.json.WorkflowDSL.ContractBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getPostconditionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleInvariant
entryRuleInvariant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInvariantRule()); }
	iv_ruleInvariant=ruleInvariant
	{ $current=$iv_ruleInvariant.current; }
	EOF;

// Rule Invariant
ruleInvariant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='invariant'
		{
			newLeafNode(otherlv_0, grammarAccess.getInvariantAccess().getInvariantKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInvariantAccess().getNameContractNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleContractName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInvariantRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"xtext.json.WorkflowDSL.ContractName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getInvariantAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInvariantAccess().getBodyContractBodyParserRuleCall_3_0());
				}
				lv_body_3_0=ruleContractBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInvariantRule());
					}
					set(
						$current,
						"body",
						lv_body_3_0,
						"xtext.json.WorkflowDSL.ContractBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getInvariantAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleContractName
entryRuleContractName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContractNameRule()); }
	iv_ruleContractName=ruleContractName
	{ $current=$iv_ruleContractName.current; }
	EOF;

// Rule ContractName
ruleContractName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_STRING
				{
					newLeafNode(lv_name_0_0, grammarAccess.getContractNameAccess().getNameSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContractNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getContractNameAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContractNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleContractBody
entryRuleContractBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContractBodyRule()); }
	iv_ruleContractBody=ruleContractBody
	{ $current=$iv_ruleContractBody.current; }
	EOF;

// Rule ContractBody
ruleContractBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getContractBodyAccess().getTypeContractTypeParserRuleCall_0());
			}
			lv_type_0_0=ruleContractType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getContractBodyRule());
				}
				set(
					$current,
					"type",
					lv_type_0_0,
					"xtext.json.WorkflowDSL.ContractType");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleContractType
entryRuleContractType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContractTypeRule()); }
	iv_ruleContractType=ruleContractType
	{ $current=$iv_ruleContractType.current; }
	EOF;

// Rule ContractType
ruleContractType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getContractTypeAccess().getValueRangeContractParserRuleCall_0());
		}
		this_ValueRangeContract_0=ruleValueRangeContract
		{
			$current = $this_ValueRangeContract_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getContractTypeAccess().getConditionContractParserRuleCall_1());
		}
		this_ConditionContract_1=ruleConditionContract
		{
			$current = $this_ConditionContract_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getContractTypeAccess().getSpecialValueContractParserRuleCall_2());
		}
		this_SpecialValueContract_2=ruleSpecialValueContract
		{
			$current = $this_SpecialValueContract_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getContractTypeAccess().getCastTypeContractParserRuleCall_3());
		}
		this_CastTypeContract_3=ruleCastTypeContract
		{
			$current = $this_CastTypeContract_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleValueRangeContract
entryRuleValueRangeContract returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRangeContractRule()); }
	iv_ruleValueRangeContract=ruleValueRangeContract
	{ $current=$iv_ruleValueRangeContract.current; }
	EOF;

// Rule ValueRangeContract
ruleValueRangeContract returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='value_range'
		{
			newLeafNode(otherlv_0, grammarAccess.getValueRangeContractAccess().getValue_rangeKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getValueRangeContractAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueRangeContractAccess().getFieldContractFieldParserRuleCall_2_0());
				}
				lv_field_2_0=ruleContractField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRangeContractRule());
					}
					set(
						$current,
						"field",
						lv_field_2_0,
						"xtext.json.WorkflowDSL.ContractField");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getValueRangeContractAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueRangeContractAccess().getValueContractValueParserRuleCall_4_0());
				}
				lv_value_4_0=ruleContractValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRangeContractRule());
					}
					set(
						$current,
						"value",
						lv_value_4_0,
						"xtext.json.WorkflowDSL.ContractValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getValueRangeContractAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleContractField
entryRuleContractField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContractFieldRule()); }
	iv_ruleContractField=ruleContractField
	{ $current=$iv_ruleContractField.current; }
	EOF;

// Rule ContractField
ruleContractField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='input'
			{
				newLeafNode(otherlv_0, grammarAccess.getContractFieldAccess().getInputKeyword_0_0());
			}
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getContractFieldAccess().getFullStopKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getContractFieldAccess().getColumnColumnParserRuleCall_0_2_0());
					}
					lv_column_2_0=ruleColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContractFieldRule());
						}
						set(
							$current,
							"column",
							lv_column_2_0,
							"xtext.json.WorkflowDSL.Column");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_3='output'
			{
				newLeafNode(otherlv_3, grammarAccess.getContractFieldAccess().getOutputKeyword_1_0());
			}
			otherlv_4='.'
			{
				newLeafNode(otherlv_4, grammarAccess.getContractFieldAccess().getFullStopKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getContractFieldAccess().getColumnColumnParserRuleCall_1_2_0());
					}
					lv_column_5_0=ruleColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContractFieldRule());
						}
						set(
							$current,
							"column",
							lv_column_5_0,
							"xtext.json.WorkflowDSL.Column");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleContractValue
entryRuleContractValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContractValueRule()); }
	iv_ruleContractValue=ruleContractValue
	{ $current=$iv_ruleContractValue.current; }
	EOF;

// Rule ContractValue
ruleContractValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='castable_to'
			{
				newLeafNode(otherlv_0, grammarAccess.getContractValueAccess().getCastable_toKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getContractValueAccess().getTypeTypeParserRuleCall_0_1_0());
					}
					lv_type_1_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContractValueRule());
						}
						set(
							$current,
							"type",
							lv_type_1_0,
							"xtext.json.WorkflowDSL.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_2='in_range'
			{
				newLeafNode(otherlv_2, grammarAccess.getContractValueAccess().getIn_rangeKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getContractValueAccess().getBoundsRangeBoundsParserRuleCall_1_1_0());
					}
					lv_bounds_3_0=ruleRangeBounds
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContractValueRule());
						}
						set(
							$current,
							"bounds",
							lv_bounds_3_0,
							"xtext.json.WorkflowDSL.RangeBounds");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_4='matches'
			{
				newLeafNode(otherlv_4, grammarAccess.getContractValueAccess().getMatchesKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getContractValueAccess().getValueValueParserRuleCall_2_1_0());
					}
					lv_value_5_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContractValueRule());
						}
						set(
							$current,
							"value",
							lv_value_5_0,
							"xtext.json.WorkflowDSL.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Integer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getIntegerKeyword_0());
		}
		    |
		kw='Double'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getDoubleKeyword_1());
		}
		    |
		kw='String'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getStringKeyword_2());
		}
		    |
		kw='Boolean'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getBooleanKeyword_3());
		}
	)
;

// Entry rule entryRuleConditionContract
entryRuleConditionContract returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionContractRule()); }
	iv_ruleConditionContract=ruleConditionContract
	{ $current=$iv_ruleConditionContract.current; }
	EOF;

// Rule ConditionContract
ruleConditionContract returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='condition'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionContractAccess().getConditionKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionContractAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionContractAccess().getIfClauseIfClauseParserRuleCall_2_0());
				}
				lv_ifClause_2_0=ruleIfClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionContractRule());
					}
					set(
						$current,
						"ifClause",
						lv_ifClause_2_0,
						"xtext.json.WorkflowDSL.IfClause");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionContractAccess().getThenClauseThenClauseParserRuleCall_3_0());
				}
				lv_thenClause_3_0=ruleThenClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionContractRule());
					}
					set(
						$current,
						"thenClause",
						lv_thenClause_3_0,
						"xtext.json.WorkflowDSL.ThenClause");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getConditionContractAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleIfClause
entryRuleIfClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfClauseRule()); }
	iv_ruleIfClause=ruleIfClause
	{ $current=$iv_ruleIfClause.current; }
	EOF;

// Rule IfClause
ruleIfClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfClauseAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfClauseAccess().getFieldContractFieldParserRuleCall_1_0());
				}
				lv_field_1_0=ruleContractField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfClauseRule());
					}
					set(
						$current,
						"field",
						lv_field_1_0,
						"xtext.json.WorkflowDSL.ContractField");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfClauseAccess().getOpBelongOpParserRuleCall_2_0());
				}
				lv_op_2_0=ruleBelongOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfClauseRule());
					}
					set(
						$current,
						"op",
						lv_op_2_0,
						"xtext.json.WorkflowDSL.BelongOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfClauseAccess().getConditionDataConditionParserRuleCall_3_0());
				}
				lv_condition_3_0=ruleDataCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfClauseRule());
					}
					set(
						$current,
						"condition",
						lv_condition_3_0,
						"xtext.json.WorkflowDSL.DataCondition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleThenClause
entryRuleThenClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getThenClauseRule()); }
	iv_ruleThenClause=ruleThenClause
	{ $current=$iv_ruleThenClause.current; }
	EOF;

// Rule ThenClause
ruleThenClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='then'
		{
			newLeafNode(otherlv_0, grammarAccess.getThenClauseAccess().getThenKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getThenClauseAccess().getFieldContractFieldParserRuleCall_1_0());
				}
				lv_field_1_0=ruleContractField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getThenClauseRule());
					}
					set(
						$current,
						"field",
						lv_field_1_0,
						"xtext.json.WorkflowDSL.ContractField");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getThenClauseAccess().getOpBelongOpParserRuleCall_2_0());
				}
				lv_op_2_0=ruleBelongOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getThenClauseRule());
					}
					set(
						$current,
						"op",
						lv_op_2_0,
						"xtext.json.WorkflowDSL.BelongOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getThenClauseAccess().getResultDataResultParserRuleCall_3_0());
				}
				lv_result_3_0=ruleDataResult
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getThenClauseRule());
					}
					set(
						$current,
						"result",
						lv_result_3_0,
						"xtext.json.WorkflowDSL.DataResult");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBelongOp
entryRuleBelongOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBelongOpRule()); }
	iv_ruleBelongOp=ruleBelongOp
	{ $current=$iv_ruleBelongOp.current.getText(); }
	EOF;

// Rule BelongOp
ruleBelongOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='belongs_to'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBelongOpAccess().getBelongs_toKeyword_0());
		}
		    |
		kw='not_belongs_to'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBelongOpAccess().getNot_belongs_toKeyword_1());
		}
	)
;

// Entry rule entryRuleDataCondition
entryRuleDataCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataConditionRule()); }
	iv_ruleDataCondition=ruleDataCondition
	{ $current=$iv_ruleDataCondition.current; }
	EOF;

// Rule DataCondition
ruleDataCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDataConditionAccess().getSpecialValueCheckParserRuleCall_0());
		}
		ruleSpecialValueCheck
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataConditionAccess().getCastTypeCheckParserRuleCall_1());
		}
		this_CastTypeCheck_1=ruleCastTypeCheck
		{
			$current = $this_CastTypeCheck_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataConditionAccess().getValueCheckParserRuleCall_2());
		}
		this_ValueCheck_2=ruleValueCheck
		{
			$current = $this_ValueCheck_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSpecialValueCheck
entryRuleSpecialValueCheck returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSpecialValueCheckRule()); }
	iv_ruleSpecialValueCheck=ruleSpecialValueCheck
	{ $current=$iv_ruleSpecialValueCheck.current.getText(); }
	EOF;

// Rule SpecialValueCheck
ruleSpecialValueCheck returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='special_values'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getSpecialValueCheckAccess().getSpecial_valuesKeyword());
	}
;

// Entry rule entryRuleCastTypeCheck
entryRuleCastTypeCheck returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCastTypeCheckRule()); }
	iv_ruleCastTypeCheck=ruleCastTypeCheck
	{ $current=$iv_ruleCastTypeCheck.current; }
	EOF;

// Rule CastTypeCheck
ruleCastTypeCheck returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getCastTypeCheckAccess().getTypeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCastTypeCheckAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCastTypeCheckRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"xtext.json.WorkflowDSL.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleValueCheck
entryRuleValueCheck returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueCheckRule()); }
	iv_ruleValueCheck=ruleValueCheck
	{ $current=$iv_ruleValueCheck.current; }
	EOF;

// Rule ValueCheck
ruleValueCheck returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='value'
		{
			newLeafNode(otherlv_0, grammarAccess.getValueCheckAccess().getValueKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueCheckAccess().getValueValueParserRuleCall_1_0());
				}
				lv_value_1_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueCheckRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"xtext.json.WorkflowDSL.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDataResult
entryRuleDataResult returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataResultRule()); }
	iv_ruleDataResult=ruleDataResult
	{ $current=$iv_ruleDataResult.current; }
	EOF;

// Rule DataResult
ruleDataResult returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDataResultAccess().getSpecialValueCheckParserRuleCall_0());
		}
		ruleSpecialValueCheck
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataResultAccess().getCastTypeCheckParserRuleCall_1());
		}
		this_CastTypeCheck_1=ruleCastTypeCheck
		{
			$current = $this_CastTypeCheck_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataResultAccess().getValueCheckParserRuleCall_2());
		}
		this_ValueCheck_2=ruleValueCheck
		{
			$current = $this_ValueCheck_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSpecialValueContract
entryRuleSpecialValueContract returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpecialValueContractRule()); }
	iv_ruleSpecialValueContract=ruleSpecialValueContract
	{ $current=$iv_ruleSpecialValueContract.current; }
	EOF;

// Rule SpecialValueContract
ruleSpecialValueContract returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='no_special_values'
			{
				newLeafNode(otherlv_0, grammarAccess.getSpecialValueContractAccess().getNo_special_valuesKeyword_0_0());
			}
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getSpecialValueContractAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSpecialValueContractAccess().getFieldContractFieldParserRuleCall_0_2_0());
					}
					lv_field_2_0=ruleContractField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSpecialValueContractRule());
						}
						set(
							$current,
							"field",
							lv_field_2_0,
							"xtext.json.WorkflowDSL.ContractField");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getSpecialValueContractAccess().getRightParenthesisKeyword_0_3());
			}
		)
		    |
		(
			otherlv_4='has_special_values'
			{
				newLeafNode(otherlv_4, grammarAccess.getSpecialValueContractAccess().getHas_special_valuesKeyword_1_0());
			}
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getSpecialValueContractAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSpecialValueContractAccess().getFieldContractFieldParserRuleCall_1_2_0());
					}
					lv_field_6_0=ruleContractField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSpecialValueContractRule());
						}
						set(
							$current,
							"field",
							lv_field_6_0,
							"xtext.json.WorkflowDSL.ContractField");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getSpecialValueContractAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleCastTypeContract
entryRuleCastTypeContract returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCastTypeContractRule()); }
	iv_ruleCastTypeContract=ruleCastTypeContract
	{ $current=$iv_ruleCastTypeContract.current; }
	EOF;

// Rule CastTypeContract
ruleCastTypeContract returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='castable_to'
			{
				newLeafNode(otherlv_0, grammarAccess.getCastTypeContractAccess().getCastable_toKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCastTypeContractAccess().getTypeTypeParserRuleCall_0_1_0());
					}
					lv_type_1_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCastTypeContractRule());
						}
						set(
							$current,
							"type",
							lv_type_1_0,
							"xtext.json.WorkflowDSL.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getCastTypeContractAccess().getLeftParenthesisKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCastTypeContractAccess().getFieldContractFieldParserRuleCall_0_3_0());
					}
					lv_field_3_0=ruleContractField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCastTypeContractRule());
						}
						set(
							$current,
							"field",
							lv_field_3_0,
							"xtext.json.WorkflowDSL.ContractField");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getCastTypeContractAccess().getRightParenthesisKeyword_0_4());
			}
		)
		    |
		(
			otherlv_5='is_type'
			{
				newLeafNode(otherlv_5, grammarAccess.getCastTypeContractAccess().getIs_typeKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCastTypeContractAccess().getTypeTypeParserRuleCall_1_1_0());
					}
					lv_type_6_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCastTypeContractRule());
						}
						set(
							$current,
							"type",
							lv_type_6_0,
							"xtext.json.WorkflowDSL.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7='('
			{
				newLeafNode(otherlv_7, grammarAccess.getCastTypeContractAccess().getLeftParenthesisKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCastTypeContractAccess().getFieldContractFieldParserRuleCall_1_3_0());
					}
					lv_field_8_0=ruleContractField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCastTypeContractRule());
						}
						set(
							$current,
							"field",
							lv_field_8_0,
							"xtext.json.WorkflowDSL.ContractField");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getCastTypeContractAccess().getRightParenthesisKeyword_1_4());
			}
		)
	)
;

// Entry rule entryRuleTransformation
entryRuleTransformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransformationRule()); }
	iv_ruleTransformation=ruleTransformation
	{ $current=$iv_ruleTransformation.current; }
	EOF;

// Rule Transformation
ruleTransformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTransformationAccess().getRowFilterParserRuleCall_0());
		}
		this_RowFilter_0=ruleRowFilter
		{
			$current = $this_RowFilter_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTransformationAccess().getColumnFilterParserRuleCall_1());
		}
		this_ColumnFilter_1=ruleColumnFilter
		{
			$current = $this_ColumnFilter_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTransformationAccess().getMappingParserRuleCall_2());
		}
		this_Mapping_2=ruleMapping
		{
			$current = $this_Mapping_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTransformationAccess().getMathOpParserRuleCall_3());
		}
		this_MathOp_3=ruleMathOp
		{
			$current = $this_MathOp_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTransformationAccess().getBinnerParserRuleCall_4());
		}
		this_Binner_4=ruleBinner
		{
			$current = $this_Binner_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTransformationAccess().getTypeConversionParserRuleCall_5());
		}
		this_TypeConversion_5=ruleTypeConversion
		{
			$current = $this_TypeConversion_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTransformationAccess().getImputationParserRuleCall_6());
		}
		this_Imputation_6=ruleImputation
		{
			$current = $this_Imputation_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTransformationAccess().getOutlierTreatmentParserRuleCall_7());
		}
		this_OutlierTreatment_7=ruleOutlierTreatment
		{
			$current = $this_OutlierTreatment_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTransformationAccess().getJoinParserRuleCall_8());
		}
		this_Join_8=ruleJoin
		{
			$current = $this_Join_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRowFilter
entryRuleRowFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRowFilterRule()); }
	iv_ruleRowFilter=ruleRowFilter
	{ $current=$iv_ruleRowFilter.current; }
	EOF;

// Rule RowFilter
ruleRowFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='filter_rows'
		{
			newLeafNode(otherlv_0, grammarAccess.getRowFilterAccess().getFilter_rowsKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getRowFilterAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRowFilterAccess().getConditionFilterConditionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleFilterCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRowFilterRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"xtext.json.WorkflowDSL.FilterCondition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getRowFilterAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleFilterCondition
entryRuleFilterCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilterConditionRule()); }
	iv_ruleFilterCondition=ruleFilterCondition
	{ $current=$iv_ruleFilterCondition.current; }
	EOF;

// Rule FilterCondition
ruleFilterCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFilterConditionAccess().getMissingFilterParserRuleCall_0());
		}
		this_MissingFilter_0=ruleMissingFilter
		{
			$current = $this_MissingFilter_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFilterConditionAccess().getRangeFilterParserRuleCall_1());
		}
		this_RangeFilter_1=ruleRangeFilter
		{
			$current = $this_RangeFilter_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFilterConditionAccess().getStringFilterParserRuleCall_2());
		}
		this_StringFilter_2=ruleStringFilter
		{
			$current = $this_StringFilter_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMissingFilter
entryRuleMissingFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMissingFilterRule()); }
	iv_ruleMissingFilter=ruleMissingFilter
	{ $current=$iv_ruleMissingFilter.current; }
	EOF;

// Rule MissingFilter
ruleMissingFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='missing'
		{
			newLeafNode(otherlv_0, grammarAccess.getMissingFilterAccess().getMissingKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMissingFilterAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMissingFilterAccess().getColumnsColumnListParserRuleCall_2_0());
				}
				lv_columns_2_0=ruleColumnList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMissingFilterRule());
					}
					set(
						$current,
						"columns",
						lv_columns_2_0,
						"xtext.json.WorkflowDSL.ColumnList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getMissingFilterAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMissingFilterAccess().getIncludeExcludeIncludeExcludeParserRuleCall_4_0());
				}
				lv_includeExclude_4_0=ruleIncludeExclude
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMissingFilterRule());
					}
					set(
						$current,
						"includeExclude",
						lv_includeExclude_4_0,
						"xtext.json.WorkflowDSL.IncludeExclude");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getMissingFilterAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleRangeFilter
entryRuleRangeFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeFilterRule()); }
	iv_ruleRangeFilter=ruleRangeFilter
	{ $current=$iv_ruleRangeFilter.current; }
	EOF;

// Rule RangeFilter
ruleRangeFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='range'
		{
			newLeafNode(otherlv_0, grammarAccess.getRangeFilterAccess().getRangeKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRangeFilterAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeFilterAccess().getColumnColumnParserRuleCall_2_0());
				}
				lv_column_2_0=ruleColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeFilterRule());
					}
					set(
						$current,
						"column",
						lv_column_2_0,
						"xtext.json.WorkflowDSL.Column");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getRangeFilterAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeFilterAccess().getBoundsRangeBoundsParserRuleCall_4_0());
				}
				lv_bounds_4_0=ruleRangeBounds
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeFilterRule());
					}
					set(
						$current,
						"bounds",
						lv_bounds_4_0,
						"xtext.json.WorkflowDSL.RangeBounds");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getRangeFilterAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeFilterAccess().getIncludeExcludeIncludeExcludeParserRuleCall_6_0());
				}
				lv_includeExclude_6_0=ruleIncludeExclude
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeFilterRule());
					}
					set(
						$current,
						"includeExclude",
						lv_includeExclude_6_0,
						"xtext.json.WorkflowDSL.IncludeExclude");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getRangeFilterAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleRangeBounds
entryRuleRangeBounds returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeBoundsRule()); }
	iv_ruleRangeBounds=ruleRangeBounds
	{ $current=$iv_ruleRangeBounds.current; }
	EOF;

// Rule RangeBounds
ruleRangeBounds returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='['
			{
				newLeafNode(otherlv_0, grammarAccess.getRangeBoundsAccess().getLeftSquareBracketKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRangeBoundsAccess().getLowerBoundValueParserRuleCall_0_1_0());
					}
					lv_lower_1_0=ruleBoundValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRangeBoundsRule());
						}
						set(
							$current,
							"lower",
							lv_lower_1_0,
							"xtext.json.WorkflowDSL.BoundValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getRangeBoundsAccess().getCommaKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRangeBoundsAccess().getUpperBoundValueParserRuleCall_0_3_0());
					}
					lv_upper_3_0=ruleBoundValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRangeBoundsRule());
						}
						set(
							$current,
							"upper",
							lv_upper_3_0,
							"xtext.json.WorkflowDSL.BoundValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getRangeBoundsAccess().getRightSquareBracketKeyword_0_4());
			}
		)
		    |
		(
			otherlv_5='['
			{
				newLeafNode(otherlv_5, grammarAccess.getRangeBoundsAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRangeBoundsAccess().getLowerBoundValueParserRuleCall_1_1_0());
					}
					lv_lower_6_0=ruleBoundValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRangeBoundsRule());
						}
						set(
							$current,
							"lower",
							lv_lower_6_0,
							"xtext.json.WorkflowDSL.BoundValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=','
			{
				newLeafNode(otherlv_7, grammarAccess.getRangeBoundsAccess().getCommaKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRangeBoundsAccess().getUpperBoundValueParserRuleCall_1_3_0());
					}
					lv_upper_8_0=ruleBoundValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRangeBoundsRule());
						}
						set(
							$current,
							"upper",
							lv_upper_8_0,
							"xtext.json.WorkflowDSL.BoundValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getRangeBoundsAccess().getRightParenthesisKeyword_1_4());
			}
		)
		    |
		(
			otherlv_10='('
			{
				newLeafNode(otherlv_10, grammarAccess.getRangeBoundsAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRangeBoundsAccess().getLowerBoundValueParserRuleCall_2_1_0());
					}
					lv_lower_11_0=ruleBoundValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRangeBoundsRule());
						}
						set(
							$current,
							"lower",
							lv_lower_11_0,
							"xtext.json.WorkflowDSL.BoundValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_12=','
			{
				newLeafNode(otherlv_12, grammarAccess.getRangeBoundsAccess().getCommaKeyword_2_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRangeBoundsAccess().getUpperBoundValueParserRuleCall_2_3_0());
					}
					lv_upper_13_0=ruleBoundValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRangeBoundsRule());
						}
						set(
							$current,
							"upper",
							lv_upper_13_0,
							"xtext.json.WorkflowDSL.BoundValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_14=']'
			{
				newLeafNode(otherlv_14, grammarAccess.getRangeBoundsAccess().getRightSquareBracketKeyword_2_4());
			}
		)
		    |
		(
			otherlv_15='('
			{
				newLeafNode(otherlv_15, grammarAccess.getRangeBoundsAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRangeBoundsAccess().getLowerBoundValueParserRuleCall_3_1_0());
					}
					lv_lower_16_0=ruleBoundValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRangeBoundsRule());
						}
						set(
							$current,
							"lower",
							lv_lower_16_0,
							"xtext.json.WorkflowDSL.BoundValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_17=','
			{
				newLeafNode(otherlv_17, grammarAccess.getRangeBoundsAccess().getCommaKeyword_3_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRangeBoundsAccess().getUpperBoundValueParserRuleCall_3_3_0());
					}
					lv_upper_18_0=ruleBoundValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRangeBoundsRule());
						}
						set(
							$current,
							"upper",
							lv_upper_18_0,
							"xtext.json.WorkflowDSL.BoundValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_19=')'
			{
				newLeafNode(otherlv_19, grammarAccess.getRangeBoundsAccess().getRightParenthesisKeyword_3_4());
			}
		)
	)
;

// Entry rule entryRuleBoundValue
entryRuleBoundValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoundValueRule()); }
	iv_ruleBoundValue=ruleBoundValue
	{ $current=$iv_ruleBoundValue.current; }
	EOF;

// Rule BoundValue
ruleBoundValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBoundValueAccess().getValueNumberParserRuleCall_0_0());
				}
				lv_value_0_0=ruleNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoundValueRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"xtext.json.WorkflowDSL.Number");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		otherlv_1='*'
		{
			newLeafNode(otherlv_1, grammarAccess.getBoundValueAccess().getAsteriskKeyword_1());
		}
		    |
		otherlv_2='inf'
		{
			newLeafNode(otherlv_2, grammarAccess.getBoundValueAccess().getInfKeyword_2());
		}
		    |
		otherlv_3='-inf'
		{
			newLeafNode(otherlv_3, grammarAccess.getBoundValueAccess().getInfKeyword_3());
		}
	)
;

// Entry rule entryRuleStringFilter
entryRuleStringFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringFilterRule()); }
	iv_ruleStringFilter=ruleStringFilter
	{ $current=$iv_ruleStringFilter.current; }
	EOF;

// Rule StringFilter
ruleStringFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='matches'
			{
				newLeafNode(otherlv_0, grammarAccess.getStringFilterAccess().getMatchesKeyword_0_0());
			}
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getStringFilterAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStringFilterAccess().getColumnColumnParserRuleCall_0_2_0());
					}
					lv_column_2_0=ruleColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringFilterRule());
						}
						set(
							$current,
							"column",
							lv_column_2_0,
							"xtext.json.WorkflowDSL.Column");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getStringFilterAccess().getCommaKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStringFilterAccess().getPatternPatternParserRuleCall_0_4_0());
					}
					lv_pattern_4_0=rulePattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringFilterRule());
						}
						set(
							$current,
							"pattern",
							lv_pattern_4_0,
							"xtext.json.WorkflowDSL.Pattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getStringFilterAccess().getCommaKeyword_0_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStringFilterAccess().getIncludeExcludeIncludeExcludeParserRuleCall_0_6_0());
					}
					lv_includeExclude_6_0=ruleIncludeExclude
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringFilterRule());
						}
						set(
							$current,
							"includeExclude",
							lv_includeExclude_6_0,
							"xtext.json.WorkflowDSL.IncludeExclude");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getStringFilterAccess().getRightParenthesisKeyword_0_7());
			}
		)
		    |
		(
			otherlv_8='like'
			{
				newLeafNode(otherlv_8, grammarAccess.getStringFilterAccess().getLikeKeyword_1_0());
			}
			otherlv_9='('
			{
				newLeafNode(otherlv_9, grammarAccess.getStringFilterAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStringFilterAccess().getColumnColumnParserRuleCall_1_2_0());
					}
					lv_column_10_0=ruleColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringFilterRule());
						}
						set(
							$current,
							"column",
							lv_column_10_0,
							"xtext.json.WorkflowDSL.Column");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11=','
			{
				newLeafNode(otherlv_11, grammarAccess.getStringFilterAccess().getCommaKeyword_1_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStringFilterAccess().getPatternPatternParserRuleCall_1_4_0());
					}
					lv_pattern_12_0=rulePattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringFilterRule());
						}
						set(
							$current,
							"pattern",
							lv_pattern_12_0,
							"xtext.json.WorkflowDSL.Pattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_13=','
			{
				newLeafNode(otherlv_13, grammarAccess.getStringFilterAccess().getCommaKeyword_1_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStringFilterAccess().getIncludeExcludeIncludeExcludeParserRuleCall_1_6_0());
					}
					lv_includeExclude_14_0=ruleIncludeExclude
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringFilterRule());
						}
						set(
							$current,
							"includeExclude",
							lv_includeExclude_14_0,
							"xtext.json.WorkflowDSL.IncludeExclude");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_15=')'
			{
				newLeafNode(otherlv_15, grammarAccess.getStringFilterAccess().getRightParenthesisKeyword_1_7());
			}
		)
	)
;

// Entry rule entryRulePattern
entryRulePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternRule()); }
	iv_rulePattern=rulePattern
	{ $current=$iv_rulePattern.current; }
	EOF;

// Rule Pattern
rulePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0=RULE_STRING
				{
					newLeafNode(lv_value_0_0, grammarAccess.getPatternAccess().getValueSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternAccess().getRegexRegexParserRuleCall_1_0());
				}
				lv_regex_1_0=ruleRegex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternRule());
					}
					set(
						$current,
						"regex",
						lv_regex_1_0,
						"xtext.json.WorkflowDSL.Regex");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIncludeExclude
entryRuleIncludeExclude returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIncludeExcludeRule()); }
	iv_ruleIncludeExclude=ruleIncludeExclude
	{ $current=$iv_ruleIncludeExclude.current.getText(); }
	EOF;

// Rule IncludeExclude
ruleIncludeExclude returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='include'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIncludeExcludeAccess().getIncludeKeyword_0());
		}
		    |
		kw='exclude'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIncludeExcludeAccess().getExcludeKeyword_1());
		}
	)
;

// Entry rule entryRuleColumnFilter
entryRuleColumnFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnFilterRule()); }
	iv_ruleColumnFilter=ruleColumnFilter
	{ $current=$iv_ruleColumnFilter.current; }
	EOF;

// Rule ColumnFilter
ruleColumnFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='select_columns'
			{
				newLeafNode(otherlv_0, grammarAccess.getColumnFilterAccess().getSelect_columnsKeyword_0_0());
			}
			otherlv_1='{'
			{
				newLeafNode(otherlv_1, grammarAccess.getColumnFilterAccess().getLeftCurlyBracketKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getColumnFilterAccess().getColumnsColumnListParserRuleCall_0_2_0());
					}
					lv_columns_2_0=ruleColumnList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColumnFilterRule());
						}
						set(
							$current,
							"columns",
							lv_columns_2_0,
							"xtext.json.WorkflowDSL.ColumnList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='}'
			{
				newLeafNode(otherlv_3, grammarAccess.getColumnFilterAccess().getRightCurlyBracketKeyword_0_3());
			}
		)
		    |
		(
			otherlv_4='drop_columns'
			{
				newLeafNode(otherlv_4, grammarAccess.getColumnFilterAccess().getDrop_columnsKeyword_1_0());
			}
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getColumnFilterAccess().getLeftCurlyBracketKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getColumnFilterAccess().getColumnsColumnListParserRuleCall_1_2_0());
					}
					lv_columns_6_0=ruleColumnList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColumnFilterRule());
						}
						set(
							$current,
							"columns",
							lv_columns_6_0,
							"xtext.json.WorkflowDSL.ColumnList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7='}'
			{
				newLeafNode(otherlv_7, grammarAccess.getColumnFilterAccess().getRightCurlyBracketKeyword_1_3());
			}
		)
		    |
		(
			otherlv_8='keep'
			{
				newLeafNode(otherlv_8, grammarAccess.getColumnFilterAccess().getKeepKeyword_2_0());
			}
			otherlv_9='{'
			{
				newLeafNode(otherlv_9, grammarAccess.getColumnFilterAccess().getLeftCurlyBracketKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getColumnFilterAccess().getColumnsColumnListParserRuleCall_2_2_0());
					}
					lv_columns_10_0=ruleColumnList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColumnFilterRule());
						}
						set(
							$current,
							"columns",
							lv_columns_10_0,
							"xtext.json.WorkflowDSL.ColumnList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getColumnFilterAccess().getRightCurlyBracketKeyword_2_3());
			}
		)
		    |
		(
			otherlv_12='remove'
			{
				newLeafNode(otherlv_12, grammarAccess.getColumnFilterAccess().getRemoveKeyword_3_0());
			}
			otherlv_13='{'
			{
				newLeafNode(otherlv_13, grammarAccess.getColumnFilterAccess().getLeftCurlyBracketKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getColumnFilterAccess().getColumnsColumnListParserRuleCall_3_2_0());
					}
					lv_columns_14_0=ruleColumnList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColumnFilterRule());
						}
						set(
							$current,
							"columns",
							lv_columns_14_0,
							"xtext.json.WorkflowDSL.ColumnList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_15='}'
			{
				newLeafNode(otherlv_15, grammarAccess.getColumnFilterAccess().getRightCurlyBracketKeyword_3_3());
			}
		)
	)
;

// Entry rule entryRuleMapping
entryRuleMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingRule()); }
	iv_ruleMapping=ruleMapping
	{ $current=$iv_ruleMapping.current; }
	EOF;

// Rule Mapping
ruleMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMappingAccess().getValueMappingParserRuleCall_0());
		}
		this_ValueMapping_0=ruleValueMapping
		{
			$current = $this_ValueMapping_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMappingAccess().getSubstringMappingParserRuleCall_1());
		}
		this_SubstringMapping_1=ruleSubstringMapping
		{
			$current = $this_SubstringMapping_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleValueMapping
entryRuleValueMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueMappingRule()); }
	iv_ruleValueMapping=ruleValueMapping
	{ $current=$iv_ruleValueMapping.current; }
	EOF;

// Rule ValueMapping
ruleValueMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='map'
		{
			newLeafNode(otherlv_0, grammarAccess.getValueMappingAccess().getMapKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getValueMappingAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueMappingAccess().getColumnColumnParserRuleCall_2_0());
				}
				lv_column_2_0=ruleColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueMappingRule());
					}
					set(
						$current,
						"column",
						lv_column_2_0,
						"xtext.json.WorkflowDSL.Column");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getValueMappingAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getValueMappingAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueMappingAccess().getRulesMappingRulesParserRuleCall_5_0());
				}
				lv_rules_5_0=ruleMappingRules
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueMappingRule());
					}
					set(
						$current,
						"rules",
						lv_rules_5_0,
						"xtext.json.WorkflowDSL.MappingRules");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getValueMappingAccess().getRightCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueMappingAccess().getModeMappingModeParserRuleCall_7_0());
				}
				lv_mode_7_0=ruleMappingMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueMappingRule());
					}
					set(
						$current,
						"mode",
						lv_mode_7_0,
						"xtext.json.WorkflowDSL.MappingMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMappingRules
entryRuleMappingRules returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingRulesRule()); }
	iv_ruleMappingRules=ruleMappingRules
	{ $current=$iv_ruleMappingRules.current; }
	EOF;

// Rule MappingRules
ruleMappingRules returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMappingRulesAccess().getRulesMappingRuleParserRuleCall_0_0());
				}
				lv_rules_0_0=ruleMappingRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMappingRulesRule());
					}
					add(
						$current,
						"rules",
						lv_rules_0_0,
						"xtext.json.WorkflowDSL.MappingRule");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getMappingRulesAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMappingRulesAccess().getRulesMappingRuleParserRuleCall_1_1_0());
					}
					lv_rules_2_0=ruleMappingRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMappingRulesRule());
						}
						add(
							$current,
							"rules",
							lv_rules_2_0,
							"xtext.json.WorkflowDSL.MappingRule");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)?
;

// Entry rule entryRuleMappingRule
entryRuleMappingRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingRuleRule()); }
	iv_ruleMappingRule=ruleMappingRule
	{ $current=$iv_ruleMappingRule.current; }
	EOF;

// Rule MappingRule
ruleMappingRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_from_0_0=RULE_STRING
					{
						newLeafNode(lv_from_0_0, grammarAccess.getMappingRuleAccess().getFromSTRINGTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMappingRuleRule());
						}
						setWithLastConsumed(
							$current,
							"from",
							lv_from_0_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_1='->'
			{
				newLeafNode(otherlv_1, grammarAccess.getMappingRuleAccess().getHyphenMinusGreaterThanSignKeyword_0_1());
			}
			(
				(
					lv_to_2_0=RULE_STRING
					{
						newLeafNode(lv_to_2_0, grammarAccess.getMappingRuleAccess().getToSTRINGTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMappingRuleRule());
						}
						setWithLastConsumed(
							$current,
							"to",
							lv_to_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMappingRuleAccess().getPatternPatternParserRuleCall_1_0_0());
					}
					lv_pattern_3_0=rulePattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMappingRuleRule());
						}
						set(
							$current,
							"pattern",
							lv_pattern_3_0,
							"xtext.json.WorkflowDSL.Pattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4='=>'
			{
				newLeafNode(otherlv_4, grammarAccess.getMappingRuleAccess().getEqualsSignGreaterThanSignKeyword_1_1());
			}
			(
				(
					lv_to_5_0=RULE_STRING
					{
						newLeafNode(lv_to_5_0, grammarAccess.getMappingRuleAccess().getToSTRINGTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMappingRuleRule());
						}
						setWithLastConsumed(
							$current,
							"to",
							lv_to_5_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSubstringMapping
entryRuleSubstringMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubstringMappingRule()); }
	iv_ruleSubstringMapping=ruleSubstringMapping
	{ $current=$iv_ruleSubstringMapping.current; }
	EOF;

// Rule SubstringMapping
ruleSubstringMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='replace'
		{
			newLeafNode(otherlv_0, grammarAccess.getSubstringMappingAccess().getReplaceKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSubstringMappingAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubstringMappingAccess().getColumnColumnParserRuleCall_2_0());
				}
				lv_column_2_0=ruleColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubstringMappingRule());
					}
					set(
						$current,
						"column",
						lv_column_2_0,
						"xtext.json.WorkflowDSL.Column");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getSubstringMappingAccess().getCommaKeyword_3());
		}
		(
			(
				lv_from_4_0=RULE_STRING
				{
					newLeafNode(lv_from_4_0, grammarAccess.getSubstringMappingAccess().getFromSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSubstringMappingRule());
					}
					setWithLastConsumed(
						$current,
						"from",
						lv_from_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getSubstringMappingAccess().getCommaKeyword_5());
		}
		(
			(
				lv_to_6_0=RULE_STRING
				{
					newLeafNode(lv_to_6_0, grammarAccess.getSubstringMappingAccess().getToSTRINGTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSubstringMappingRule());
					}
					setWithLastConsumed(
						$current,
						"to",
						lv_to_6_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getSubstringMappingAccess().getRightParenthesisKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubstringMappingAccess().getModeMappingModeParserRuleCall_8_0());
				}
				lv_mode_8_0=ruleMappingMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubstringMappingRule());
					}
					set(
						$current,
						"mode",
						lv_mode_8_0,
						"xtext.json.WorkflowDSL.MappingMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMappingMode
entryRuleMappingMode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingModeRule()); }
	iv_ruleMappingMode=ruleMappingMode
	{ $current=$iv_ruleMappingMode.current; }
	EOF;

// Rule MappingMode
ruleMappingMode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='replace'
		{
			newLeafNode(otherlv_0, grammarAccess.getMappingModeAccess().getReplaceKeyword_0());
		}
		    |
		(
			otherlv_1='as'
			{
				newLeafNode(otherlv_1, grammarAccess.getMappingModeAccess().getAsKeyword_1_0());
			}
			(
				(
					lv_newName_2_0=RULE_ID
					{
						newLeafNode(lv_newName_2_0, grammarAccess.getMappingModeAccess().getNewNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMappingModeRule());
						}
						setWithLastConsumed(
							$current,
							"newName",
							lv_newName_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleMathOp
entryRuleMathOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMathOpRule()); }
	iv_ruleMathOp=ruleMathOp
	{ $current=$iv_ruleMathOp.current; }
	EOF;

// Rule MathOp
ruleMathOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='math'
		{
			newLeafNode(otherlv_0, grammarAccess.getMathOpAccess().getMathKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMathOpAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMathOpAccess().getExpressionMathExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleMathExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMathOpRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"xtext.json.WorkflowDSL.MathExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getMathOpAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='as'
		{
			newLeafNode(otherlv_4, grammarAccess.getMathOpAccess().getAsKeyword_4());
		}
		(
			(
				lv_newName_5_0=RULE_ID
				{
					newLeafNode(lv_newName_5_0, grammarAccess.getMathOpAccess().getNewNameIDTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMathOpRule());
					}
					setWithLastConsumed(
						$current,
						"newName",
						lv_newName_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleMathExpression
entryRuleMathExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMathExpressionRule()); }
	iv_ruleMathExpression=ruleMathExpression
	{ $current=$iv_ruleMathExpression.current; }
	EOF;

// Rule MathExpression
ruleMathExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMathExpressionAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMathExpressionAccess().getOperatorOperatorParserRuleCall_1_0_0());
					}
					lv_operator_1_0=ruleOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMathExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_1_0,
							"xtext.json.WorkflowDSL.Operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMathExpressionAccess().getRightPrimaryParserRuleCall_1_1_0());
					}
					lv_right_2_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMathExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_2_0,
							"xtext.json.WorkflowDSL.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryAccess().getOperandOperandParserRuleCall_0_0());
				}
				lv_operand_0_0=ruleOperand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryRule());
					}
					set(
						$current,
						"operand",
						lv_operand_0_0,
						"xtext.json.WorkflowDSL.Operand");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionMathExpressionParserRuleCall_1_1_0());
					}
					lv_expression_2_0=ruleMathExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_2_0,
							"xtext.json.WorkflowDSL.MathExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryAccess().getCallFunctionCallParserRuleCall_2_0());
				}
				lv_call_4_0=ruleFunctionCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryRule());
					}
					set(
						$current,
						"call",
						lv_call_4_0,
						"xtext.json.WorkflowDSL.FunctionCall");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	iv_ruleFunctionCall=ruleFunctionCall
	{ $current=$iv_ruleFunctionCall.current; }
	EOF;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionCallAccess().getFunctionFunctionParserRuleCall_0_0());
				}
				lv_function_0_0=ruleFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
					}
					set(
						$current,
						"function",
						lv_function_0_0,
						"xtext.json.WorkflowDSL.Function");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionCallAccess().getOperandsOperandParserRuleCall_2_0_0());
					}
					lv_operands_2_0=ruleOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
						}
						add(
							$current,
							"operands",
							lv_operands_2_0,
							"xtext.json.WorkflowDSL.Operand");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionCallAccess().getOperandsOperandParserRuleCall_2_1_1_0());
						}
						lv_operands_4_0=ruleOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
							}
							add(
								$current,
								"operands",
								lv_operands_4_0,
								"xtext.json.WorkflowDSL.Operand");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current.getText(); }
	EOF;

// Rule Function
ruleFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='abs'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getAbsKeyword_0());
		}
		    |
		kw='sqrt'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getSqrtKeyword_1());
		}
		    |
		kw='pow'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getPowKeyword_2());
		}
		    |
		kw='log'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getLogKeyword_3());
		}
		    |
		kw='exp'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getExpKeyword_4());
		}
		    |
		kw='sin'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getSinKeyword_5());
		}
		    |
		kw='cos'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getCosKeyword_6());
		}
		    |
		kw='tan'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getTanKeyword_7());
		}
		    |
		kw='round'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getRoundKeyword_8());
		}
		    |
		kw='ceil'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getCeilKeyword_9());
		}
		    |
		kw='floor'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getFloorKeyword_10());
		}
	)
;

// Entry rule entryRuleOperand
entryRuleOperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	iv_ruleOperand=ruleOperand
	{ $current=$iv_ruleOperand.current; }
	EOF;

// Rule Operand
ruleOperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOperandAccess().getColumnColumnParserRuleCall_0_0());
				}
				lv_column_0_0=ruleColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperandRule());
					}
					set(
						$current,
						"column",
						lv_column_0_0,
						"xtext.json.WorkflowDSL.Column");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getOperandAccess().getNumberNumberParserRuleCall_1_0());
				}
				lv_number_1_0=ruleNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperandRule());
					}
					set(
						$current,
						"number",
						lv_number_1_0,
						"xtext.json.WorkflowDSL.Number");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_string_2_0=RULE_STRING
				{
					newLeafNode(lv_string_2_0, grammarAccess.getOperandAccess().getStringSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperandRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleOperator
entryRuleOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	iv_ruleOperator=ruleOperator
	{ $current=$iv_ruleOperator.current.getText(); }
	EOF;

// Rule Operator
ruleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getAsteriskKeyword_2());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getSolidusKeyword_3());
		}
		    |
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getPercentSignKeyword_4());
		}
		    |
		kw='^'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getCircumflexAccentKeyword_5());
		}
	)
;

// Entry rule entryRuleBinner
entryRuleBinner returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinnerRule()); }
	iv_ruleBinner=ruleBinner
	{ $current=$iv_ruleBinner.current; }
	EOF;

// Rule Binner
ruleBinner returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='bin'
		{
			newLeafNode(otherlv_0, grammarAccess.getBinnerAccess().getBinKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getBinnerAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBinnerAccess().getColumnColumnParserRuleCall_2_0());
				}
				lv_column_2_0=ruleColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinnerRule());
					}
					set(
						$current,
						"column",
						lv_column_2_0,
						"xtext.json.WorkflowDSL.Column");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getBinnerAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getBinnerAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBinnerAccess().getDefinitionsBinDefinitionsParserRuleCall_5_0());
				}
				lv_definitions_5_0=ruleBinDefinitions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinnerRule());
					}
					set(
						$current,
						"definitions",
						lv_definitions_5_0,
						"xtext.json.WorkflowDSL.BinDefinitions");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getBinnerAccess().getRightCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBinnerAccess().getModeBinModeParserRuleCall_7_0());
				}
				lv_mode_7_0=ruleBinMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinnerRule());
					}
					set(
						$current,
						"mode",
						lv_mode_7_0,
						"xtext.json.WorkflowDSL.BinMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBinDefinitions
entryRuleBinDefinitions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinDefinitionsRule()); }
	iv_ruleBinDefinitions=ruleBinDefinitions
	{ $current=$iv_ruleBinDefinitions.current; }
	EOF;

// Rule BinDefinitions
ruleBinDefinitions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBinDefinitionsAccess().getDefinitionsBinDefParserRuleCall_0_0());
				}
				lv_definitions_0_0=ruleBinDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinDefinitionsRule());
					}
					add(
						$current,
						"definitions",
						lv_definitions_0_0,
						"xtext.json.WorkflowDSL.BinDef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getBinDefinitionsAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBinDefinitionsAccess().getDefinitionsBinDefParserRuleCall_1_1_0());
					}
					lv_definitions_2_0=ruleBinDef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBinDefinitionsRule());
						}
						add(
							$current,
							"definitions",
							lv_definitions_2_0,
							"xtext.json.WorkflowDSL.BinDef");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)?
;

// Entry rule entryRuleBinDef
entryRuleBinDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinDefRule()); }
	iv_ruleBinDef=ruleBinDef
	{ $current=$iv_ruleBinDef.current; }
	EOF;

// Rule BinDef
ruleBinDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBinDefAccess().getNameBinNameParserRuleCall_0_0());
				}
				lv_name_0_0=ruleBinName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinDefRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"xtext.json.WorkflowDSL.BinName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getBinDefAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBinDefAccess().getIntervalIntervalParserRuleCall_2_0());
				}
				lv_interval_2_0=ruleInterval
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinDefRule());
					}
					set(
						$current,
						"interval",
						lv_interval_2_0,
						"xtext.json.WorkflowDSL.Interval");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBinName
entryRuleBinName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinNameRule()); }
	iv_ruleBinName=ruleBinName
	{ $current=$iv_ruleBinName.current; }
	EOF;

// Rule BinName
ruleBinName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_STRING
			{
				newLeafNode(lv_name_0_0, grammarAccess.getBinNameAccess().getNameSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBinNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleInterval
entryRuleInterval returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntervalRule()); }
	iv_ruleInterval=ruleInterval
	{ $current=$iv_ruleInterval.current; }
	EOF;

// Rule Interval
ruleInterval returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='['
			{
				newLeafNode(otherlv_0, grammarAccess.getIntervalAccess().getLeftSquareBracketKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntervalAccess().getLowerIntervalBoundParserRuleCall_0_1_0());
					}
					lv_lower_1_0=ruleIntervalBound
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntervalRule());
						}
						set(
							$current,
							"lower",
							lv_lower_1_0,
							"xtext.json.WorkflowDSL.IntervalBound");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getIntervalAccess().getCommaKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntervalAccess().getUpperIntervalBoundParserRuleCall_0_3_0());
					}
					lv_upper_3_0=ruleIntervalBound
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntervalRule());
						}
						set(
							$current,
							"upper",
							lv_upper_3_0,
							"xtext.json.WorkflowDSL.IntervalBound");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getIntervalAccess().getRightSquareBracketKeyword_0_4());
			}
		)
		    |
		(
			otherlv_5='['
			{
				newLeafNode(otherlv_5, grammarAccess.getIntervalAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntervalAccess().getLowerIntervalBoundParserRuleCall_1_1_0());
					}
					lv_lower_6_0=ruleIntervalBound
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntervalRule());
						}
						set(
							$current,
							"lower",
							lv_lower_6_0,
							"xtext.json.WorkflowDSL.IntervalBound");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=','
			{
				newLeafNode(otherlv_7, grammarAccess.getIntervalAccess().getCommaKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntervalAccess().getUpperIntervalBoundParserRuleCall_1_3_0());
					}
					lv_upper_8_0=ruleIntervalBound
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntervalRule());
						}
						set(
							$current,
							"upper",
							lv_upper_8_0,
							"xtext.json.WorkflowDSL.IntervalBound");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getIntervalAccess().getRightParenthesisKeyword_1_4());
			}
		)
		    |
		(
			otherlv_10='('
			{
				newLeafNode(otherlv_10, grammarAccess.getIntervalAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntervalAccess().getLowerIntervalBoundParserRuleCall_2_1_0());
					}
					lv_lower_11_0=ruleIntervalBound
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntervalRule());
						}
						set(
							$current,
							"lower",
							lv_lower_11_0,
							"xtext.json.WorkflowDSL.IntervalBound");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_12=','
			{
				newLeafNode(otherlv_12, grammarAccess.getIntervalAccess().getCommaKeyword_2_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntervalAccess().getUpperIntervalBoundParserRuleCall_2_3_0());
					}
					lv_upper_13_0=ruleIntervalBound
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntervalRule());
						}
						set(
							$current,
							"upper",
							lv_upper_13_0,
							"xtext.json.WorkflowDSL.IntervalBound");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_14=']'
			{
				newLeafNode(otherlv_14, grammarAccess.getIntervalAccess().getRightSquareBracketKeyword_2_4());
			}
		)
		    |
		(
			otherlv_15='('
			{
				newLeafNode(otherlv_15, grammarAccess.getIntervalAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntervalAccess().getLowerIntervalBoundParserRuleCall_3_1_0());
					}
					lv_lower_16_0=ruleIntervalBound
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntervalRule());
						}
						set(
							$current,
							"lower",
							lv_lower_16_0,
							"xtext.json.WorkflowDSL.IntervalBound");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_17=','
			{
				newLeafNode(otherlv_17, grammarAccess.getIntervalAccess().getCommaKeyword_3_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntervalAccess().getUpperIntervalBoundParserRuleCall_3_3_0());
					}
					lv_upper_18_0=ruleIntervalBound
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntervalRule());
						}
						set(
							$current,
							"upper",
							lv_upper_18_0,
							"xtext.json.WorkflowDSL.IntervalBound");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_19=')'
			{
				newLeafNode(otherlv_19, grammarAccess.getIntervalAccess().getRightParenthesisKeyword_3_4());
			}
		)
	)
;

// Entry rule entryRuleIntervalBound
entryRuleIntervalBound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntervalBoundRule()); }
	iv_ruleIntervalBound=ruleIntervalBound
	{ $current=$iv_ruleIntervalBound.current; }
	EOF;

// Rule IntervalBound
ruleIntervalBound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIntervalBoundAccess().getValueNumberParserRuleCall_0_0());
				}
				lv_value_0_0=ruleNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntervalBoundRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"xtext.json.WorkflowDSL.Number");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		otherlv_1='-inf'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntervalBoundAccess().getInfKeyword_1());
		}
		    |
		otherlv_2='inf'
		{
			newLeafNode(otherlv_2, grammarAccess.getIntervalBoundAccess().getInfKeyword_2());
		}
		    |
		otherlv_3='-Infinity'
		{
			newLeafNode(otherlv_3, grammarAccess.getIntervalBoundAccess().getInfinityKeyword_3());
		}
		    |
		otherlv_4='Infinity'
		{
			newLeafNode(otherlv_4, grammarAccess.getIntervalBoundAccess().getInfinityKeyword_4());
		}
	)
;

// Entry rule entryRuleBinMode
entryRuleBinMode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinModeRule()); }
	iv_ruleBinMode=ruleBinMode
	{ $current=$iv_ruleBinMode.current; }
	EOF;

// Rule BinMode
ruleBinMode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='replace'
		{
			newLeafNode(otherlv_0, grammarAccess.getBinModeAccess().getReplaceKeyword_0());
		}
		    |
		(
			otherlv_1='as'
			{
				newLeafNode(otherlv_1, grammarAccess.getBinModeAccess().getAsKeyword_1_0());
			}
			(
				(
					lv_newName_2_0=RULE_ID
					{
						newLeafNode(lv_newName_2_0, grammarAccess.getBinModeAccess().getNewNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBinModeRule());
						}
						setWithLastConsumed(
							$current,
							"newName",
							lv_newName_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTypeConversion
entryRuleTypeConversion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeConversionRule()); }
	iv_ruleTypeConversion=ruleTypeConversion
	{ $current=$iv_ruleTypeConversion.current; }
	EOF;

// Rule TypeConversion
ruleTypeConversion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='to_numeric'
			{
				newLeafNode(otherlv_0, grammarAccess.getTypeConversionAccess().getTo_numericKeyword_0_0());
			}
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeConversionAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeConversionAccess().getColumnsColumnListParserRuleCall_0_2_0());
					}
					lv_columns_2_0=ruleColumnList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeConversionRule());
						}
						set(
							$current,
							"columns",
							lv_columns_2_0,
							"xtext.json.WorkflowDSL.ColumnList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getTypeConversionAccess().getRightParenthesisKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeConversionAccess().getSeparatorDecimalSeparatorParserRuleCall_0_4_0());
					}
					lv_separator_4_0=ruleDecimalSeparator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeConversionRule());
						}
						set(
							$current,
							"separator",
							lv_separator_4_0,
							"xtext.json.WorkflowDSL.DecimalSeparator");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			otherlv_5='to_string'
			{
				newLeafNode(otherlv_5, grammarAccess.getTypeConversionAccess().getTo_stringKeyword_1_0());
			}
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getTypeConversionAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeConversionAccess().getColumnsColumnListParserRuleCall_1_2_0());
					}
					lv_columns_7_0=ruleColumnList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeConversionRule());
						}
						set(
							$current,
							"columns",
							lv_columns_7_0,
							"xtext.json.WorkflowDSL.ColumnList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getTypeConversionAccess().getRightParenthesisKeyword_1_3());
			}
		)
		    |
		(
			otherlv_9='to_categorical'
			{
				newLeafNode(otherlv_9, grammarAccess.getTypeConversionAccess().getTo_categoricalKeyword_2_0());
			}
			otherlv_10='('
			{
				newLeafNode(otherlv_10, grammarAccess.getTypeConversionAccess().getLeftParenthesisKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeConversionAccess().getColumnsColumnListParserRuleCall_2_2_0());
					}
					lv_columns_11_0=ruleColumnList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeConversionRule());
						}
						set(
							$current,
							"columns",
							lv_columns_11_0,
							"xtext.json.WorkflowDSL.ColumnList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_12=')'
			{
				newLeafNode(otherlv_12, grammarAccess.getTypeConversionAccess().getRightParenthesisKeyword_2_3());
			}
		)
		    |
		(
			otherlv_13='to_boolean'
			{
				newLeafNode(otherlv_13, grammarAccess.getTypeConversionAccess().getTo_booleanKeyword_3_0());
			}
			otherlv_14='('
			{
				newLeafNode(otherlv_14, grammarAccess.getTypeConversionAccess().getLeftParenthesisKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeConversionAccess().getColumnsColumnListParserRuleCall_3_2_0());
					}
					lv_columns_15_0=ruleColumnList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeConversionRule());
						}
						set(
							$current,
							"columns",
							lv_columns_15_0,
							"xtext.json.WorkflowDSL.ColumnList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_16=')'
			{
				newLeafNode(otherlv_16, grammarAccess.getTypeConversionAccess().getRightParenthesisKeyword_3_3());
			}
		)
		    |
		(
			otherlv_17='to_date'
			{
				newLeafNode(otherlv_17, grammarAccess.getTypeConversionAccess().getTo_dateKeyword_4_0());
			}
			otherlv_18='('
			{
				newLeafNode(otherlv_18, grammarAccess.getTypeConversionAccess().getLeftParenthesisKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeConversionAccess().getColumnsColumnListParserRuleCall_4_2_0());
					}
					lv_columns_19_0=ruleColumnList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeConversionRule());
						}
						set(
							$current,
							"columns",
							lv_columns_19_0,
							"xtext.json.WorkflowDSL.ColumnList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_20=','
			{
				newLeafNode(otherlv_20, grammarAccess.getTypeConversionAccess().getCommaKeyword_4_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeConversionAccess().getFormatDateFormatParserRuleCall_4_4_0());
					}
					lv_format_21_0=ruleDateFormat
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeConversionRule());
						}
						set(
							$current,
							"format",
							lv_format_21_0,
							"xtext.json.WorkflowDSL.DateFormat");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_22=')'
			{
				newLeafNode(otherlv_22, grammarAccess.getTypeConversionAccess().getRightParenthesisKeyword_4_5());
			}
		)
	)
;

// Entry rule entryRuleDecimalSeparator
entryRuleDecimalSeparator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDecimalSeparatorRule()); }
	iv_ruleDecimalSeparator=ruleDecimalSeparator
	{ $current=$iv_ruleDecimalSeparator.current.getText(); }
	EOF;

// Rule DecimalSeparator
ruleDecimalSeparator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='separator'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDecimalSeparatorAccess().getSeparatorKeyword_0());
		}
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDecimalSeparatorAccess().getEqualsSignKeyword_1());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDecimalSeparatorAccess().getFullStopKeyword_2_0());
			}
			    |
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDecimalSeparatorAccess().getCommaKeyword_2_1());
			}
		)
	)
;

// Entry rule entryRuleDateFormat
entryRuleDateFormat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDateFormatRule()); }
	iv_ruleDateFormat=ruleDateFormat
	{ $current=$iv_ruleDateFormat.current; }
	EOF;

// Rule DateFormat
ruleDateFormat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='format'
		{
			newLeafNode(otherlv_0, grammarAccess.getDateFormatAccess().getFormatKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getDateFormatAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_format_2_0=RULE_STRING
				{
					newLeafNode(lv_format_2_0, grammarAccess.getDateFormatAccess().getFormatSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDateFormatRule());
					}
					setWithLastConsumed(
						$current,
						"format",
						lv_format_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleImputation
entryRuleImputation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImputationRule()); }
	iv_ruleImputation=ruleImputation
	{ $current=$iv_ruleImputation.current; }
	EOF;

// Rule Imputation
ruleImputation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='impute'
		{
			newLeafNode(otherlv_0, grammarAccess.getImputationAccess().getImputeKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getImputationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImputationAccess().getColumnsColumnListParserRuleCall_2_0());
				}
				lv_columns_2_0=ruleColumnList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImputationRule());
					}
					set(
						$current,
						"columns",
						lv_columns_2_0,
						"xtext.json.WorkflowDSL.ColumnList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getImputationAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getImputationAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImputationAccess().getMethodImputeMethodParserRuleCall_5_0());
				}
				lv_method_5_0=ruleImputeMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImputationRule());
					}
					set(
						$current,
						"method",
						lv_method_5_0,
						"xtext.json.WorkflowDSL.ImputeMethod");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getImputationAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleImputeMethod
entryRuleImputeMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImputeMethodRule()); }
	iv_ruleImputeMethod=ruleImputeMethod
	{ $current=$iv_ruleImputeMethod.current; }
	EOF;

// Rule ImputeMethod
ruleImputeMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getImputeMethodAccess().getFixedImputeParserRuleCall_0());
		}
		this_FixedImpute_0=ruleFixedImpute
		{
			$current = $this_FixedImpute_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getImputeMethodAccess().getStatisticalImputeParserRuleCall_1());
		}
		ruleStatisticalImpute
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getImputeMethodAccess().getSequentialImputeParserRuleCall_2());
		}
		ruleSequentialImpute
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getImputeMethodAccess().getAdvancedImputeParserRuleCall_3());
		}
		this_AdvancedImpute_3=ruleAdvancedImpute
		{
			$current = $this_AdvancedImpute_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFixedImpute
entryRuleFixedImpute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFixedImputeRule()); }
	iv_ruleFixedImpute=ruleFixedImpute
	{ $current=$iv_ruleFixedImpute.current; }
	EOF;

// Rule FixedImpute
ruleFixedImpute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='fixed'
		{
			newLeafNode(otherlv_0, grammarAccess.getFixedImputeAccess().getFixedKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getFixedImputeAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFixedImputeAccess().getValuesValueListParserRuleCall_2_0());
				}
				lv_values_2_0=ruleValueList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFixedImputeRule());
					}
					set(
						$current,
						"values",
						lv_values_2_0,
						"xtext.json.WorkflowDSL.ValueList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleValueList
entryRuleValueList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueListRule()); }
	iv_ruleValueList=ruleValueList
	{ $current=$iv_ruleValueList.current; }
	EOF;

// Rule ValueList
ruleValueList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getValueListAccess().getValueValueParserRuleCall_0_0());
				}
				lv_value_0_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueListRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"xtext.json.WorkflowDSL.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getValueListAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getValueListAccess().getValuesValueParserRuleCall_1_1_0_0());
						}
						lv_values_2_0=ruleValue
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getValueListRule());
							}
							add(
								$current,
								"values",
								lv_values_2_0,
								"xtext.json.WorkflowDSL.Value");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3=','
					{
						newLeafNode(otherlv_3, grammarAccess.getValueListAccess().getCommaKeyword_1_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getValueListAccess().getValuesValueParserRuleCall_1_1_1_1_0());
							}
							lv_values_4_0=ruleValue
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getValueListRule());
								}
								add(
									$current,
									"values",
									lv_values_4_0,
									"xtext.json.WorkflowDSL.Value");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_5=']'
			{
				newLeafNode(otherlv_5, grammarAccess.getValueListAccess().getRightSquareBracketKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getNumberNumberParserRuleCall_0_0());
				}
				lv_number_0_0=ruleNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"number",
						lv_number_0_0,
						"xtext.json.WorkflowDSL.Number");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_string_1_0=RULE_STRING
				{
					newLeafNode(lv_string_1_0, grammarAccess.getValueAccess().getStringSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		otherlv_2='null'
		{
			newLeafNode(otherlv_2, grammarAccess.getValueAccess().getNullKeyword_2());
		}
	)
;

// Entry rule entryRuleStatisticalImpute
entryRuleStatisticalImpute returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStatisticalImputeRule()); }
	iv_ruleStatisticalImpute=ruleStatisticalImpute
	{ $current=$iv_ruleStatisticalImpute.current.getText(); }
	EOF;

// Rule StatisticalImpute
ruleStatisticalImpute returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='mean'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStatisticalImputeAccess().getMeanKeyword_0());
		}
		    |
		kw='median'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStatisticalImputeAccess().getMedianKeyword_1());
		}
		    |
		kw='mode'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStatisticalImputeAccess().getModeKeyword_2());
		}
		    |
		kw='most_frequent'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStatisticalImputeAccess().getMost_frequentKeyword_3());
		}
		    |
		kw='max'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStatisticalImputeAccess().getMaxKeyword_4());
		}
		    |
		kw='min'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStatisticalImputeAccess().getMinKeyword_5());
		}
	)
;

// Entry rule entryRuleSequentialImpute
entryRuleSequentialImpute returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSequentialImputeRule()); }
	iv_ruleSequentialImpute=ruleSequentialImpute
	{ $current=$iv_ruleSequentialImpute.current.getText(); }
	EOF;

// Rule SequentialImpute
ruleSequentialImpute returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='forward_fill'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSequentialImputeAccess().getForward_fillKeyword_0());
		}
		    |
		kw='backward_fill'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSequentialImputeAccess().getBackward_fillKeyword_1());
		}
		    |
		kw='previous_value'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSequentialImputeAccess().getPrevious_valueKeyword_2());
		}
		    |
		kw='next_value'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSequentialImputeAccess().getNext_valueKeyword_3());
		}
	)
;

// Entry rule entryRuleAdvancedImpute
entryRuleAdvancedImpute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdvancedImputeRule()); }
	iv_ruleAdvancedImpute=ruleAdvancedImpute
	{ $current=$iv_ruleAdvancedImpute.current; }
	EOF;

// Rule AdvancedImpute
ruleAdvancedImpute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='interpolation'
			{
				newLeafNode(otherlv_0, grammarAccess.getAdvancedImputeAccess().getInterpolationKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAdvancedImputeAccess().getTypeInterpolationTypeParserRuleCall_0_1_0());
					}
					lv_type_1_0=ruleInterpolationType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdvancedImputeRule());
						}
						set(
							$current,
							"type",
							lv_type_1_0,
							"xtext.json.WorkflowDSL.InterpolationType");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			otherlv_2='moving_average'
			{
				newLeafNode(otherlv_2, grammarAccess.getAdvancedImputeAccess().getMoving_averageKeyword_1_0());
			}
			(
				otherlv_3='window'
				{
					newLeafNode(otherlv_3, grammarAccess.getAdvancedImputeAccess().getWindowKeyword_1_1_0());
				}
				otherlv_4='='
				{
					newLeafNode(otherlv_4, grammarAccess.getAdvancedImputeAccess().getEqualsSignKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAdvancedImputeAccess().getWindowSizeNumberParserRuleCall_1_1_2_0());
						}
						lv_windowSize_5_0=ruleNumber
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAdvancedImputeRule());
							}
							set(
								$current,
								"windowSize",
								lv_windowSize_5_0,
								"xtext.json.WorkflowDSL.Number");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		otherlv_6='linear'
		{
			newLeafNode(otherlv_6, grammarAccess.getAdvancedImputeAccess().getLinearKeyword_2());
		}
		    |
		(
			otherlv_7='polynomial'
			{
				newLeafNode(otherlv_7, grammarAccess.getAdvancedImputeAccess().getPolynomialKeyword_3_0());
			}
			(
				otherlv_8='degree'
				{
					newLeafNode(otherlv_8, grammarAccess.getAdvancedImputeAccess().getDegreeKeyword_3_1_0());
				}
				otherlv_9='='
				{
					newLeafNode(otherlv_9, grammarAccess.getAdvancedImputeAccess().getEqualsSignKeyword_3_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAdvancedImputeAccess().getDegreeNumberParserRuleCall_3_1_2_0());
						}
						lv_degree_10_0=ruleNumber
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAdvancedImputeRule());
							}
							set(
								$current,
								"degree",
								lv_degree_10_0,
								"xtext.json.WorkflowDSL.Number");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		otherlv_11='spline'
		{
			newLeafNode(otherlv_11, grammarAccess.getAdvancedImputeAccess().getSplineKeyword_4());
		}
	)
;

// Entry rule entryRuleInterpolationType
entryRuleInterpolationType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInterpolationTypeRule()); }
	iv_ruleInterpolationType=ruleInterpolationType
	{ $current=$iv_ruleInterpolationType.current.getText(); }
	EOF;

// Rule InterpolationType
ruleInterpolationType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='linear'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterpolationTypeAccess().getLinearKeyword_0());
		}
		    |
		kw='polynomial'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterpolationTypeAccess().getPolynomialKeyword_1());
		}
		    |
		kw='spline'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterpolationTypeAccess().getSplineKeyword_2());
		}
	)
;

// Entry rule entryRuleOutlierTreatment
entryRuleOutlierTreatment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutlierTreatmentRule()); }
	iv_ruleOutlierTreatment=ruleOutlierTreatment
	{ $current=$iv_ruleOutlierTreatment.current; }
	EOF;

// Rule OutlierTreatment
ruleOutlierTreatment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='outliers'
		{
			newLeafNode(otherlv_0, grammarAccess.getOutlierTreatmentAccess().getOutliersKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getOutlierTreatmentAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutlierTreatmentAccess().getColumnsColumnListParserRuleCall_2_0());
				}
				lv_columns_2_0=ruleColumnList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutlierTreatmentRule());
					}
					set(
						$current,
						"columns",
						lv_columns_2_0,
						"xtext.json.WorkflowDSL.ColumnList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getOutlierTreatmentAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getOutlierTreatmentAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutlierTreatmentAccess().getStrategyOutlierStrategyParserRuleCall_5_0());
				}
				lv_strategy_5_0=ruleOutlierStrategy
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutlierTreatmentRule());
					}
					set(
						$current,
						"strategy",
						lv_strategy_5_0,
						"xtext.json.WorkflowDSL.OutlierStrategy");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getOutlierTreatmentAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleOutlierStrategy
entryRuleOutlierStrategy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutlierStrategyRule()); }
	iv_ruleOutlierStrategy=ruleOutlierStrategy
	{ $current=$iv_ruleOutlierStrategy.current; }
	EOF;

// Rule OutlierStrategy
ruleOutlierStrategy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOutlierStrategyAccess().getReplacementReplacementStrategyParserRuleCall_0_0());
				}
				lv_replacement_0_0=ruleReplacementStrategy
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutlierStrategyRule());
					}
					set(
						$current,
						"replacement",
						lv_replacement_0_0,
						"xtext.json.WorkflowDSL.ReplacementStrategy");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOutlierStrategyAccess().getMethodDetectionMethodParserRuleCall_1_0());
				}
				lv_method_1_0=ruleDetectionMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutlierStrategyRule());
					}
					set(
						$current,
						"method",
						lv_method_1_0,
						"xtext.json.WorkflowDSL.DetectionMethod");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOutlierStrategyAccess().getOptionsOutlierOptionsParserRuleCall_2_0());
				}
				lv_options_2_0=ruleOutlierOptions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutlierStrategyRule());
					}
					set(
						$current,
						"options",
						lv_options_2_0,
						"xtext.json.WorkflowDSL.OutlierOptions");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleReplacementStrategy
entryRuleReplacementStrategy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReplacementStrategyRule()); }
	iv_ruleReplacementStrategy=ruleReplacementStrategy
	{ $current=$iv_ruleReplacementStrategy.current; }
	EOF;

// Rule ReplacementStrategy
ruleReplacementStrategy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='replace_closest'
		{
			newLeafNode(otherlv_0, grammarAccess.getReplacementStrategyAccess().getReplace_closestKeyword_0());
		}
		    |
		otherlv_1='replace_missing'
		{
			newLeafNode(otherlv_1, grammarAccess.getReplacementStrategyAccess().getReplace_missingKeyword_1());
		}
		    |
		otherlv_2='replace_by_closest'
		{
			newLeafNode(otherlv_2, grammarAccess.getReplacementStrategyAccess().getReplace_by_closestKeyword_2());
		}
		    |
		(
			otherlv_3='replace_with'
			{
				newLeafNode(otherlv_3, grammarAccess.getReplacementStrategyAccess().getReplace_withKeyword_3_0());
			}
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getReplacementStrategyAccess().getEqualsSignKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReplacementStrategyAccess().getValueNumberParserRuleCall_3_2_0());
					}
					lv_value_5_0=ruleNumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReplacementStrategyRule());
						}
						set(
							$current,
							"value",
							lv_value_5_0,
							"xtext.json.WorkflowDSL.Number");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		otherlv_6='remove'
		{
			newLeafNode(otherlv_6, grammarAccess.getReplacementStrategyAccess().getRemoveKeyword_4());
		}
		    |
		otherlv_7='cap'
		{
			newLeafNode(otherlv_7, grammarAccess.getReplacementStrategyAccess().getCapKeyword_5());
		}
	)
;

// Entry rule entryRuleDetectionMethod
entryRuleDetectionMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDetectionMethodRule()); }
	iv_ruleDetectionMethod=ruleDetectionMethod
	{ $current=$iv_ruleDetectionMethod.current; }
	EOF;

// Rule DetectionMethod
ruleDetectionMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDetectionMethodAccess().getIQRMethodParserRuleCall_0());
		}
		this_IQRMethod_0=ruleIQRMethod
		{
			$current = $this_IQRMethod_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDetectionMethodAccess().getZScoreMethodParserRuleCall_1());
		}
		this_ZScoreMethod_1=ruleZScoreMethod
		{
			$current = $this_ZScoreMethod_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDetectionMethodAccess().getPercentileMethodParserRuleCall_2());
		}
		this_PercentileMethod_2=rulePercentileMethod
		{
			$current = $this_PercentileMethod_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIQRMethod
entryRuleIQRMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIQRMethodRule()); }
	iv_ruleIQRMethod=ruleIQRMethod
	{ $current=$iv_ruleIQRMethod.current; }
	EOF;

// Rule IQRMethod
ruleIQRMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='iqr'
		{
			newLeafNode(otherlv_0, grammarAccess.getIQRMethodAccess().getIqrKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIQRMethodAccess().getParamsIQRParamsParserRuleCall_1_0());
				}
				lv_params_1_0=ruleIQRParams
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIQRMethodRule());
					}
					set(
						$current,
						"params",
						lv_params_1_0,
						"xtext.json.WorkflowDSL.IQRParams");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleIQRParams
entryRuleIQRParams returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIQRParamsRule()); }
	iv_ruleIQRParams=ruleIQRParams
	{ $current=$iv_ruleIQRParams.current; }
	EOF;

// Rule IQRParams
ruleIQRParams returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='scalar'
			{
				newLeafNode(otherlv_0, grammarAccess.getIQRParamsAccess().getScalarKeyword_0_0());
			}
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getIQRParamsAccess().getEqualsSignKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIQRParamsAccess().getScalarNumberParserRuleCall_0_2_0());
					}
					lv_scalar_2_0=ruleNumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIQRParamsRule());
						}
						set(
							$current,
							"scalar",
							lv_scalar_2_0,
							"xtext.json.WorkflowDSL.Number");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_3='estimation'
			{
				newLeafNode(otherlv_3, grammarAccess.getIQRParamsAccess().getEstimationKeyword_1_0());
			}
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getIQRParamsAccess().getEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIQRParamsAccess().getEstimationEstimationTypeParserRuleCall_1_2_0());
					}
					lv_estimation_5_0=ruleEstimationType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIQRParamsRule());
						}
						set(
							$current,
							"estimation",
							lv_estimation_5_0,
							"xtext.json.WorkflowDSL.EstimationType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleEstimationType
entryRuleEstimationType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEstimationTypeRule()); }
	iv_ruleEstimationType=ruleEstimationType
	{ $current=$iv_ruleEstimationType.current.getText(); }
	EOF;

// Rule EstimationType
ruleEstimationType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='R_4'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEstimationTypeAccess().getR_4Keyword_0());
		}
		    |
		kw='R_7'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEstimationTypeAccess().getR_7Keyword_1());
		}
		    |
		kw='R_8'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEstimationTypeAccess().getR_8Keyword_2());
		}
	)
;

// Entry rule entryRuleZScoreMethod
entryRuleZScoreMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getZScoreMethodRule()); }
	iv_ruleZScoreMethod=ruleZScoreMethod
	{ $current=$iv_ruleZScoreMethod.current; }
	EOF;

// Rule ZScoreMethod
ruleZScoreMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='zscore'
		{
			newLeafNode(otherlv_0, grammarAccess.getZScoreMethodAccess().getZscoreKeyword_0());
		}
		(
			otherlv_1='threshold'
			{
				newLeafNode(otherlv_1, grammarAccess.getZScoreMethodAccess().getThresholdKeyword_1_0());
			}
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getZScoreMethodAccess().getEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getZScoreMethodAccess().getThresholdNumberParserRuleCall_1_2_0());
					}
					lv_threshold_3_0=ruleNumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getZScoreMethodRule());
						}
						set(
							$current,
							"threshold",
							lv_threshold_3_0,
							"xtext.json.WorkflowDSL.Number");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulePercentileMethod
entryRulePercentileMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPercentileMethodRule()); }
	iv_rulePercentileMethod=rulePercentileMethod
	{ $current=$iv_rulePercentileMethod.current; }
	EOF;

// Rule PercentileMethod
rulePercentileMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='percentile'
		{
			newLeafNode(otherlv_0, grammarAccess.getPercentileMethodAccess().getPercentileKeyword_0());
		}
		otherlv_1='lower'
		{
			newLeafNode(otherlv_1, grammarAccess.getPercentileMethodAccess().getLowerKeyword_1());
		}
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getPercentileMethodAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPercentileMethodAccess().getLowerNumberParserRuleCall_3_0());
				}
				lv_lower_3_0=ruleNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPercentileMethodRule());
					}
					set(
						$current,
						"lower",
						lv_lower_3_0,
						"xtext.json.WorkflowDSL.Number");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='upper'
		{
			newLeafNode(otherlv_4, grammarAccess.getPercentileMethodAccess().getUpperKeyword_4());
		}
		otherlv_5='='
		{
			newLeafNode(otherlv_5, grammarAccess.getPercentileMethodAccess().getEqualsSignKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPercentileMethodAccess().getUpperNumberParserRuleCall_6_0());
				}
				lv_upper_6_0=ruleNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPercentileMethodRule());
					}
					set(
						$current,
						"upper",
						lv_upper_6_0,
						"xtext.json.WorkflowDSL.Number");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOutlierOptions
entryRuleOutlierOptions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutlierOptionsRule()); }
	iv_ruleOutlierOptions=ruleOutlierOptions
	{ $current=$iv_ruleOutlierOptions.current; }
	EOF;

// Rule OutlierOptions
ruleOutlierOptions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='scope'
		{
			newLeafNode(otherlv_0, grammarAccess.getOutlierOptionsAccess().getScopeKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getOutlierOptionsAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutlierOptionsAccess().getScopeOutlierScopeParserRuleCall_2_0());
				}
				lv_scope_2_0=ruleOutlierScope
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutlierOptionsRule());
					}
					set(
						$current,
						"scope",
						lv_scope_2_0,
						"xtext.json.WorkflowDSL.OutlierScope");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOutlierScope
entryRuleOutlierScope returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOutlierScopeRule()); }
	iv_ruleOutlierScope=ruleOutlierScope
	{ $current=$iv_ruleOutlierScope.current.getText(); }
	EOF;

// Rule OutlierScope
ruleOutlierScope returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='all'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOutlierScopeAccess().getAllKeyword_0());
		}
		    |
		kw='all_outliers'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOutlierScopeAccess().getAll_outliersKeyword_1());
		}
		    |
		kw='lower_only'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOutlierScopeAccess().getLower_onlyKeyword_2());
		}
		    |
		kw='upper_only'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOutlierScopeAccess().getUpper_onlyKeyword_3());
		}
	)
;

// Entry rule entryRuleJoin
entryRuleJoin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJoinRule()); }
	iv_ruleJoin=ruleJoin
	{ $current=$iv_ruleJoin.current; }
	EOF;

// Rule Join
ruleJoin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='join'
		{
			newLeafNode(otherlv_0, grammarAccess.getJoinAccess().getJoinKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getJoinAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_left_2_0=RULE_ID
				{
					newLeafNode(lv_left_2_0, grammarAccess.getJoinAccess().getLeftIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJoinRule());
					}
					setWithLastConsumed(
						$current,
						"left",
						lv_left_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getJoinAccess().getCommaKeyword_3());
		}
		(
			(
				lv_right_4_0=RULE_ID
				{
					newLeafNode(lv_right_4_0, grammarAccess.getJoinAccess().getRightIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJoinRule());
					}
					setWithLastConsumed(
						$current,
						"right",
						lv_right_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getJoinAccess().getRightParenthesisKeyword_5());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getJoinAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJoinAccess().getSpecJoinSpecParserRuleCall_7_0());
				}
				lv_spec_7_0=ruleJoinSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJoinRule());
					}
					set(
						$current,
						"spec",
						lv_spec_7_0,
						"xtext.json.WorkflowDSL.JoinSpec");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getJoinAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleJoinSpec
entryRuleJoinSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJoinSpecRule()); }
	iv_ruleJoinSpec=ruleJoinSpec
	{ $current=$iv_ruleJoinSpec.current; }
	EOF;

// Rule JoinSpec
ruleJoinSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getJoinSpecAccess().getTypeJoinTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleJoinType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJoinSpecRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"xtext.json.WorkflowDSL.JoinType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='on'
		{
			newLeafNode(otherlv_1, grammarAccess.getJoinSpecAccess().getOnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJoinSpecAccess().getConditionsJoinConditionsParserRuleCall_2_0());
				}
				lv_conditions_2_0=ruleJoinConditions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJoinSpecRule());
					}
					set(
						$current,
						"conditions",
						lv_conditions_2_0,
						"xtext.json.WorkflowDSL.JoinConditions");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJoinSpecAccess().getOptionsJoinOptionsParserRuleCall_3_0());
				}
				lv_options_3_0=ruleJoinOptions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJoinSpecRule());
					}
					set(
						$current,
						"options",
						lv_options_3_0,
						"xtext.json.WorkflowDSL.JoinOptions");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleJoinType
entryRuleJoinType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getJoinTypeRule()); }
	iv_ruleJoinType=ruleJoinType
	{ $current=$iv_ruleJoinType.current.getText(); }
	EOF;

// Rule JoinType
ruleJoinType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='inner'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJoinTypeAccess().getInnerKeyword_0());
		}
		    |
		kw='left'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJoinTypeAccess().getLeftKeyword_1());
		}
		    |
		kw='right'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJoinTypeAccess().getRightKeyword_2());
		}
		    |
		kw='full'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJoinTypeAccess().getFullKeyword_3());
		}
		    |
		kw='cross'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJoinTypeAccess().getCrossKeyword_4());
		}
	)
;

// Entry rule entryRuleJoinConditions
entryRuleJoinConditions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJoinConditionsRule()); }
	iv_ruleJoinConditions=ruleJoinConditions
	{ $current=$iv_ruleJoinConditions.current; }
	EOF;

// Rule JoinConditions
ruleJoinConditions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getJoinConditionsAccess().getConditionsJoinConditionParserRuleCall_0_0());
				}
				lv_conditions_0_0=ruleJoinCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJoinConditionsRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_0_0,
						"xtext.json.WorkflowDSL.JoinCondition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='and'
			{
				newLeafNode(otherlv_1, grammarAccess.getJoinConditionsAccess().getAndKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getJoinConditionsAccess().getConditionsJoinConditionParserRuleCall_1_1_0());
					}
					lv_conditions_2_0=ruleJoinCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJoinConditionsRule());
						}
						add(
							$current,
							"conditions",
							lv_conditions_2_0,
							"xtext.json.WorkflowDSL.JoinCondition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleJoinCondition
entryRuleJoinCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJoinConditionRule()); }
	iv_ruleJoinCondition=ruleJoinCondition
	{ $current=$iv_ruleJoinCondition.current; }
	EOF;

// Rule JoinCondition
ruleJoinCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getJoinConditionAccess().getLeftColumnParserRuleCall_0_0_0());
					}
					lv_left_0_0=ruleColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJoinConditionRule());
						}
						set(
							$current,
							"left",
							lv_left_0_0,
							"xtext.json.WorkflowDSL.Column");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getJoinConditionAccess().getEqualsSignKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getJoinConditionAccess().getRightColumnParserRuleCall_0_2_0());
					}
					lv_right_2_0=ruleColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJoinConditionRule());
						}
						set(
							$current,
							"right",
							lv_right_2_0,
							"xtext.json.WorkflowDSL.Column");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getJoinConditionAccess().getLeftColumnParserRuleCall_1_0_0());
					}
					lv_left_3_0=ruleColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJoinConditionRule());
						}
						set(
							$current,
							"left",
							lv_left_3_0,
							"xtext.json.WorkflowDSL.Column");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getJoinConditionAccess().getComparatorComparatorParserRuleCall_1_1_0());
					}
					lv_comparator_4_0=ruleComparator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJoinConditionRule());
						}
						set(
							$current,
							"comparator",
							lv_comparator_4_0,
							"xtext.json.WorkflowDSL.Comparator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getJoinConditionAccess().getRightColumnParserRuleCall_1_2_0());
					}
					lv_right_5_0=ruleColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJoinConditionRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"xtext.json.WorkflowDSL.Column");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleComparator
entryRuleComparator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComparatorRule()); }
	iv_ruleComparator=ruleComparator
	{ $current=$iv_ruleComparator.current.getText(); }
	EOF;

// Rule Comparator
ruleComparator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparatorAccess().getEqualsSignKeyword_0());
		}
		    |
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparatorAccess().getEqualsSignEqualsSignKeyword_1());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparatorAccess().getExclamationMarkEqualsSignKeyword_2());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparatorAccess().getLessThanSignKeyword_3());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparatorAccess().getGreaterThanSignKeyword_4());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparatorAccess().getLessThanSignEqualsSignKeyword_5());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparatorAccess().getGreaterThanSignEqualsSignKeyword_6());
		}
	)
;

// Entry rule entryRuleJoinOptions
entryRuleJoinOptions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJoinOptionsRule()); }
	iv_ruleJoinOptions=ruleJoinOptions
	{ $current=$iv_ruleJoinOptions.current; }
	EOF;

// Rule JoinOptions
ruleJoinOptions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='suffix'
		{
			newLeafNode(otherlv_0, grammarAccess.getJoinOptionsAccess().getSuffixKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getJoinOptionsAccess().getEqualsSignKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getJoinOptionsAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_leftSuffix_3_0=RULE_STRING
				{
					newLeafNode(lv_leftSuffix_3_0, grammarAccess.getJoinOptionsAccess().getLeftSuffixSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJoinOptionsRule());
					}
					setWithLastConsumed(
						$current,
						"leftSuffix",
						lv_leftSuffix_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getJoinOptionsAccess().getCommaKeyword_4());
		}
		(
			(
				lv_rightSuffix_5_0=RULE_STRING
				{
					newLeafNode(lv_rightSuffix_5_0, grammarAccess.getJoinOptionsAccess().getRightSuffixSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJoinOptionsRule());
					}
					setWithLastConsumed(
						$current,
						"rightSuffix",
						lv_rightSuffix_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getJoinOptionsAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleColumn
entryRuleColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnRule()); }
	iv_ruleColumn=ruleColumn
	{ $current=$iv_ruleColumn.current; }
	EOF;

// Rule Column
ruleColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColumnRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		    |
		(
			(
				(
					lv_table_1_0=RULE_ID
					{
						newLeafNode(lv_table_1_0, grammarAccess.getColumnAccess().getTableIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnRule());
						}
						setWithLastConsumed(
							$current,
							"table",
							lv_table_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getColumnAccess().getFullStopKeyword_1_1());
			}
			(
				(
					lv_column_3_0=RULE_ID
					{
						newLeafNode(lv_column_3_0, grammarAccess.getColumnAccess().getColumnIDTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnRule());
						}
						setWithLastConsumed(
							$current,
							"column",
							lv_column_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleColumnList
entryRuleColumnList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnListRule()); }
	iv_ruleColumnList=ruleColumnList
	{ $current=$iv_ruleColumnList.current; }
	EOF;

// Rule ColumnList
ruleColumnList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getColumnListAccess().getColumnsColumnParserRuleCall_0_0_0());
					}
					lv_columns_0_0=ruleColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColumnListRule());
						}
						add(
							$current,
							"columns",
							lv_columns_0_0,
							"xtext.json.WorkflowDSL.Column");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_1=','
				{
					newLeafNode(otherlv_1, grammarAccess.getColumnListAccess().getCommaKeyword_0_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getColumnListAccess().getColumnsColumnParserRuleCall_0_1_1_0());
						}
						lv_columns_2_0=ruleColumn
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getColumnListRule());
							}
							add(
								$current,
								"columns",
								lv_columns_2_0,
								"xtext.json.WorkflowDSL.Column");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
		    |
		otherlv_3='*'
		{
			newLeafNode(otherlv_3, grammarAccess.getColumnListAccess().getAsteriskKeyword_1());
		}
	)
;

// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current.getText(); }
	EOF;

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_INT_0=RULE_INT
			{
				$current.merge(this_INT_0);
			}
			{
				newLeafNode(this_INT_0, grammarAccess.getNumberAccess().getINTTerminalRuleCall_0_0());
			}
			(
				kw='.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_0_1_0());
				}
				this_INT_2=RULE_INT
				{
					$current.merge(this_INT_2);
				}
				{
					newLeafNode(this_INT_2, grammarAccess.getNumberAccess().getINTTerminalRuleCall_0_1_1());
				}
			)?
		)
		    |
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_1_0());
			}
			this_INT_4=RULE_INT
			{
				$current.merge(this_INT_4);
			}
			{
				newLeafNode(this_INT_4, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1());
			}
		)
	)
;

// Entry rule entryRuleRegex
entryRuleRegex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegexRule()); }
	iv_ruleRegex=ruleRegex
	{ $current=$iv_ruleRegex.current; }
	EOF;

// Rule Regex
ruleRegex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='/'
		{
			newLeafNode(otherlv_0, grammarAccess.getRegexAccess().getSolidusKeyword_0());
		}
		(
			(
				lv_pattern_1_0=RULE_STRING
				{
					newLeafNode(lv_pattern_1_0, grammarAccess.getRegexAccess().getPatternSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegexRule());
					}
					setWithLastConsumed(
						$current,
						"pattern",
						lv_pattern_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='/'
		{
			newLeafNode(otherlv_2, grammarAccess.getRegexAccess().getSolidusKeyword_2());
		}
		(
			(
				lv_flags_3_0=RULE_STRING
				{
					newLeafNode(lv_flags_3_0, grammarAccess.getRegexAccess().getFlagsSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegexRule());
					}
					setWithLastConsumed(
						$current,
						"flags",
						lv_flags_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
	)
;

RULE_COMMENT : ('//' ~(('\n'|'\r'))* ('\r'? '\n')?|'/*' ( options {greedy=false;} : . )*'*/');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
