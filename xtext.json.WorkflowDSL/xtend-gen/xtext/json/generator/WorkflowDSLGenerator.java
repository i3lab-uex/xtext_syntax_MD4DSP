/**
 * generated by Xtext 2.40.0
 */
package xtext.json.generator;

import com.google.common.collect.Iterators;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import xtext.json.workflowDSL.CSVReader;
import xtext.json.workflowDSL.CastTypeContract;
import xtext.json.workflowDSL.Column;
import xtext.json.workflowDSL.ColumnFilter;
import xtext.json.workflowDSL.ColumnList;
import xtext.json.workflowDSL.ConditionContract;
import xtext.json.workflowDSL.Contract;
import xtext.json.workflowDSL.ContractBlock;
import xtext.json.workflowDSL.ContractBody;
import xtext.json.workflowDSL.ContractField;
import xtext.json.workflowDSL.ContractName;
import xtext.json.workflowDSL.ContractType;
import xtext.json.workflowDSL.ContractValue;
import xtext.json.workflowDSL.DataReader;
import xtext.json.workflowDSL.DataSource;
import xtext.json.workflowDSL.Delimiter;
import xtext.json.workflowDSL.FilePath;
import xtext.json.workflowDSL.FileReader;
import xtext.json.workflowDSL.FilterCondition;
import xtext.json.workflowDSL.FixedImpute;
import xtext.json.workflowDSL.IfClause;
import xtext.json.workflowDSL.Imputation;
import xtext.json.workflowDSL.ImputeMethod;
import xtext.json.workflowDSL.Invariant;
import xtext.json.workflowDSL.Join;
import xtext.json.workflowDSL.JoinCondition;
import xtext.json.workflowDSL.JoinConditions;
import xtext.json.workflowDSL.JoinOptions;
import xtext.json.workflowDSL.JoinSpec;
import xtext.json.workflowDSL.MappingMode;
import xtext.json.workflowDSL.MappingRules;
import xtext.json.workflowDSL.MathExpression;
import xtext.json.workflowDSL.MathOp;
import xtext.json.workflowDSL.Postcondition;
import xtext.json.workflowDSL.Precondition;
import xtext.json.workflowDSL.RowFilter;
import xtext.json.workflowDSL.SpecialValueContract;
import xtext.json.workflowDSL.Step;
import xtext.json.workflowDSL.ThenClause;
import xtext.json.workflowDSL.Transformation;
import xtext.json.workflowDSL.TypeConversion;
import xtext.json.workflowDSL.ValueMapping;
import xtext.json.workflowDSL.ValueRangeContract;
import xtext.json.workflowDSL.Workflow;
import xtext.json.workflowDSL.WorkflowBody;

/**
 * Generates JSON representation from WorkflowDSL files.
 */
@SuppressWarnings("all")
public class WorkflowDSLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Workflow> _iterable = IteratorExtensions.<Workflow>toIterable(Iterators.<Workflow>filter(resource.getAllContents(), Workflow.class));
    for (final Workflow workflow : _iterable) {
      {
        String _elvis = null;
        String _name = workflow.getName();
        String _replaceAll = null;
        if (_name!=null) {
          _replaceAll=_name.replaceAll("\"", "");
        }
        if (_replaceAll != null) {
          _elvis = _replaceAll;
        } else {
          _elvis = "workflow";
        }
        final String fileName = _elvis;
        fsa.generateFile((fileName + ".json"), this.toJson(workflow));
      }
    }
  }

  public String toJson(final Workflow workflow) {
    return this.convertToJson(workflow, 0);
  }

  public String convertToJson(final Workflow workflow, final int indent) {
    final StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    String _spaces = this.spaces((indent + 2));
    String _plus = (_spaces + "\"type\": \"workflow\",\n");
    sb.append(_plus);
    String _spaces_1 = this.spaces((indent + 2));
    String _plus_1 = (_spaces_1 + "\"name\": \"");
    String _elvis = null;
    String _name = workflow.getName();
    String _replaceAll = null;
    if (_name!=null) {
      _replaceAll=_name.replaceAll("\"", "");
    }
    if (_replaceAll != null) {
      _elvis = _replaceAll;
    } else {
      _elvis = "";
    }
    String _plus_2 = (_plus_1 + _elvis);
    String _plus_3 = (_plus_2 + "\",\n");
    sb.append(_plus_3);
    String _spaces_2 = this.spaces((indent + 2));
    String _plus_4 = (_spaces_2 + "\"source\": ");
    String _convertToJson = this.convertToJson(workflow.getSource(), (indent + 2));
    String _plus_5 = (_plus_4 + _convertToJson);
    String _plus_6 = (_plus_5 + ",\n");
    sb.append(_plus_6);
    String _spaces_3 = this.spaces((indent + 2));
    String _plus_7 = (_spaces_3 + "\"body\": ");
    String _convertToJson_1 = this.convertToJson(workflow.getBody(), (indent + 2));
    String _plus_8 = (_plus_7 + _convertToJson_1);
    String _plus_9 = (_plus_8 + "\n");
    sb.append(_plus_9);
    String _spaces_4 = this.spaces(indent);
    String _plus_10 = (_spaces_4 + "}");
    sb.append(_plus_10);
    return sb.toString();
  }

  public String convertToJson(final DataSource source, final int indent) {
    final StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    String _spaces = this.spaces((indent + 2));
    String _plus = (_spaces + "\"type\": \"data_source\",\n");
    sb.append(_plus);
    String _spaces_1 = this.spaces((indent + 2));
    String _plus_1 = (_spaces_1 + "\"name\": \"");
    String _name = source.getName();
    String _plus_2 = (_plus_1 + _name);
    String _plus_3 = (_plus_2 + "\",\n");
    sb.append(_plus_3);
    String _spaces_2 = this.spaces((indent + 2));
    String _plus_4 = (_spaces_2 + "\"reader\": ");
    String _convertToJson = this.convertToJson(source.getReader(), (indent + 2));
    String _plus_5 = (_plus_4 + _convertToJson);
    String _plus_6 = (_plus_5 + "\n");
    sb.append(_plus_6);
    String _spaces_3 = this.spaces(indent);
    String _plus_7 = (_spaces_3 + "}");
    sb.append(_plus_7);
    return sb.toString();
  }

  public String convertToJson(final DataReader reader, final int indent) {
    final StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    boolean _matched = false;
    if (reader instanceof CSVReader) {
      _matched=true;
      String _spaces = this.spaces((indent + 2));
      String _plus = (_spaces + "\"type\": \"csv_reader\",\n");
      sb.append(_plus);
      String _spaces_1 = this.spaces((indent + 2));
      String _plus_1 = (_spaces_1 + "\"file_path\": ");
      String _convertToJson = this.convertToJson(((CSVReader)reader).getFilePath(), (indent + 2));
      String _plus_2 = (_plus_1 + _convertToJson);
      sb.append(_plus_2);
      Delimiter _delimiter = ((CSVReader)reader).getDelimiter();
      boolean _tripleNotEquals = (_delimiter != null);
      if (_tripleNotEquals) {
        sb.append(",\n");
        String _spaces_2 = this.spaces((indent + 2));
        String _plus_3 = (_spaces_2 + "\"delimiter\": ");
        String _convertToJson_1 = this.convertToJson(((CSVReader)reader).getDelimiter(), (indent + 2));
        String _plus_4 = (_plus_3 + _convertToJson_1);
        sb.append(_plus_4);
      }
      sb.append("\n");
    }
    if (!_matched) {
      if (reader instanceof FileReader) {
        _matched=true;
        String _spaces = this.spaces((indent + 2));
        String _plus = (_spaces + "\"type\": \"file_reader\",\n");
        sb.append(_plus);
        String _spaces_1 = this.spaces((indent + 2));
        String _plus_1 = (_spaces_1 + "\"file_path\": ");
        String _convertToJson = this.convertToJson(((FileReader)reader).getFilePath(), (indent + 2));
        String _plus_2 = (_plus_1 + _convertToJson);
        String _plus_3 = (_plus_2 + "\n");
        sb.append(_plus_3);
      }
    }
    String _spaces = this.spaces(indent);
    String _plus = (_spaces + "}");
    sb.append(_plus);
    return sb.toString();
  }

  public String convertToJson(final FilePath filePath, final int indent) {
    String _spaces = this.spaces((indent + 2));
    String _plus = ("{\n" + _spaces);
    String _plus_1 = (_plus + "\"path\": \"");
    String _elvis = null;
    String _path = filePath.getPath();
    String _replaceAll = null;
    if (_path!=null) {
      _replaceAll=_path.replaceAll("\"", "");
    }
    if (_replaceAll != null) {
      _elvis = _replaceAll;
    } else {
      _elvis = "";
    }
    String _plus_2 = (_plus_1 + _elvis);
    String _plus_3 = (_plus_2 + "\"\n");
    String _spaces_1 = this.spaces(indent);
    String _plus_4 = (_plus_3 + _spaces_1);
    return (_plus_4 + "}");
  }

  public String convertToJson(final Delimiter delimiter, final int indent) {
    String _spaces = this.spaces((indent + 2));
    String _plus = ("{\n" + _spaces);
    String _plus_1 = (_plus + "\"value\": \"");
    String _elvis = null;
    String _value = delimiter.getValue();
    String _replaceAll = null;
    if (_value!=null) {
      _replaceAll=_value.replaceAll("\"", "");
    }
    if (_replaceAll != null) {
      _elvis = _replaceAll;
    } else {
      _elvis = "";
    }
    String _plus_2 = (_plus_1 + _elvis);
    String _plus_3 = (_plus_2 + "\"\n");
    String _spaces_1 = this.spaces(indent);
    String _plus_4 = (_plus_3 + _spaces_1);
    return (_plus_4 + "}");
  }

  public String convertToJson(final WorkflowBody body, final int indent) {
    final StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    String _spaces = this.spaces((indent + 2));
    String _plus = (_spaces + "\"steps\": [\n");
    sb.append(_plus);
    for (int i = 0; (i < body.getSteps().size()); i++) {
      {
        String _spaces_1 = this.spaces((indent + 4));
        String _convertToJson = this.convertToJson(body.getSteps().get(i), (indent + 4));
        String _plus_1 = (_spaces_1 + _convertToJson);
        sb.append(_plus_1);
        int _size = body.getSteps().size();
        int _minus = (_size - 1);
        boolean _lessThan = (i < _minus);
        if (_lessThan) {
          sb.append(",");
        }
        sb.append("\n");
      }
    }
    String _spaces_1 = this.spaces((indent + 2));
    String _plus_1 = (_spaces_1 + "]\n");
    sb.append(_plus_1);
    String _spaces_2 = this.spaces(indent);
    String _plus_2 = (_spaces_2 + "}");
    sb.append(_plus_2);
    return sb.toString();
  }

  public String convertToJson(final Step step, final int indent) {
    final StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    String _spaces = this.spaces((indent + 2));
    String _plus = (_spaces + "\"type\": \"step\",\n");
    sb.append(_plus);
    String _spaces_1 = this.spaces((indent + 2));
    String _plus_1 = (_spaces_1 + "\"name\": \"");
    String _name = step.getName();
    String _plus_2 = (_plus_1 + _name);
    String _plus_3 = (_plus_2 + "\",\n");
    sb.append(_plus_3);
    String _spaces_2 = this.spaces((indent + 2));
    String _plus_4 = (_spaces_2 + "\"transformation\": ");
    String _convertToJson = this.convertToJson(step.getTransformation(), (indent + 2));
    String _plus_5 = (_plus_4 + _convertToJson);
    sb.append(_plus_5);
    String _target = step.getTarget();
    boolean _tripleNotEquals = (_target != null);
    if (_tripleNotEquals) {
      sb.append(",\n");
      String _spaces_3 = this.spaces((indent + 2));
      String _plus_6 = (_spaces_3 + "\"target\": \"");
      String _target_1 = step.getTarget();
      String _plus_7 = (_plus_6 + _target_1);
      String _plus_8 = (_plus_7 + "\"");
      sb.append(_plus_8);
    }
    ContractBlock _contracts = step.getContracts();
    boolean _tripleNotEquals_1 = (_contracts != null);
    if (_tripleNotEquals_1) {
      sb.append(",\n");
      String _spaces_4 = this.spaces((indent + 2));
      String _plus_9 = (_spaces_4 + "\"contracts\": ");
      String _convertToJson_1 = this.convertToJson(step.getContracts(), (indent + 2));
      String _plus_10 = (_plus_9 + _convertToJson_1);
      sb.append(_plus_10);
    }
    sb.append("\n");
    String _spaces_5 = this.spaces(indent);
    String _plus_11 = (_spaces_5 + "}");
    sb.append(_plus_11);
    return sb.toString();
  }

  public String convertToJson(final ContractBlock contractBlock, final int indent) {
    final StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    String _spaces = this.spaces((indent + 2));
    String _plus = (_spaces + "\"contracts\": [\n");
    sb.append(_plus);
    for (int i = 0; (i < contractBlock.getContracts().size()); i++) {
      {
        String _spaces_1 = this.spaces((indent + 4));
        String _convertToJson = this.convertToJson(contractBlock.getContracts().get(i), (indent + 4));
        String _plus_1 = (_spaces_1 + _convertToJson);
        sb.append(_plus_1);
        int _size = contractBlock.getContracts().size();
        int _minus = (_size - 1);
        boolean _lessThan = (i < _minus);
        if (_lessThan) {
          sb.append(",");
        }
        sb.append("\n");
      }
    }
    String _spaces_1 = this.spaces((indent + 2));
    String _plus_1 = (_spaces_1 + "]\n");
    sb.append(_plus_1);
    String _spaces_2 = this.spaces(indent);
    String _plus_2 = (_spaces_2 + "}");
    sb.append(_plus_2);
    return sb.toString();
  }

  public String convertToJson(final Contract contract, final int indent) {
    final StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    boolean _matched = false;
    if (contract instanceof Precondition) {
      _matched=true;
      String _spaces = this.spaces((indent + 2));
      String _plus = (_spaces + "\"type\": \"precondition\"");
      sb.append(_plus);
    }
    if (!_matched) {
      if (contract instanceof Postcondition) {
        _matched=true;
        String _spaces = this.spaces((indent + 2));
        String _plus = (_spaces + "\"type\": \"postcondition\"");
        sb.append(_plus);
      }
    }
    if (!_matched) {
      if (contract instanceof Invariant) {
        _matched=true;
        String _spaces = this.spaces((indent + 2));
        String _plus = (_spaces + "\"type\": \"invariant\"");
        sb.append(_plus);
      }
    }
    ContractName _name = contract.getName();
    boolean _tripleNotEquals = (_name != null);
    if (_tripleNotEquals) {
      sb.append(",\n");
      String _spaces = this.spaces((indent + 2));
      String _plus = (_spaces + "\"name\": ");
      String _convertToJson = this.convertToJson(contract.getName(), (indent + 2));
      String _plus_1 = (_plus + _convertToJson);
      sb.append(_plus_1);
    }
    ContractBody _body = contract.getBody();
    boolean _tripleNotEquals_1 = (_body != null);
    if (_tripleNotEquals_1) {
      sb.append(",\n");
      String _spaces_1 = this.spaces((indent + 2));
      String _plus_2 = (_spaces_1 + "\"body\": ");
      String _convertToJson_1 = this.convertToJson(contract.getBody(), (indent + 2));
      String _plus_3 = (_plus_2 + _convertToJson_1);
      sb.append(_plus_3);
    }
    sb.append("\n");
    String _spaces_2 = this.spaces(indent);
    String _plus_4 = (_spaces_2 + "}");
    sb.append(_plus_4);
    return sb.toString();
  }

  public String convertToJson(final ContractName name, final int indent) {
    String _spaces = this.spaces((indent + 2));
    String _plus = ("{\n" + _spaces);
    String _plus_1 = (_plus + "\"name\": \"");
    String _elvis = null;
    String _name = name.getName();
    String _replaceAll = null;
    if (_name!=null) {
      _replaceAll=_name.replaceAll("\"", "");
    }
    if (_replaceAll != null) {
      _elvis = _replaceAll;
    } else {
      _elvis = "";
    }
    String _plus_2 = (_plus_1 + _elvis);
    String _plus_3 = (_plus_2 + "\"\n");
    String _spaces_1 = this.spaces(indent);
    String _plus_4 = (_plus_3 + _spaces_1);
    return (_plus_4 + "}");
  }

  public String convertToJson(final ContractBody body, final int indent) {
    final StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    ContractType _type = body.getType();
    boolean _tripleNotEquals = (_type != null);
    if (_tripleNotEquals) {
      String _spaces = this.spaces((indent + 2));
      String _plus = (_spaces + "\"contract_type\": ");
      String _convertToJson = this.convertToJson(body.getType(), (indent + 2));
      String _plus_1 = (_plus + _convertToJson);
      sb.append(_plus_1);
    }
    sb.append("\n");
    String _spaces_1 = this.spaces(indent);
    String _plus_2 = (_spaces_1 + "}");
    sb.append(_plus_2);
    return sb.toString();
  }

  public String convertToJson(final ContractType contractType, final int indent) {
    final StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    boolean _matched = false;
    if (contractType instanceof ValueRangeContract) {
      _matched=true;
      String _spaces = this.spaces((indent + 2));
      String _plus = (_spaces + "\"type\": \"value_range\",\n");
      sb.append(_plus);
      String _spaces_1 = this.spaces((indent + 2));
      String _plus_1 = (_spaces_1 + "\"field\": ");
      String _convertToJson = this.convertToJson(((ValueRangeContract)contractType).getField(), (indent + 2));
      String _plus_2 = (_plus_1 + _convertToJson);
      String _plus_3 = (_plus_2 + ",\n");
      sb.append(_plus_3);
      String _spaces_2 = this.spaces((indent + 2));
      String _plus_4 = (_spaces_2 + "\"value\": ");
      String _convertToJson_1 = this.convertToJson(((ValueRangeContract)contractType).getValue(), (indent + 2));
      String _plus_5 = (_plus_4 + _convertToJson_1);
      sb.append(_plus_5);
    }
    if (!_matched) {
      if (contractType instanceof ConditionContract) {
        _matched=true;
        String _spaces = this.spaces((indent + 2));
        String _plus = (_spaces + "\"type\": \"condition\",\n");
        sb.append(_plus);
        String _spaces_1 = this.spaces((indent + 2));
        String _plus_1 = (_spaces_1 + "\"if_clause\": ");
        String _convertToJson = this.convertToJson(((ConditionContract)contractType).getIfClause(), (indent + 2));
        String _plus_2 = (_plus_1 + _convertToJson);
        String _plus_3 = (_plus_2 + ",\n");
        sb.append(_plus_3);
        String _spaces_2 = this.spaces((indent + 2));
        String _plus_4 = (_spaces_2 + "\"then_clause\": ");
        String _convertToJson_1 = this.convertToJson(((ConditionContract)contractType).getThenClause(), (indent + 2));
        String _plus_5 = (_plus_4 + _convertToJson_1);
        sb.append(_plus_5);
      }
    }
    if (!_matched) {
      if (contractType instanceof SpecialValueContract) {
        _matched=true;
        String _spaces = this.spaces((indent + 2));
        String _plus = (_spaces + "\"type\": \"special_value\",\n");
        sb.append(_plus);
        String _spaces_1 = this.spaces((indent + 2));
        String _plus_1 = (_spaces_1 + "\"field\": ");
        String _convertToJson = this.convertToJson(((SpecialValueContract)contractType).getField(), (indent + 2));
        String _plus_2 = (_plus_1 + _convertToJson);
        sb.append(_plus_2);
      }
    }
    if (!_matched) {
      if (contractType instanceof CastTypeContract) {
        _matched=true;
        String _spaces = this.spaces((indent + 2));
        String _plus = (_spaces + "\"type\": \"cast_type\",\n");
        sb.append(_plus);
        String _spaces_1 = this.spaces((indent + 2));
        String _plus_1 = (_spaces_1 + "\"cast_type_name\": \"");
        String _type = ((CastTypeContract)contractType).getType();
        String _plus_2 = (_plus_1 + _type);
        String _plus_3 = (_plus_2 + "\",\n");
        sb.append(_plus_3);
        String _spaces_2 = this.spaces((indent + 2));
        String _plus_4 = (_spaces_2 + "\"field\": ");
        String _convertToJson = this.convertToJson(((CastTypeContract)contractType).getField(), (indent + 2));
        String _plus_5 = (_plus_4 + _convertToJson);
        sb.append(_plus_5);
      }
    }
    sb.append("\n");
    String _spaces = this.spaces(indent);
    String _plus = (_spaces + "}");
    sb.append(_plus);
    return sb.toString();
  }

  public String convertToJson(final ContractField field, final int indent) {
    String _spaces = this.spaces((indent + 2));
    String _plus = ("{\n" + _spaces);
    String _plus_1 = (_plus + "\"column\": ");
    String _convertToJson = this.convertToJson(field.getColumn(), (indent + 2));
    String _plus_2 = (_plus_1 + _convertToJson);
    String _plus_3 = (_plus_2 + "\n");
    String _spaces_1 = this.spaces(indent);
    String _plus_4 = (_plus_3 + _spaces_1);
    return (_plus_4 + "}");
  }

  public String convertToJson(final Transformation transformation, final int indent) {
    final StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    boolean _matched = false;
    if (transformation instanceof RowFilter) {
      _matched=true;
      String _spaces = this.spaces((indent + 2));
      String _plus = (_spaces + "\"type\": \"row_filter\",\n");
      sb.append(_plus);
      String _spaces_1 = this.spaces((indent + 2));
      String _plus_1 = (_spaces_1 + "\"condition\": ");
      String _convertToJson = this.convertToJson(((RowFilter)transformation).getCondition(), (indent + 2));
      String _plus_2 = (_plus_1 + _convertToJson);
      sb.append(_plus_2);
    }
    if (!_matched) {
      if (transformation instanceof ColumnFilter) {
        _matched=true;
        String _spaces = this.spaces((indent + 2));
        String _plus = (_spaces + "\"type\": \"column_filter\",\n");
        sb.append(_plus);
        String _spaces_1 = this.spaces((indent + 2));
        String _plus_1 = (_spaces_1 + "\"columns\": ");
        String _convertToJson = this.convertToJson(((ColumnFilter)transformation).getColumns(), (indent + 2));
        String _plus_2 = (_plus_1 + _convertToJson);
        sb.append(_plus_2);
      }
    }
    if (!_matched) {
      if (transformation instanceof ValueMapping) {
        _matched=true;
        String _spaces = this.spaces((indent + 2));
        String _plus = (_spaces + "\"type\": \"value_mapping\",\n");
        sb.append(_plus);
        String _spaces_1 = this.spaces((indent + 2));
        String _plus_1 = (_spaces_1 + "\"column\": ");
        String _convertToJson = this.convertToJson(((ValueMapping)transformation).getColumn(), (indent + 2));
        String _plus_2 = (_plus_1 + _convertToJson);
        String _plus_3 = (_plus_2 + ",\n");
        sb.append(_plus_3);
        String _spaces_2 = this.spaces((indent + 2));
        String _plus_4 = (_spaces_2 + "\"rules\": ");
        String _convertToJson_1 = this.convertToJson(((ValueMapping)transformation).getRules(), (indent + 2));
        String _plus_5 = (_plus_4 + _convertToJson_1);
        String _plus_6 = (_plus_5 + ",\n");
        sb.append(_plus_6);
        String _spaces_3 = this.spaces((indent + 2));
        String _plus_7 = (_spaces_3 + "\"mode\": ");
        String _convertToJson_2 = this.convertToJson(((ValueMapping)transformation).getMode(), (indent + 2));
        String _plus_8 = (_plus_7 + _convertToJson_2);
        sb.append(_plus_8);
      }
    }
    if (!_matched) {
      if (transformation instanceof MathOp) {
        _matched=true;
        String _spaces = this.spaces((indent + 2));
        String _plus = (_spaces + "\"type\": \"math_operation\",\n");
        sb.append(_plus);
        String _spaces_1 = this.spaces((indent + 2));
        String _plus_1 = (_spaces_1 + "\"expression\": ");
        String _convertToJson = this.convertToJson(((MathOp)transformation).getExpression(), (indent + 2));
        String _plus_2 = (_plus_1 + _convertToJson);
        String _plus_3 = (_plus_2 + ",\n");
        sb.append(_plus_3);
        String _spaces_2 = this.spaces((indent + 2));
        String _plus_4 = (_spaces_2 + "\"new_name\": \"");
        String _newName = ((MathOp)transformation).getNewName();
        String _plus_5 = (_plus_4 + _newName);
        String _plus_6 = (_plus_5 + "\"");
        sb.append(_plus_6);
      }
    }
    if (!_matched) {
      if (transformation instanceof TypeConversion) {
        _matched=true;
        String _spaces = this.spaces((indent + 2));
        String _plus = (_spaces + "\"type\": \"type_conversion\",\n");
        sb.append(_plus);
        String _spaces_1 = this.spaces((indent + 2));
        String _plus_1 = (_spaces_1 + "\"columns\": ");
        String _convertToJson = this.convertToJson(((TypeConversion)transformation).getColumns(), (indent + 2));
        String _plus_2 = (_plus_1 + _convertToJson);
        sb.append(_plus_2);
      }
    }
    if (!_matched) {
      if (transformation instanceof Imputation) {
        _matched=true;
        String _spaces = this.spaces((indent + 2));
        String _plus = (_spaces + "\"type\": \"imputation\",\n");
        sb.append(_plus);
        String _spaces_1 = this.spaces((indent + 2));
        String _plus_1 = (_spaces_1 + "\"columns\": ");
        String _convertToJson = this.convertToJson(((Imputation)transformation).getColumns(), (indent + 2));
        String _plus_2 = (_plus_1 + _convertToJson);
        String _plus_3 = (_plus_2 + ",\n");
        sb.append(_plus_3);
        String _spaces_2 = this.spaces((indent + 2));
        String _plus_4 = (_spaces_2 + "\"method\": ");
        String _convertToJson_1 = this.convertToJson(((Imputation)transformation).getMethod(), (indent + 2));
        String _plus_5 = (_plus_4 + _convertToJson_1);
        sb.append(_plus_5);
      }
    }
    if (!_matched) {
      if (transformation instanceof Join) {
        _matched=true;
        String _spaces = this.spaces((indent + 2));
        String _plus = (_spaces + "\"type\": \"join\",\n");
        sb.append(_plus);
        String _spaces_1 = this.spaces((indent + 2));
        String _plus_1 = (_spaces_1 + "\"left\": \"");
        String _left = ((Join)transformation).getLeft();
        String _plus_2 = (_plus_1 + _left);
        String _plus_3 = (_plus_2 + "\",\n");
        sb.append(_plus_3);
        String _spaces_2 = this.spaces((indent + 2));
        String _plus_4 = (_spaces_2 + "\"right\": \"");
        String _right = ((Join)transformation).getRight();
        String _plus_5 = (_plus_4 + _right);
        String _plus_6 = (_plus_5 + "\",\n");
        sb.append(_plus_6);
        String _spaces_3 = this.spaces((indent + 2));
        String _plus_7 = (_spaces_3 + "\"spec\": ");
        String _convertToJson = this.convertToJson(((Join)transformation).getSpec(), (indent + 2));
        String _plus_8 = (_plus_7 + _convertToJson);
        sb.append(_plus_8);
      }
    }
    if (!_matched) {
      String _spaces = this.spaces((indent + 2));
      String _plus = (_spaces + "\"type\": \"unknown_transformation\"");
      sb.append(_plus);
    }
    sb.append("\n");
    String _spaces_1 = this.spaces(indent);
    String _plus_1 = (_spaces_1 + "}");
    sb.append(_plus_1);
    return sb.toString();
  }

  public String convertToJson(final Column column, final int indent) {
    final StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    String _spaces = this.spaces((indent + 2));
    String _plus = (_spaces + "\"name\": \"");
    String _name = column.getName();
    String _plus_1 = (_plus + _name);
    String _plus_2 = (_plus_1 + "\"");
    sb.append(_plus_2);
    String _table = column.getTable();
    boolean _tripleNotEquals = (_table != null);
    if (_tripleNotEquals) {
      sb.append(",\n");
      String _spaces_1 = this.spaces((indent + 2));
      String _plus_3 = (_spaces_1 + "\"table\": \"");
      String _table_1 = column.getTable();
      String _plus_4 = (_plus_3 + _table_1);
      String _plus_5 = (_plus_4 + "\",\n");
      sb.append(_plus_5);
      String _spaces_2 = this.spaces((indent + 2));
      String _plus_6 = (_spaces_2 + "\"column\": \"");
      String _column = column.getColumn();
      String _plus_7 = (_plus_6 + _column);
      String _plus_8 = (_plus_7 + "\"");
      sb.append(_plus_8);
    }
    sb.append("\n");
    String _spaces_3 = this.spaces(indent);
    String _plus_9 = (_spaces_3 + "}");
    sb.append(_plus_9);
    return sb.toString();
  }

  public String convertToJson(final ColumnList columnList, final int indent) {
    final StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    String _spaces = this.spaces((indent + 2));
    String _plus = (_spaces + "\"columns\": [\n");
    sb.append(_plus);
    for (int i = 0; (i < columnList.getColumns().size()); i++) {
      {
        String _spaces_1 = this.spaces((indent + 4));
        String _convertToJson = this.convertToJson(columnList.getColumns().get(i), (indent + 4));
        String _plus_1 = (_spaces_1 + _convertToJson);
        sb.append(_plus_1);
        int _size = columnList.getColumns().size();
        int _minus = (_size - 1);
        boolean _lessThan = (i < _minus);
        if (_lessThan) {
          sb.append(",");
        }
        sb.append("\n");
      }
    }
    String _spaces_1 = this.spaces((indent + 2));
    String _plus_1 = (_spaces_1 + "]\n");
    sb.append(_plus_1);
    String _spaces_2 = this.spaces(indent);
    String _plus_2 = (_spaces_2 + "}");
    sb.append(_plus_2);
    return sb.toString();
  }

  public String convertToJson(final FilterCondition condition, final int indent) {
    String _spaces = this.spaces((indent + 2));
    String _plus = ("{\n" + _spaces);
    String _plus_1 = (_plus + "\"type\": \"filter_condition\"\n");
    String _spaces_1 = this.spaces(indent);
    String _plus_2 = (_plus_1 + _spaces_1);
    return (_plus_2 + "}");
  }

  public String convertToJson(final MappingRules rules, final int indent) {
    String _spaces = this.spaces((indent + 2));
    String _plus = ("{\n" + _spaces);
    String _plus_1 = (_plus + "\"type\": \"mapping_rules\"\n");
    String _spaces_1 = this.spaces(indent);
    String _plus_2 = (_plus_1 + _spaces_1);
    return (_plus_2 + "}");
  }

  public String convertToJson(final MappingMode mode, final int indent) {
    String _spaces = this.spaces((indent + 2));
    String _plus = ("{\n" + _spaces);
    String _plus_1 = (_plus + "\"type\": \"mapping_mode\"\n");
    String _spaces_1 = this.spaces(indent);
    String _plus_2 = (_plus_1 + _spaces_1);
    return (_plus_2 + "}");
  }

  public String convertToJson(final MathExpression expression, final int indent) {
    String _spaces = this.spaces((indent + 2));
    String _plus = ("{\n" + _spaces);
    String _plus_1 = (_plus + "\"type\": \"math_expression\"\n");
    String _spaces_1 = this.spaces(indent);
    String _plus_2 = (_plus_1 + _spaces_1);
    return (_plus_2 + "}");
  }

  public String convertToJson(final ImputeMethod method, final int indent) {
    final StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    boolean _matched = false;
    if (method instanceof FixedImpute) {
      _matched=true;
      String _spaces = this.spaces((indent + 2));
      String _plus = (_spaces + "\"type\": \"fixed\"");
      sb.append(_plus);
    }
    if (!_matched) {
      String _spaces = this.spaces((indent + 2));
      String _plus = (_spaces + "\"type\": \"other\"");
      sb.append(_plus);
    }
    sb.append("\n");
    String _spaces_1 = this.spaces(indent);
    String _plus_1 = (_spaces_1 + "}");
    sb.append(_plus_1);
    return sb.toString();
  }

  public String convertToJson(final JoinSpec spec, final int indent) {
    final StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    String _spaces = this.spaces((indent + 2));
    String _plus = (_spaces + "\"join_type\": \"");
    String _type = spec.getType();
    String _plus_1 = (_plus + _type);
    String _plus_2 = (_plus_1 + "\",\n");
    sb.append(_plus_2);
    String _spaces_1 = this.spaces((indent + 2));
    String _plus_3 = (_spaces_1 + "\"conditions\": ");
    String _convertToJson = this.convertToJson(spec.getConditions(), (indent + 2));
    String _plus_4 = (_plus_3 + _convertToJson);
    sb.append(_plus_4);
    JoinOptions _options = spec.getOptions();
    boolean _tripleNotEquals = (_options != null);
    if (_tripleNotEquals) {
      sb.append(",\n");
      String _spaces_2 = this.spaces((indent + 2));
      String _plus_5 = (_spaces_2 + "\"options\": ");
      String _convertToJson_1 = this.convertToJson(spec.getOptions(), (indent + 2));
      String _plus_6 = (_plus_5 + _convertToJson_1);
      sb.append(_plus_6);
    }
    sb.append("\n");
    String _spaces_3 = this.spaces(indent);
    String _plus_7 = (_spaces_3 + "}");
    sb.append(_plus_7);
    return sb.toString();
  }

  public String convertToJson(final JoinConditions conditions, final int indent) {
    final StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    String _spaces = this.spaces((indent + 2));
    String _plus = (_spaces + "\"conditions\": [\n");
    sb.append(_plus);
    for (int i = 0; (i < conditions.getConditions().size()); i++) {
      {
        String _spaces_1 = this.spaces((indent + 4));
        String _convertToJson = this.convertToJson(conditions.getConditions().get(i), (indent + 4));
        String _plus_1 = (_spaces_1 + _convertToJson);
        sb.append(_plus_1);
        int _size = conditions.getConditions().size();
        int _minus = (_size - 1);
        boolean _lessThan = (i < _minus);
        if (_lessThan) {
          sb.append(",");
        }
        sb.append("\n");
      }
    }
    String _spaces_1 = this.spaces((indent + 2));
    String _plus_1 = (_spaces_1 + "]\n");
    sb.append(_plus_1);
    String _spaces_2 = this.spaces(indent);
    String _plus_2 = (_spaces_2 + "}");
    sb.append(_plus_2);
    return sb.toString();
  }

  public String convertToJson(final JoinCondition condition, final int indent) {
    final StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    String _spaces = this.spaces((indent + 2));
    String _plus = (_spaces + "\"left\": ");
    String _convertToJson = this.convertToJson(condition.getLeft(), (indent + 2));
    String _plus_1 = (_plus + _convertToJson);
    String _plus_2 = (_plus_1 + ",\n");
    sb.append(_plus_2);
    String _spaces_1 = this.spaces((indent + 2));
    String _plus_3 = (_spaces_1 + "\"right\": ");
    String _convertToJson_1 = this.convertToJson(condition.getRight(), (indent + 2));
    String _plus_4 = (_plus_3 + _convertToJson_1);
    String _plus_5 = (_plus_4 + ",\n");
    sb.append(_plus_5);
    String _xifexpression = null;
    String _comparator = condition.getComparator();
    boolean _tripleNotEquals = (_comparator != null);
    if (_tripleNotEquals) {
      _xifexpression = condition.getComparator();
    } else {
      _xifexpression = "=";
    }
    final String comparator = _xifexpression;
    String _spaces_2 = this.spaces((indent + 2));
    String _plus_6 = (_spaces_2 + "\"comparator\": \"");
    String _plus_7 = (_plus_6 + comparator);
    String _plus_8 = (_plus_7 + "\"\n");
    sb.append(_plus_8);
    String _spaces_3 = this.spaces(indent);
    String _plus_9 = (_spaces_3 + "}");
    sb.append(_plus_9);
    return sb.toString();
  }

  public String convertToJson(final JoinOptions options, final int indent) {
    final StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    String _spaces = this.spaces((indent + 2));
    String _plus = (_spaces + "\"left_suffix\": \"");
    String _elvis = null;
    String _leftSuffix = options.getLeftSuffix();
    String _replaceAll = null;
    if (_leftSuffix!=null) {
      _replaceAll=_leftSuffix.replaceAll("\"", "");
    }
    if (_replaceAll != null) {
      _elvis = _replaceAll;
    } else {
      _elvis = "";
    }
    String _plus_1 = (_plus + _elvis);
    String _plus_2 = (_plus_1 + "\",\n");
    sb.append(_plus_2);
    String _spaces_1 = this.spaces((indent + 2));
    String _plus_3 = (_spaces_1 + "\"right_suffix\": \"");
    String _elvis_1 = null;
    String _rightSuffix = options.getRightSuffix();
    String _replaceAll_1 = null;
    if (_rightSuffix!=null) {
      _replaceAll_1=_rightSuffix.replaceAll("\"", "");
    }
    if (_replaceAll_1 != null) {
      _elvis_1 = _replaceAll_1;
    } else {
      _elvis_1 = "";
    }
    String _plus_4 = (_plus_3 + _elvis_1);
    String _plus_5 = (_plus_4 + "\"\n");
    sb.append(_plus_5);
    String _spaces_2 = this.spaces(indent);
    String _plus_6 = (_spaces_2 + "}");
    sb.append(_plus_6);
    return sb.toString();
  }

  public String convertToJson(final ContractValue value, final int indent) {
    String _spaces = this.spaces((indent + 2));
    String _plus = ("{\n" + _spaces);
    String _plus_1 = (_plus + "\"type\": \"contract_value\"\n");
    String _spaces_1 = this.spaces(indent);
    String _plus_2 = (_plus_1 + _spaces_1);
    return (_plus_2 + "}");
  }

  public String convertToJson(final IfClause clause, final int indent) {
    String _spaces = this.spaces((indent + 2));
    String _plus = ("{\n" + _spaces);
    String _plus_1 = (_plus + "\"type\": \"if_clause\"\n");
    String _spaces_1 = this.spaces(indent);
    String _plus_2 = (_plus_1 + _spaces_1);
    return (_plus_2 + "}");
  }

  public String convertToJson(final ThenClause clause, final int indent) {
    String _spaces = this.spaces((indent + 2));
    String _plus = ("{\n" + _spaces);
    String _plus_1 = (_plus + "\"type\": \"then_clause\"\n");
    String _spaces_1 = this.spaces(indent);
    String _plus_2 = (_plus_1 + _spaces_1);
    return (_plus_2 + "}");
  }

  public String spaces(final int count) {
    final StringBuilder sb = new StringBuilder();
    for (int i = 0; (i < count); i++) {
      sb.append(" ");
    }
    return sb.toString();
  }
}
