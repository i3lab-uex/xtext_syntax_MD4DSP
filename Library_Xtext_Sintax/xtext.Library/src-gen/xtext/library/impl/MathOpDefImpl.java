/**
 * generated by Xtext 2.39.0
 */
package xtext.library.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.library.LibraryPackage;
import xtext.library.MathOpDef;
import xtext.library.OperandDef;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Math Op Def</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.library.impl.MathOpDefImpl#getOperandDef <em>Operand Def</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MathOpDefImpl extends ParameterDefinitionImpl implements MathOpDef
{
  /**
   * The cached value of the '{@link #getOperandDef() <em>Operand Def</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperandDef()
   * @generated
   * @ordered
   */
  protected EList<OperandDef> operandDef;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MathOpDefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LibraryPackage.Literals.MATH_OP_DEF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<OperandDef> getOperandDef()
  {
    if (operandDef == null)
    {
      operandDef = new EObjectContainmentEList<OperandDef>(OperandDef.class, this, LibraryPackage.MATH_OP_DEF__OPERAND_DEF);
    }
    return operandDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LibraryPackage.MATH_OP_DEF__OPERAND_DEF:
        return ((InternalEList<?>)getOperandDef()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LibraryPackage.MATH_OP_DEF__OPERAND_DEF:
        return getOperandDef();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LibraryPackage.MATH_OP_DEF__OPERAND_DEF:
        getOperandDef().clear();
        getOperandDef().addAll((Collection<? extends OperandDef>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LibraryPackage.MATH_OP_DEF__OPERAND_DEF:
        getOperandDef().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LibraryPackage.MATH_OP_DEF__OPERAND_DEF:
        return operandDef != null && !operandDef.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //MathOpDefImpl
