/**
 * generated by Xtext 2.39.0
 */
package xtext.library.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.library.ArgumentDefinition;
import xtext.library.ContractDefinition;
import xtext.library.DataDictionaryDefinition;
import xtext.library.DataProcessingDefinition;
import xtext.library.LibraryPackage;
import xtext.library.ParameterDefinition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Data Processing Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.library.impl.DataProcessingDefinitionImpl#getName <em>Name</em>}</li>
 *   <li>{@link xtext.library.impl.DataProcessingDefinitionImpl#getIn <em>In</em>}</li>
 *   <li>{@link xtext.library.impl.DataProcessingDefinitionImpl#getOut <em>Out</em>}</li>
 *   <li>{@link xtext.library.impl.DataProcessingDefinitionImpl#getParameterdefinition <em>Parameterdefinition</em>}</li>
 *   <li>{@link xtext.library.impl.DataProcessingDefinitionImpl#getContractdefinition <em>Contractdefinition</em>}</li>
 *   <li>{@link xtext.library.impl.DataProcessingDefinitionImpl#getInputPort <em>Input Port</em>}</li>
 *   <li>{@link xtext.library.impl.DataProcessingDefinitionImpl#getOutputPort <em>Output Port</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DataProcessingDefinitionImpl extends MinimalEObjectImpl.Container implements DataProcessingDefinition
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getIn() <em>In</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIn()
   * @generated
   * @ordered
   */
  protected EList<ArgumentDefinition> in;

  /**
   * The cached value of the '{@link #getOut() <em>Out</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOut()
   * @generated
   * @ordered
   */
  protected EList<ArgumentDefinition> out;

  /**
   * The cached value of the '{@link #getParameterdefinition() <em>Parameterdefinition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameterdefinition()
   * @generated
   * @ordered
   */
  protected EList<ParameterDefinition> parameterdefinition;

  /**
   * The cached value of the '{@link #getContractdefinition() <em>Contractdefinition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContractdefinition()
   * @generated
   * @ordered
   */
  protected EList<ContractDefinition> contractdefinition;

  /**
   * The cached value of the '{@link #getInputPort() <em>Input Port</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputPort()
   * @generated
   * @ordered
   */
  protected EList<DataDictionaryDefinition> inputPort;

  /**
   * The cached value of the '{@link #getOutputPort() <em>Output Port</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutputPort()
   * @generated
   * @ordered
   */
  protected EList<DataDictionaryDefinition> outputPort;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DataProcessingDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LibraryPackage.Literals.DATA_PROCESSING_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LibraryPackage.DATA_PROCESSING_DEFINITION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ArgumentDefinition> getIn()
  {
    if (in == null)
    {
      in = new EObjectResolvingEList<ArgumentDefinition>(ArgumentDefinition.class, this, LibraryPackage.DATA_PROCESSING_DEFINITION__IN);
    }
    return in;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ArgumentDefinition> getOut()
  {
    if (out == null)
    {
      out = new EObjectResolvingEList<ArgumentDefinition>(ArgumentDefinition.class, this, LibraryPackage.DATA_PROCESSING_DEFINITION__OUT);
    }
    return out;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ParameterDefinition> getParameterdefinition()
  {
    if (parameterdefinition == null)
    {
      parameterdefinition = new EObjectContainmentEList<ParameterDefinition>(ParameterDefinition.class, this, LibraryPackage.DATA_PROCESSING_DEFINITION__PARAMETERDEFINITION);
    }
    return parameterdefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ContractDefinition> getContractdefinition()
  {
    if (contractdefinition == null)
    {
      contractdefinition = new EObjectContainmentEList<ContractDefinition>(ContractDefinition.class, this, LibraryPackage.DATA_PROCESSING_DEFINITION__CONTRACTDEFINITION);
    }
    return contractdefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DataDictionaryDefinition> getInputPort()
  {
    if (inputPort == null)
    {
      inputPort = new EObjectContainmentEList<DataDictionaryDefinition>(DataDictionaryDefinition.class, this, LibraryPackage.DATA_PROCESSING_DEFINITION__INPUT_PORT);
    }
    return inputPort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DataDictionaryDefinition> getOutputPort()
  {
    if (outputPort == null)
    {
      outputPort = new EObjectContainmentEList<DataDictionaryDefinition>(DataDictionaryDefinition.class, this, LibraryPackage.DATA_PROCESSING_DEFINITION__OUTPUT_PORT);
    }
    return outputPort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LibraryPackage.DATA_PROCESSING_DEFINITION__PARAMETERDEFINITION:
        return ((InternalEList<?>)getParameterdefinition()).basicRemove(otherEnd, msgs);
      case LibraryPackage.DATA_PROCESSING_DEFINITION__CONTRACTDEFINITION:
        return ((InternalEList<?>)getContractdefinition()).basicRemove(otherEnd, msgs);
      case LibraryPackage.DATA_PROCESSING_DEFINITION__INPUT_PORT:
        return ((InternalEList<?>)getInputPort()).basicRemove(otherEnd, msgs);
      case LibraryPackage.DATA_PROCESSING_DEFINITION__OUTPUT_PORT:
        return ((InternalEList<?>)getOutputPort()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LibraryPackage.DATA_PROCESSING_DEFINITION__NAME:
        return getName();
      case LibraryPackage.DATA_PROCESSING_DEFINITION__IN:
        return getIn();
      case LibraryPackage.DATA_PROCESSING_DEFINITION__OUT:
        return getOut();
      case LibraryPackage.DATA_PROCESSING_DEFINITION__PARAMETERDEFINITION:
        return getParameterdefinition();
      case LibraryPackage.DATA_PROCESSING_DEFINITION__CONTRACTDEFINITION:
        return getContractdefinition();
      case LibraryPackage.DATA_PROCESSING_DEFINITION__INPUT_PORT:
        return getInputPort();
      case LibraryPackage.DATA_PROCESSING_DEFINITION__OUTPUT_PORT:
        return getOutputPort();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LibraryPackage.DATA_PROCESSING_DEFINITION__NAME:
        setName((String)newValue);
        return;
      case LibraryPackage.DATA_PROCESSING_DEFINITION__IN:
        getIn().clear();
        getIn().addAll((Collection<? extends ArgumentDefinition>)newValue);
        return;
      case LibraryPackage.DATA_PROCESSING_DEFINITION__OUT:
        getOut().clear();
        getOut().addAll((Collection<? extends ArgumentDefinition>)newValue);
        return;
      case LibraryPackage.DATA_PROCESSING_DEFINITION__PARAMETERDEFINITION:
        getParameterdefinition().clear();
        getParameterdefinition().addAll((Collection<? extends ParameterDefinition>)newValue);
        return;
      case LibraryPackage.DATA_PROCESSING_DEFINITION__CONTRACTDEFINITION:
        getContractdefinition().clear();
        getContractdefinition().addAll((Collection<? extends ContractDefinition>)newValue);
        return;
      case LibraryPackage.DATA_PROCESSING_DEFINITION__INPUT_PORT:
        getInputPort().clear();
        getInputPort().addAll((Collection<? extends DataDictionaryDefinition>)newValue);
        return;
      case LibraryPackage.DATA_PROCESSING_DEFINITION__OUTPUT_PORT:
        getOutputPort().clear();
        getOutputPort().addAll((Collection<? extends DataDictionaryDefinition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LibraryPackage.DATA_PROCESSING_DEFINITION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case LibraryPackage.DATA_PROCESSING_DEFINITION__IN:
        getIn().clear();
        return;
      case LibraryPackage.DATA_PROCESSING_DEFINITION__OUT:
        getOut().clear();
        return;
      case LibraryPackage.DATA_PROCESSING_DEFINITION__PARAMETERDEFINITION:
        getParameterdefinition().clear();
        return;
      case LibraryPackage.DATA_PROCESSING_DEFINITION__CONTRACTDEFINITION:
        getContractdefinition().clear();
        return;
      case LibraryPackage.DATA_PROCESSING_DEFINITION__INPUT_PORT:
        getInputPort().clear();
        return;
      case LibraryPackage.DATA_PROCESSING_DEFINITION__OUTPUT_PORT:
        getOutputPort().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LibraryPackage.DATA_PROCESSING_DEFINITION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case LibraryPackage.DATA_PROCESSING_DEFINITION__IN:
        return in != null && !in.isEmpty();
      case LibraryPackage.DATA_PROCESSING_DEFINITION__OUT:
        return out != null && !out.isEmpty();
      case LibraryPackage.DATA_PROCESSING_DEFINITION__PARAMETERDEFINITION:
        return parameterdefinition != null && !parameterdefinition.isEmpty();
      case LibraryPackage.DATA_PROCESSING_DEFINITION__CONTRACTDEFINITION:
        return contractdefinition != null && !contractdefinition.isEmpty();
      case LibraryPackage.DATA_PROCESSING_DEFINITION__INPUT_PORT:
        return inputPort != null && !inputPort.isEmpty();
      case LibraryPackage.DATA_PROCESSING_DEFINITION__OUTPUT_PORT:
        return outputPort != null && !outputPort.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //DataProcessingDefinitionImpl
