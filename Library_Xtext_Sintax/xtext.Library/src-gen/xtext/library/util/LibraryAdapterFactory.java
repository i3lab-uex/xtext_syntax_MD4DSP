/**
 * generated by Xtext 2.39.0
 */
package xtext.library.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import xtext.library.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see xtext.library.LibraryPackage
 * @generated
 */
public class LibraryAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static LibraryPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LibraryAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = LibraryPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LibrarySwitch<Adapter> modelSwitch =
    new LibrarySwitch<Adapter>()
    {
      @Override
      public Adapter caseLibrary(Library object)
      {
        return createLibraryAdapter();
      }
      @Override
      public Adapter caseDataProcessingDefinition(DataProcessingDefinition object)
      {
        return createDataProcessingDefinitionAdapter();
      }
      @Override
      public Adapter caseJob(Job object)
      {
        return createJobAdapter();
      }
      @Override
      public Adapter caseTransformation(Transformation object)
      {
        return createTransformationAdapter();
      }
      @Override
      public Adapter caseParameterDefinition(ParameterDefinition object)
      {
        return createParameterDefinitionAdapter();
      }
      @Override
      public Adapter caseContractDefinition(ContractDefinition object)
      {
        return createContractDefinitionAdapter();
      }
      @Override
      public Adapter caseContractDefinition0(ContractDefinition0 object)
      {
        return createContractDefinition0Adapter();
      }
      @Override
      public Adapter caseArgumentDefinition(ArgumentDefinition object)
      {
        return createArgumentDefinitionAdapter();
      }
      @Override
      public Adapter caseDataDictionaryDefinition(DataDictionaryDefinition object)
      {
        return createDataDictionaryDefinitionAdapter();
      }
      @Override
      public Adapter caseDataFieldDefinition(DataFieldDefinition object)
      {
        return createDataFieldDefinitionAdapter();
      }
      @Override
      public Adapter caseCategoricalDef(CategoricalDef object)
      {
        return createCategoricalDefAdapter();
      }
      @Override
      public Adapter caseContinuousDef(ContinuousDef object)
      {
        return createContinuousDefAdapter();
      }
      @Override
      public Adapter caseDateDef(DateDef object)
      {
        return createDateDefAdapter();
      }
      @Override
      public Adapter caseMapDef(MapDef object)
      {
        return createMapDefAdapter();
      }
      @Override
      public Adapter caseCastTypeDef(CastTypeDef object)
      {
        return createCastTypeDefAdapter();
      }
      @Override
      public Adapter casePrimitiveDef(PrimitiveDef object)
      {
        return createPrimitiveDefAdapter();
      }
      @Override
      public Adapter caseDerivedFieldDef(DerivedFieldDef object)
      {
        return createDerivedFieldDefAdapter();
      }
      @Override
      public Adapter caseFilterValueDef(FilterValueDef object)
      {
        return createFilterValueDefAdapter();
      }
      @Override
      public Adapter caseMatchingValueDef(MatchingValueDef object)
      {
        return createMatchingValueDefAdapter();
      }
      @Override
      public Adapter caseRangeDef(RangeDef object)
      {
        return createRangeDefAdapter();
      }
      @Override
      public Adapter caseMissingValuesDef(MissingValuesDef object)
      {
        return createMissingValuesDefAdapter();
      }
      @Override
      public Adapter caseDateRangeDef(DateRangeDef object)
      {
        return createDateRangeDefAdapter();
      }
      @Override
      public Adapter caseDiscretizeBinDef(DiscretizeBinDef object)
      {
        return createDiscretizeBinDefAdapter();
      }
      @Override
      public Adapter caseDerivedValueDef(DerivedValueDef object)
      {
        return createDerivedValueDefAdapter();
      }
      @Override
      public Adapter caseNumOpDef(NumOpDef object)
      {
        return createNumOpDefAdapter();
      }
      @Override
      public Adapter caseFixValueDef(FixValueDef object)
      {
        return createFixValueDefAdapter();
      }
      @Override
      public Adapter caseFieldRangeDef(FieldRangeDef object)
      {
        return createFieldRangeDefAdapter();
      }
      @Override
      public Adapter caseMathOpDef(MathOpDef object)
      {
        return createMathOpDefAdapter();
      }
      @Override
      public Adapter caseJoinDef(JoinDef object)
      {
        return createJoinDefAdapter();
      }
      @Override
      public Adapter caseOperandDef(OperandDef object)
      {
        return createOperandDefAdapter();
      }
      @Override
      public Adapter caseFieldDef(FieldDef object)
      {
        return createFieldDefAdapter();
      }
      @Override
      public Adapter caseConditionDef(ConditionDef object)
      {
        return createConditionDefAdapter();
      }
      @Override
      public Adapter caseValueRangeDefinition(ValueRangeDefinition object)
      {
        return createValueRangeDefinitionAdapter();
      }
      @Override
      public Adapter caseFieldRangeDefinition(FieldRangeDefinition object)
      {
        return createFieldRangeDefinitionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link xtext.library.Library <em>Library</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.Library
   * @generated
   */
  public Adapter createLibraryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.DataProcessingDefinition <em>Data Processing Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.DataProcessingDefinition
   * @generated
   */
  public Adapter createDataProcessingDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.Job <em>Job</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.Job
   * @generated
   */
  public Adapter createJobAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.Transformation <em>Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.Transformation
   * @generated
   */
  public Adapter createTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.ParameterDefinition <em>Parameter Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.ParameterDefinition
   * @generated
   */
  public Adapter createParameterDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.ContractDefinition <em>Contract Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.ContractDefinition
   * @generated
   */
  public Adapter createContractDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.ContractDefinition0 <em>Contract Definition0</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.ContractDefinition0
   * @generated
   */
  public Adapter createContractDefinition0Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.ArgumentDefinition <em>Argument Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.ArgumentDefinition
   * @generated
   */
  public Adapter createArgumentDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.DataDictionaryDefinition <em>Data Dictionary Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.DataDictionaryDefinition
   * @generated
   */
  public Adapter createDataDictionaryDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.DataFieldDefinition <em>Data Field Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.DataFieldDefinition
   * @generated
   */
  public Adapter createDataFieldDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.CategoricalDef <em>Categorical Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.CategoricalDef
   * @generated
   */
  public Adapter createCategoricalDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.ContinuousDef <em>Continuous Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.ContinuousDef
   * @generated
   */
  public Adapter createContinuousDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.DateDef <em>Date Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.DateDef
   * @generated
   */
  public Adapter createDateDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.MapDef <em>Map Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.MapDef
   * @generated
   */
  public Adapter createMapDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.CastTypeDef <em>Cast Type Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.CastTypeDef
   * @generated
   */
  public Adapter createCastTypeDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.PrimitiveDef <em>Primitive Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.PrimitiveDef
   * @generated
   */
  public Adapter createPrimitiveDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.DerivedFieldDef <em>Derived Field Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.DerivedFieldDef
   * @generated
   */
  public Adapter createDerivedFieldDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.FilterValueDef <em>Filter Value Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.FilterValueDef
   * @generated
   */
  public Adapter createFilterValueDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.MatchingValueDef <em>Matching Value Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.MatchingValueDef
   * @generated
   */
  public Adapter createMatchingValueDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.RangeDef <em>Range Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.RangeDef
   * @generated
   */
  public Adapter createRangeDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.MissingValuesDef <em>Missing Values Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.MissingValuesDef
   * @generated
   */
  public Adapter createMissingValuesDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.DateRangeDef <em>Date Range Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.DateRangeDef
   * @generated
   */
  public Adapter createDateRangeDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.DiscretizeBinDef <em>Discretize Bin Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.DiscretizeBinDef
   * @generated
   */
  public Adapter createDiscretizeBinDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.DerivedValueDef <em>Derived Value Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.DerivedValueDef
   * @generated
   */
  public Adapter createDerivedValueDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.NumOpDef <em>Num Op Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.NumOpDef
   * @generated
   */
  public Adapter createNumOpDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.FixValueDef <em>Fix Value Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.FixValueDef
   * @generated
   */
  public Adapter createFixValueDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.FieldRangeDef <em>Field Range Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.FieldRangeDef
   * @generated
   */
  public Adapter createFieldRangeDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.MathOpDef <em>Math Op Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.MathOpDef
   * @generated
   */
  public Adapter createMathOpDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.JoinDef <em>Join Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.JoinDef
   * @generated
   */
  public Adapter createJoinDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.OperandDef <em>Operand Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.OperandDef
   * @generated
   */
  public Adapter createOperandDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.FieldDef <em>Field Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.FieldDef
   * @generated
   */
  public Adapter createFieldDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.ConditionDef <em>Condition Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.ConditionDef
   * @generated
   */
  public Adapter createConditionDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.ValueRangeDefinition <em>Value Range Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.ValueRangeDefinition
   * @generated
   */
  public Adapter createValueRangeDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.library.FieldRangeDefinition <em>Field Range Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.library.FieldRangeDefinition
   * @generated
   */
  public Adapter createFieldRangeDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //LibraryAdapterFactory
