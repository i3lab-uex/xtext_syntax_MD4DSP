/**
 * generated by Xtext 2.39.0
 */
package xtext.library.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import xtext.library.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see xtext.library.LibraryPackage
 * @generated
 */
public class LibrarySwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static LibraryPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LibrarySwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = LibraryPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case LibraryPackage.LIBRARY:
      {
        Library library = (Library)theEObject;
        T result = caseLibrary(library);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.DATA_PROCESSING_DEFINITION:
      {
        DataProcessingDefinition dataProcessingDefinition = (DataProcessingDefinition)theEObject;
        T result = caseDataProcessingDefinition(dataProcessingDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.JOB:
      {
        Job job = (Job)theEObject;
        T result = caseJob(job);
        if (result == null) result = caseDataProcessingDefinition(job);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.TRANSFORMATION:
      {
        Transformation transformation = (Transformation)theEObject;
        T result = caseTransformation(transformation);
        if (result == null) result = caseDataProcessingDefinition(transformation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.PARAMETER_DEFINITION:
      {
        ParameterDefinition parameterDefinition = (ParameterDefinition)theEObject;
        T result = caseParameterDefinition(parameterDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.CONTRACT_DEFINITION:
      {
        ContractDefinition contractDefinition = (ContractDefinition)theEObject;
        T result = caseContractDefinition(contractDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.CONTRACT_DEFINITION0:
      {
        ContractDefinition0 contractDefinition0 = (ContractDefinition0)theEObject;
        T result = caseContractDefinition0(contractDefinition0);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.ARGUMENT_DEFINITION:
      {
        ArgumentDefinition argumentDefinition = (ArgumentDefinition)theEObject;
        T result = caseArgumentDefinition(argumentDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.DATA_DICTIONARY_DEFINITION:
      {
        DataDictionaryDefinition dataDictionaryDefinition = (DataDictionaryDefinition)theEObject;
        T result = caseDataDictionaryDefinition(dataDictionaryDefinition);
        if (result == null) result = caseArgumentDefinition(dataDictionaryDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.DATA_FIELD_DEFINITION:
      {
        DataFieldDefinition dataFieldDefinition = (DataFieldDefinition)theEObject;
        T result = caseDataFieldDefinition(dataFieldDefinition);
        if (result == null) result = caseArgumentDefinition(dataFieldDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.CATEGORICAL_DEF:
      {
        CategoricalDef categoricalDef = (CategoricalDef)theEObject;
        T result = caseCategoricalDef(categoricalDef);
        if (result == null) result = caseDataFieldDefinition(categoricalDef);
        if (result == null) result = caseArgumentDefinition(categoricalDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.CONTINUOUS_DEF:
      {
        ContinuousDef continuousDef = (ContinuousDef)theEObject;
        T result = caseContinuousDef(continuousDef);
        if (result == null) result = caseDataFieldDefinition(continuousDef);
        if (result == null) result = caseArgumentDefinition(continuousDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.DATE_DEF:
      {
        DateDef dateDef = (DateDef)theEObject;
        T result = caseDateDef(dateDef);
        if (result == null) result = caseDataFieldDefinition(dateDef);
        if (result == null) result = caseArgumentDefinition(dateDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.MAP_DEF:
      {
        MapDef mapDef = (MapDef)theEObject;
        T result = caseMapDef(mapDef);
        if (result == null) result = caseParameterDefinition(mapDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.CAST_TYPE_DEF:
      {
        CastTypeDef castTypeDef = (CastTypeDef)theEObject;
        T result = caseCastTypeDef(castTypeDef);
        if (result == null) result = caseParameterDefinition(castTypeDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.PRIMITIVE_DEF:
      {
        PrimitiveDef primitiveDef = (PrimitiveDef)theEObject;
        T result = casePrimitiveDef(primitiveDef);
        if (result == null) result = caseParameterDefinition(primitiveDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.DERIVED_FIELD_DEF:
      {
        DerivedFieldDef derivedFieldDef = (DerivedFieldDef)theEObject;
        T result = caseDerivedFieldDef(derivedFieldDef);
        if (result == null) result = caseParameterDefinition(derivedFieldDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.FILTER_VALUE_DEF:
      {
        FilterValueDef filterValueDef = (FilterValueDef)theEObject;
        T result = caseFilterValueDef(filterValueDef);
        if (result == null) result = caseParameterDefinition(filterValueDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.MATCHING_VALUE_DEF:
      {
        MatchingValueDef matchingValueDef = (MatchingValueDef)theEObject;
        T result = caseMatchingValueDef(matchingValueDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.RANGE_DEF:
      {
        RangeDef rangeDef = (RangeDef)theEObject;
        T result = caseRangeDef(rangeDef);
        if (result == null) result = caseParameterDefinition(rangeDef);
        if (result == null) result = caseMatchingValueDef(rangeDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.MISSING_VALUES_DEF:
      {
        MissingValuesDef missingValuesDef = (MissingValuesDef)theEObject;
        T result = caseMissingValuesDef(missingValuesDef);
        if (result == null) result = caseParameterDefinition(missingValuesDef);
        if (result == null) result = caseMatchingValueDef(missingValuesDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.DATE_RANGE_DEF:
      {
        DateRangeDef dateRangeDef = (DateRangeDef)theEObject;
        T result = caseDateRangeDef(dateRangeDef);
        if (result == null) result = caseParameterDefinition(dateRangeDef);
        if (result == null) result = caseMatchingValueDef(dateRangeDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.DISCRETIZE_BIN_DEF:
      {
        DiscretizeBinDef discretizeBinDef = (DiscretizeBinDef)theEObject;
        T result = caseDiscretizeBinDef(discretizeBinDef);
        if (result == null) result = caseParameterDefinition(discretizeBinDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.DERIVED_VALUE_DEF:
      {
        DerivedValueDef derivedValueDef = (DerivedValueDef)theEObject;
        T result = caseDerivedValueDef(derivedValueDef);
        if (result == null) result = caseParameterDefinition(derivedValueDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.NUM_OP_DEF:
      {
        NumOpDef numOpDef = (NumOpDef)theEObject;
        T result = caseNumOpDef(numOpDef);
        if (result == null) result = caseParameterDefinition(numOpDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.FIX_VALUE_DEF:
      {
        FixValueDef fixValueDef = (FixValueDef)theEObject;
        T result = caseFixValueDef(fixValueDef);
        if (result == null) result = caseParameterDefinition(fixValueDef);
        if (result == null) result = caseOperandDef(fixValueDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.FIELD_RANGE_DEF:
      {
        FieldRangeDef fieldRangeDef = (FieldRangeDef)theEObject;
        T result = caseFieldRangeDef(fieldRangeDef);
        if (result == null) result = caseParameterDefinition(fieldRangeDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.MATH_OP_DEF:
      {
        MathOpDef mathOpDef = (MathOpDef)theEObject;
        T result = caseMathOpDef(mathOpDef);
        if (result == null) result = caseParameterDefinition(mathOpDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.JOIN_DEF:
      {
        JoinDef joinDef = (JoinDef)theEObject;
        T result = caseJoinDef(joinDef);
        if (result == null) result = caseParameterDefinition(joinDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.OPERAND_DEF:
      {
        OperandDef operandDef = (OperandDef)theEObject;
        T result = caseOperandDef(operandDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.FIELD_DEF:
      {
        FieldDef fieldDef = (FieldDef)theEObject;
        T result = caseFieldDef(fieldDef);
        if (result == null) result = caseParameterDefinition(fieldDef);
        if (result == null) result = caseOperandDef(fieldDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.CONDITION_DEF:
      {
        ConditionDef conditionDef = (ConditionDef)theEObject;
        T result = caseConditionDef(conditionDef);
        if (result == null) result = caseContractDefinition0(conditionDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.VALUE_RANGE_DEFINITION:
      {
        ValueRangeDefinition valueRangeDefinition = (ValueRangeDefinition)theEObject;
        T result = caseValueRangeDefinition(valueRangeDefinition);
        if (result == null) result = caseContractDefinition0(valueRangeDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LibraryPackage.FIELD_RANGE_DEFINITION:
      {
        FieldRangeDefinition fieldRangeDefinition = (FieldRangeDefinition)theEObject;
        T result = caseFieldRangeDefinition(fieldRangeDefinition);
        if (result == null) result = caseContractDefinition0(fieldRangeDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Library</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Library</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLibrary(Library object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Processing Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Processing Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataProcessingDefinition(DataProcessingDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Job</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Job</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJob(Job object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transformation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transformation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransformation(Transformation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterDefinition(ParameterDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contract Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contract Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContractDefinition(ContractDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contract Definition0</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contract Definition0</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContractDefinition0(ContractDefinition0 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Argument Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Argument Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArgumentDefinition(ArgumentDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Dictionary Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Dictionary Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataDictionaryDefinition(DataDictionaryDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Field Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Field Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataFieldDefinition(DataFieldDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Categorical Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Categorical Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCategoricalDef(CategoricalDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Continuous Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Continuous Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContinuousDef(ContinuousDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Date Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Date Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDateDef(DateDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapDef(MapDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cast Type Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cast Type Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCastTypeDef(CastTypeDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveDef(PrimitiveDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Derived Field Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Derived Field Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDerivedFieldDef(DerivedFieldDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Filter Value Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Filter Value Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFilterValueDef(FilterValueDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Matching Value Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Matching Value Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMatchingValueDef(MatchingValueDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Range Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Range Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRangeDef(RangeDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Missing Values Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Missing Values Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMissingValuesDef(MissingValuesDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Date Range Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Date Range Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDateRangeDef(DateRangeDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Discretize Bin Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Discretize Bin Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiscretizeBinDef(DiscretizeBinDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Derived Value Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Derived Value Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDerivedValueDef(DerivedValueDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Num Op Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Num Op Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumOpDef(NumOpDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fix Value Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fix Value Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFixValueDef(FixValueDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Range Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Range Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldRangeDef(FieldRangeDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Math Op Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Math Op Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMathOpDef(MathOpDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Join Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Join Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJoinDef(JoinDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operand Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operand Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperandDef(OperandDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldDef(FieldDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionDef(ConditionDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value Range Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value Range Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValueRangeDefinition(ValueRangeDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Range Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Range Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldRangeDefinition(FieldRangeDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //LibrarySwitch
