// automatically generated by Xtext
grammar xtext.Library with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate library "http://www.example.org/Library"

// Main entry point
Library:
	'Library'
	name=EString
	'{'
		('dataprocessingdefinition' '{' dataprocessingdefinition+=DataProcessingDefinition ( "," dataprocessingdefinition+=DataProcessingDefinition)* '}' )?
	'}';

// Abstract DataProcessingDefinition
DataProcessingDefinition:
	Job | Transformation;

Job:
	'Job'
	name=EString
	'{'
		'in' '(' in+=[ArgumentDefinition|EString] ( "," in+=[ArgumentDefinition|EString])* ')' 
		'out' '(' out+=[ArgumentDefinition|EString] ( "," out+=[ArgumentDefinition|EString])* ')' 
		'workflow' workflow=EString
		('parameterdefinition' '{' parameterdefinition+=ParameterDefinition ( "," parameterdefinition+=ParameterDefinition)* '}' )?
		('contractdefinition' '{' contractdefinition+=ContractDefinition ( "," contractdefinition+=ContractDefinition)* '}' )?
		'inputPort' '{' inputPort+=DataDictionaryDefinition ( "," inputPort+=DataDictionaryDefinition)* '}' 
		'outputPort' '{' outputPort+=DataDictionaryDefinition ( "," outputPort+=DataDictionaryDefinition)* '}' 
	'}';

Transformation:
	'Transformation'
	name=EString
	'{'
		'in' '(' in+=[ArgumentDefinition|EString] ( "," in+=[ArgumentDefinition|EString])* ')' 
		'out' '(' out+=[ArgumentDefinition|EString] ( "," out+=[ArgumentDefinition|EString])* ')' 
		('parameterdefinition' '{' parameterdefinition+=ParameterDefinition ( "," parameterdefinition+=ParameterDefinition)* '}' )?
		('contractdefinition' '{' contractdefinition+=ContractDefinition ( "," contractdefinition+=ContractDefinition)* '}' )?
		'inputPort' '{' inputPort+=DataDictionaryDefinition ( "," inputPort+=DataDictionaryDefinition)* '}' 
		'outputPort' '{' outputPort+=DataDictionaryDefinition ( "," outputPort+=DataDictionaryDefinition)* '}' 
	'}';

// Abstract ParameterDefinition
ParameterDefinition:
	MapDef | CastTypeDef | PrimitiveDef | DerivedFieldDef | FilterValueDef | 
	DiscretizeBinDef | FieldRangeDef | MathOpDef | JoinDef |
	RangeDef | MissingValuesDef | DateRangeDef |
	DerivedValueDef | NumOpDef | FixValueDef |
	FieldDef;

// Contract Definition
ContractDefinition:
	'ContractDefinition'
	name=EString
	'{'
		('boundTo' boundTo=EString)?
		'contractDefinition' contractDefinition=ContractDefinition0
	'}';

ContractDefinition0:
	ConditionDef | ValueRangeDefinition | FieldRangeDefinition;

// Abstract ArgumentDefinition
ArgumentDefinition:
	DataDictionaryDefinition | DataFieldDefinition;

DataDictionaryDefinition:
	'DataDictionaryDefinition'
	name=EString
	'{'
		('boundTo' boundTo=EString)?
		('datafielddefinition' '{' datafielddefinition+=DataFieldDefinition ( "," datafielddefinition+=DataFieldDefinition)* '}' )?
	'}';

// Abstract DataFieldDefinition
DataFieldDefinition:
	CategoricalDef | ContinuousDef | DateDef;

CategoricalDef:
	'CategoricalDef'
	name=EString
	'{'
		('boundTo' boundTo=EString)?
	'}';

ContinuousDef:
	'ContinuousDef'
	name=EString
	'{'
		('boundTo' boundTo=EString)?
	'}';

DateDef:
	'DateDef'
	name=EString
	'{'
		('boundTo' boundTo=EString)?
	'}';

// ParameterDefinition concrete classes
MapDef:
	'MapDef'
	name=EString
	'{'
		('required' required=EBoolean)?
		('boundTo' boundTo=EString)?
	'}';

CastTypeDef:
	'CastTypeDef'
	name=EString
	'{'
		('required' required=EBoolean)?
		('boundTo' boundTo=EString)?
	'}';

PrimitiveDef:
	'PrimitiveDef'
	name=EString
	'{'
		('required' required=EBoolean)?
		('boundTo' boundTo=EString)?
	'}';

DerivedFieldDef:
	'DerivedFieldDef'
	name=EString
	'{'
		('required' required=EBoolean)?
		('boundTo' boundTo=EString)?
	'}';

FilterValueDef:
	'FilterValueDef'
	name=EString
	'{'
		('required' required=EBoolean)?
		('boundTo' boundTo=EString)?
		('matchingvaluedef' '{' matchingvaluedef+=MatchingValueDef ( "," matchingvaluedef+=MatchingValueDef)* '}' )?
		('primitivedef' '{' primitivedef+=PrimitiveDef ( "," primitivedef+=PrimitiveDef)* '}' )?
	'}';

MatchingValueDef:
	RangeDef | MissingValuesDef | DateRangeDef;

RangeDef:
	'RangeDef'
	name=EString
	'{'
		('required' required=EBoolean)?
		('boundTo' boundTo=EString)?
	'}';

MissingValuesDef:
	'MissingValuesDef'
	name=EString
	'{'
		('required' required=EBoolean)?
		('boundTo' boundTo=EString)?
	'}';

DateRangeDef:
	'DateRangeDef'
	name=EString
	'{'
		('required' required=EBoolean)?
		('boundTo' boundTo=EString)?
	'}';

DiscretizeBinDef:
	'DiscretizeBinDef'
	name=EString
	'{'
		('required' required=EBoolean)?
		('boundTo' boundTo=EString)?
	'}';

DerivedValueDef:
	'DerivedValueDef'
	name=EString
	'{'
		('required' required=EBoolean)?
		('boundTo' boundTo=EString)?
	'}';

NumOpDef:
	'NumOpDef'
	name=EString
	'{'
		('required' required=EBoolean)?
		('boundTo' boundTo=EString)?
	'}';

FixValueDef:
	'FixValueDef'
	name=EString
	'{'
		('required' required=EBoolean)?
		('boundTo' boundTo=EString)?
		'value' value=PrimitiveDef
	'}';

FieldRangeDef:
	'FieldRangeDef'
	name=EString
	'{'
		('required' required=EBoolean)?
		('boundTo' boundTo=EString)?
	'}';

MathOpDef:
	'MathOpDef'
	name=EString
	'{'
		('required' required=EBoolean)?
		('boundTo' boundTo=EString)?
		'operandDef' '{' operandDef+=OperandDef ( "," operandDef+=OperandDef)* '}' 
	'}';

JoinDef:
	'JoinDef'
	name=EString
	'{'
		('required' required=EBoolean)?
		('boundTo' boundTo=EString)?
		'operandDef' '{' operandDef+=OperandDef ( "," operandDef+=OperandDef)* '}' 
	'}';

OperandDef:
	FixValueDef | FieldDef;

FieldDef:
	'FieldDef'
	name=EString
	'{'
		('required' required=EBoolean)?
		('boundTo' boundTo=EString)?
		'datafielddefinition' datafielddefinition=[DataFieldDefinition|EString]
	'}';

// Utility rules
EString:
	STRING | ID;

EBoolean:
	'true' | 'false';

// Placeholders for contracts
ConditionDef:
	'ConditionDef'
	name=EString
	'{'
	'}';

ValueRangeDefinition:
	'ValueRangeDefinition'
	name=EString
	'{'
	'}';

FieldRangeDefinition:
	'FieldRangeDefinition'
	name=EString
	'{'
	'}';
