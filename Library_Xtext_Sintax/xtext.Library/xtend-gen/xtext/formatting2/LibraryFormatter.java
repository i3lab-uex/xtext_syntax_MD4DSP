/**
 * generated by Xtext 2.39.0
 */
package xtext.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;
import xtext.library.ContractDefinition;
import xtext.library.DataDictionaryDefinition;
import xtext.library.DataProcessingDefinition;
import xtext.library.Job;
import xtext.library.Library;
import xtext.library.ParameterDefinition;
import xtext.services.LibraryGrammarAccess;

@SuppressWarnings("all")
public class LibraryFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private LibraryGrammarAccess _libraryGrammarAccess;

  protected void _format(final Library library, @Extension final IFormattableDocument document) {
    EList<DataProcessingDefinition> _dataprocessingdefinition = library.getDataprocessingdefinition();
    for (final DataProcessingDefinition dataProcessingDefinition : _dataprocessingdefinition) {
      document.<DataProcessingDefinition>format(dataProcessingDefinition);
    }
  }

  protected void _format(final Job job, @Extension final IFormattableDocument document) {
    EList<ParameterDefinition> _parameterdefinition = job.getParameterdefinition();
    for (final ParameterDefinition parameterDefinition : _parameterdefinition) {
      document.<ParameterDefinition>format(parameterDefinition);
    }
    EList<ContractDefinition> _contractdefinition = job.getContractdefinition();
    for (final ContractDefinition contractDefinition : _contractdefinition) {
      document.<ContractDefinition>format(contractDefinition);
    }
    EList<DataDictionaryDefinition> _inputPort = job.getInputPort();
    for (final DataDictionaryDefinition dataDictionaryDefinition : _inputPort) {
      document.<DataDictionaryDefinition>format(dataDictionaryDefinition);
    }
    EList<DataDictionaryDefinition> _outputPort = job.getOutputPort();
    for (final DataDictionaryDefinition dataDictionaryDefinition_1 : _outputPort) {
      document.<DataDictionaryDefinition>format(dataDictionaryDefinition_1);
    }
  }

  @XbaseGenerated
  public void format(final Object job, final IFormattableDocument document) {
    if (job instanceof XtextResource) {
      _format((XtextResource)job, document);
      return;
    } else if (job instanceof Job) {
      _format((Job)job, document);
      return;
    } else if (job instanceof Library) {
      _format((Library)job, document);
      return;
    } else if (job instanceof EObject) {
      _format((EObject)job, document);
      return;
    } else if (job == null) {
      _format((Void)null, document);
      return;
    } else if (job != null) {
      _format(job, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(job, document).toString());
    }
  }
}
