/*
 * generated by Xtext 2.40.0
 */
package xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import xtext.ide.contentassist.antlr.internal.InternalMM_M4DSParser;
import xtext.services.MM_M4DSGrammarAccess;

public class MM_M4DSParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MM_M4DSGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MM_M4DSGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getProcessingStepAccess().getAlternatives(), "rule__ProcessingStep__Alternatives");
			builder.put(grammarAccess.getDataFieldAccess().getAlternatives(), "rule__DataField__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getBooleanValueAccess().getValueAlternatives_0(), "rule__BooleanValue__ValueAlternatives_0");
			builder.put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
			builder.put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
			builder.put(grammarAccess.getComparisonOperatorAccess().getAlternatives(), "rule__ComparisonOperator__Alternatives");
			builder.put(grammarAccess.getLibraryAccess().getGroup(), "rule__Library__Group__0");
			builder.put(grammarAccess.getLibraryAccess().getGroup_3(), "rule__Library__Group_3__0");
			builder.put(grammarAccess.getLibraryAccess().getGroup_3_3(), "rule__Library__Group_3_3__0");
			builder.put(grammarAccess.getLibraryAccess().getGroup_4(), "rule__Library__Group_4__0");
			builder.put(grammarAccess.getLibraryAccess().getGroup_4_3(), "rule__Library__Group_4_3__0");
			builder.put(grammarAccess.getJobAccess().getGroup(), "rule__Job__Group__0");
			builder.put(grammarAccess.getJobAccess().getGroup_7(), "rule__Job__Group_7__0");
			builder.put(grammarAccess.getJobAccess().getGroup_7_3(), "rule__Job__Group_7_3__0");
			builder.put(grammarAccess.getTransformationAccess().getGroup(), "rule__Transformation__Group__0");
			builder.put(grammarAccess.getTransformationAccess().getGroup_7(), "rule__Transformation__Group_7__0");
			builder.put(grammarAccess.getTransformationAccess().getGroup_7_3(), "rule__Transformation__Group_7_3__0");
			builder.put(grammarAccess.getWorkflowAccess().getGroup(), "rule__Workflow__Group__0");
			builder.put(grammarAccess.getWorkflowAccess().getGroup_3(), "rule__Workflow__Group_3__0");
			builder.put(grammarAccess.getWorkflowAccess().getGroup_3_3(), "rule__Workflow__Group_3_3__0");
			builder.put(grammarAccess.getWorkflowAccess().getGroup_4(), "rule__Workflow__Group_4__0");
			builder.put(grammarAccess.getWorkflowAccess().getGroup_4_3(), "rule__Workflow__Group_4_3__0");
			builder.put(grammarAccess.getWorkflowAccess().getGroup_5(), "rule__Workflow__Group_5__0");
			builder.put(grammarAccess.getWorkflowAccess().getGroup_5_3(), "rule__Workflow__Group_5_3__0");
			builder.put(grammarAccess.getPMMLModelAccess().getGroup(), "rule__PMMLModel__Group__0");
			builder.put(grammarAccess.getPMMLModelAccess().getGroup_3(), "rule__PMMLModel__Group_3__0");
			builder.put(grammarAccess.getDataProcessingAccess().getGroup(), "rule__DataProcessing__Group__0");
			builder.put(grammarAccess.getDataProcessingAccess().getGroup_7(), "rule__DataProcessing__Group_7__0");
			builder.put(grammarAccess.getContractAccess().getGroup(), "rule__Contract__Group__0");
			builder.put(grammarAccess.getContractAccess().getGroup_3(), "rule__Contract__Group_3__0");
			builder.put(grammarAccess.getContractAccess().getGroup_3_3(), "rule__Contract__Group_3_3__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getCategoricalAccess().getGroup(), "rule__Categorical__Group__0");
			builder.put(grammarAccess.getCategoricalAccess().getGroup_3(), "rule__Categorical__Group_3__0");
			builder.put(grammarAccess.getCategoricalAccess().getGroup_4(), "rule__Categorical__Group_4__0");
			builder.put(grammarAccess.getCategoricalAccess().getGroup_4_3(), "rule__Categorical__Group_4_3__0");
			builder.put(grammarAccess.getContinuousAccess().getGroup(), "rule__Continuous__Group__0");
			builder.put(grammarAccess.getContinuousAccess().getGroup_3(), "rule__Continuous__Group_3__0");
			builder.put(grammarAccess.getContinuousAccess().getGroup_4(), "rule__Continuous__Group_4__0");
			builder.put(grammarAccess.getContinuousAccess().getGroup_5(), "rule__Continuous__Group_5__0");
			builder.put(grammarAccess.getDateFieldAccess().getGroup(), "rule__DateField__Group__0");
			builder.put(grammarAccess.getDateFieldAccess().getGroup_3(), "rule__DateField__Group_3__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup_5(), "rule__Parameter__Group_5__0");
			builder.put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
			builder.put(grammarAccess.getLibraryAccess().getNameAssignment_1(), "rule__Library__NameAssignment_1");
			builder.put(grammarAccess.getLibraryAccess().getJobsAssignment_3_2(), "rule__Library__JobsAssignment_3_2");
			builder.put(grammarAccess.getLibraryAccess().getJobsAssignment_3_3_1(), "rule__Library__JobsAssignment_3_3_1");
			builder.put(grammarAccess.getLibraryAccess().getTransformationsAssignment_4_2(), "rule__Library__TransformationsAssignment_4_2");
			builder.put(grammarAccess.getLibraryAccess().getTransformationsAssignment_4_3_1(), "rule__Library__TransformationsAssignment_4_3_1");
			builder.put(grammarAccess.getJobAccess().getNameAssignment_1(), "rule__Job__NameAssignment_1");
			builder.put(grammarAccess.getJobAccess().getInputAssignment_4(), "rule__Job__InputAssignment_4");
			builder.put(grammarAccess.getJobAccess().getOutputAssignment_6(), "rule__Job__OutputAssignment_6");
			builder.put(grammarAccess.getJobAccess().getParametersAssignment_7_2(), "rule__Job__ParametersAssignment_7_2");
			builder.put(grammarAccess.getJobAccess().getParametersAssignment_7_3_1(), "rule__Job__ParametersAssignment_7_3_1");
			builder.put(grammarAccess.getTransformationAccess().getNameAssignment_1(), "rule__Transformation__NameAssignment_1");
			builder.put(grammarAccess.getTransformationAccess().getInputAssignment_4(), "rule__Transformation__InputAssignment_4");
			builder.put(grammarAccess.getTransformationAccess().getOutputAssignment_6(), "rule__Transformation__OutputAssignment_6");
			builder.put(grammarAccess.getTransformationAccess().getParametersAssignment_7_2(), "rule__Transformation__ParametersAssignment_7_2");
			builder.put(grammarAccess.getTransformationAccess().getParametersAssignment_7_3_1(), "rule__Transformation__ParametersAssignment_7_3_1");
			builder.put(grammarAccess.getWorkflowAccess().getNameAssignment_1(), "rule__Workflow__NameAssignment_1");
			builder.put(grammarAccess.getWorkflowAccess().getStepsAssignment_3_2(), "rule__Workflow__StepsAssignment_3_2");
			builder.put(grammarAccess.getWorkflowAccess().getStepsAssignment_3_3_1(), "rule__Workflow__StepsAssignment_3_3_1");
			builder.put(grammarAccess.getWorkflowAccess().getDataFieldsAssignment_4_2(), "rule__Workflow__DataFieldsAssignment_4_2");
			builder.put(grammarAccess.getWorkflowAccess().getDataFieldsAssignment_4_3_1(), "rule__Workflow__DataFieldsAssignment_4_3_1");
			builder.put(grammarAccess.getWorkflowAccess().getContractsAssignment_5_2(), "rule__Workflow__ContractsAssignment_5_2");
			builder.put(grammarAccess.getWorkflowAccess().getContractsAssignment_5_3_1(), "rule__Workflow__ContractsAssignment_5_3_1");
			builder.put(grammarAccess.getPMMLModelAccess().getNameAssignment_1(), "rule__PMMLModel__NameAssignment_1");
			builder.put(grammarAccess.getPMMLModelAccess().getFilePathAssignment_3_1(), "rule__PMMLModel__FilePathAssignment_3_1");
			builder.put(grammarAccess.getPMMLModelAccess().getInputAssignment_5(), "rule__PMMLModel__InputAssignment_5");
			builder.put(grammarAccess.getPMMLModelAccess().getOutputAssignment_7(), "rule__PMMLModel__OutputAssignment_7");
			builder.put(grammarAccess.getDataProcessingAccess().getNameAssignment_1(), "rule__DataProcessing__NameAssignment_1");
			builder.put(grammarAccess.getDataProcessingAccess().getInputAssignment_4(), "rule__DataProcessing__InputAssignment_4");
			builder.put(grammarAccess.getDataProcessingAccess().getOutputAssignment_6(), "rule__DataProcessing__OutputAssignment_6");
			builder.put(grammarAccess.getDataProcessingAccess().getOperationAssignment_7_1(), "rule__DataProcessing__OperationAssignment_7_1");
			builder.put(grammarAccess.getContractAccess().getNameAssignment_1(), "rule__Contract__NameAssignment_1");
			builder.put(grammarAccess.getContractAccess().getConditionsAssignment_3_2(), "rule__Contract__ConditionsAssignment_3_2");
			builder.put(grammarAccess.getContractAccess().getConditionsAssignment_3_3_1(), "rule__Contract__ConditionsAssignment_3_3_1");
			builder.put(grammarAccess.getConditionAccess().getNameAssignment_1(), "rule__Condition__NameAssignment_1");
			builder.put(grammarAccess.getConditionAccess().getFieldAssignment_4(), "rule__Condition__FieldAssignment_4");
			builder.put(grammarAccess.getConditionAccess().getOperatorAssignment_6(), "rule__Condition__OperatorAssignment_6");
			builder.put(grammarAccess.getConditionAccess().getValueAssignment_8(), "rule__Condition__ValueAssignment_8");
			builder.put(grammarAccess.getCategoricalAccess().getNameAssignment_1(), "rule__Categorical__NameAssignment_1");
			builder.put(grammarAccess.getCategoricalAccess().getDataTypeAssignment_3_1(), "rule__Categorical__DataTypeAssignment_3_1");
			builder.put(grammarAccess.getCategoricalAccess().getValidValuesAssignment_4_2(), "rule__Categorical__ValidValuesAssignment_4_2");
			builder.put(grammarAccess.getCategoricalAccess().getValidValuesAssignment_4_3_1(), "rule__Categorical__ValidValuesAssignment_4_3_1");
			builder.put(grammarAccess.getContinuousAccess().getNameAssignment_1(), "rule__Continuous__NameAssignment_1");
			builder.put(grammarAccess.getContinuousAccess().getDataTypeAssignment_3_1(), "rule__Continuous__DataTypeAssignment_3_1");
			builder.put(grammarAccess.getContinuousAccess().getMinAssignment_4_1(), "rule__Continuous__MinAssignment_4_1");
			builder.put(grammarAccess.getContinuousAccess().getMaxAssignment_5_1(), "rule__Continuous__MaxAssignment_5_1");
			builder.put(grammarAccess.getDateFieldAccess().getNameAssignment_1(), "rule__DateField__NameAssignment_1");
			builder.put(grammarAccess.getDateFieldAccess().getFormatAssignment_3_1(), "rule__DateField__FormatAssignment_3_1");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_4(), "rule__Parameter__TypeAssignment_4");
			builder.put(grammarAccess.getParameterAccess().getValueAssignment_5_1(), "rule__Parameter__ValueAssignment_5_1");
			builder.put(grammarAccess.getStringValueAccess().getValueAssignment(), "rule__StringValue__ValueAssignment");
			builder.put(grammarAccess.getNumberValueAccess().getValueAssignment(), "rule__NumberValue__ValueAssignment");
			builder.put(grammarAccess.getBooleanValueAccess().getValueAssignment(), "rule__BooleanValue__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MM_M4DSGrammarAccess grammarAccess;

	@Override
	protected InternalMM_M4DSParser createParser() {
		InternalMM_M4DSParser result = new InternalMM_M4DSParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MM_M4DSGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MM_M4DSGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
